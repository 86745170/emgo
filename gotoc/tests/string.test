// Go code:
func S(s string) string {
	return s[:]
}
// C code:
// decl
string foo$S(string s$);
// def
string foo$S(string s$) {
	return s$;
}
// end

// Go code:
func S(s string) string {
	return s[0:]
}
// C code:
// decl
string foo$S(string s$);
// def
string foo$S(string s$) {
	return SSLICEL(s$, 0);
}
// end

// Go code:
func S(s string) string {
	return s[:len(s)]
}
// C code:
// decl
string foo$S(string s$);
// def
string foo$S(string s$) {
	return SSLICEH(s$, len(s$));
}
// end

// Go code:
func S(s string) string {
	return s[0:len(s)]
}
// C code:
// decl
string foo$S(string s$);
// def
string foo$S(string s$) {
	return SSLICELH(s$, 0, len(s$));
}
// end

// Go code:
func Eq(s1, s2 string) bool {
	return s1 == s2
}
// C code:
// decl
bool foo$Eq(string s1$, string s2$);
// def
bool foo$Eq(string s1$, string s2$) {
	return equals(s1$, s2$);
}
// end

// Go code:
func Neq(s1, s2 string) bool {
	return s1 != s2
}
// C code:
// decl
bool foo$Neq(string s1$, string s2$);
// def
bool foo$Neq(string s1$, string s2$) {
	return !equals(s1$, s2$);
}
// end

// Go code:
var b = []byte("blaaa")
// C code:
// decl
slice foo$b;
// def
__typeof__(foo$b) foo$b;
// init
	foo$b = BYTES(EGSTR("blaaa"));
// end