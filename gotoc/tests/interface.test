// Go code:
type A interface {
	Len() int
	Elem(int) interface{}
}

type Array []int

func (a *Array) Len() int {
	return a.Len()
}

func (a *Array) Elem(i int) interface{} {
	return (*a)[i]
}

func (a *Array) A() A {
	return a
}
// C code:
// decl
struct foo$A_struct;
typedef struct foo$A_struct foo$A;
// def
struct foo$A_struct {
	interface;
	interface (*Elem)(uintptr, int);
	int (*Len)(uintptr);
};
// decl
typedef slice foo$Array;
// decl
int foo$Array$Len(foo$Array *a$);
// def
int foo$Array$Len(foo$Array *a$) {
	return foo$Array$Len(a$);
}
// decl
interface foo$Array$Elem(foo$Array *a$, int i$);
// def
interface foo$Array$Elem(foo$Array *a$, int i$) {
	return INTERFACE(((int*)(*a$).arr)[i$], 0x19100092);
}
// decl
foo$A foo$Array$A(foo$Array *a$);
// def
foo$A foo$Array$A(foo$Array *a$) {
	return (foo$A){
		.interface = INTERFACE(a$, 0xe2fae8e6),
		.Elem = (interface(*)(uintptr, int))foo$Array$Elem,
		.Len = (int(*)(uintptr))foo$Array$Len
	};
}
// end

// Go code:
type Stringer interface {
	String() string
}

type B byte

func (b B) String() string {
	return "byte"
}

func (b B) Str() Stringer {
	return b
}
// C code:
// decl
struct foo$Stringer_struct;
typedef struct foo$Stringer_struct foo$Stringer;
// def
struct foo$Stringer_struct {
	interface;
	string (*String)(uintptr);
};
// decl
typedef byte foo$B;
// decl
string foo$B$String(foo$B b$);
// def
string foo$B$String(foo$B b$) {
	return EGSTR("byte");
}
// decl
string foo$B$String$(uintptr b$);
// def
string foo$B$String$(uintptr b$) {
	return foo$B$String((foo$B)b$);
}
// decl
foo$Stringer foo$B$Str(foo$B b$);
// def
foo$Stringer foo$B$Str(foo$B b$) {
	return (foo$Stringer){
		.interface = INTERFACE(b$, 0x91ea9690),
		.String = foo$B$String$
	};
}
// decl
foo$Stringer foo$B$Str$(uintptr b$);
// def
foo$Stringer foo$B$Str$(uintptr b$) {
	return foo$B$Str((foo$B)b$);
}
// end

// Go code:
type A interface {
	A() string
}

type AB interface {
	A() string
	B() int
}

func ToA(ab AB) A {
	return ab
}
// C code:
// decl
struct foo$A_struct;
typedef struct foo$A_struct foo$A;
// def
struct foo$A_struct {
	interface;
	string (*A)(uintptr);
};
// decl
struct foo$AB_struct;
typedef struct foo$AB_struct foo$AB;
// def
struct foo$AB_struct {
	interface;
	string (*A)(uintptr);
	int (*B)(uintptr);
};
// decl
foo$A foo$ToA(foo$AB ab$);
// def
foo$A foo$ToA(foo$AB ab$) {
	return ({
		foo$AB e = ab$;
		(foo$A){
			.interface = e.interface,
			.A = e.A
		}
	});
}
// end

// Go code:
type A interface {
	A() (int, int)
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
struct foo$A_struct;
typedef struct foo$A_struct foo$A;
// def
struct foo$A_struct {
	interface;
	int$$int (*A)(uintptr);
};
// end

// Go code:
type Error string

func (e *Error) Error() string {
	return string(*e)
}

var (
	errNoSignal = Error("no signal")
	ErrNoSignal = error(&errNoSignal)
)
// C code:
// decl
typedef string foo$Error;
// decl
string foo$Error$Error(foo$Error *e$);
// def
string foo$Error$Error(foo$Error *e$) {
	return ((string)(*e$));
}
// decl
foo$Error foo$errNoSignal;
// def
foo$Error foo$errNoSignal = EGSTR("no signal");
// decl
error foo$ErrNoSignal;
// def
error foo$ErrNoSignal;
// init
	foo$ErrNoSignal = (error){
		.interface = INTERFACE(&foo$errNoSignal, 0x101c7c62),
		.Error = (string(*)(uintptr))foo$Error$Error
	};
// end

// Go code:
func E(e error) string {
	return e.Error()
}
// C code:
// decl
string foo$E(error e$);
// def
string foo$E(error e$) {
	return e$.Error(e$.val$);
}
// end

// Go code:
type Stringer interface {
	String() string
}

func S(s *Stringer) string {
	return (*s).String()
}
// C code:
// decl
struct foo$Stringer_struct;
typedef struct foo$Stringer_struct foo$Stringer;
// def
struct foo$Stringer_struct {
	interface;
	string (*String)(uintptr);
};
// decl
string foo$S(foo$Stringer *s$);
// def
string foo$S(foo$Stringer *s$) {
	return ({
		foo$Stringer _r = (*s$);
		_r.String(_r.val$);
	});
}
// end
