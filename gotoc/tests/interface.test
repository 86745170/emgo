// Go code:
type A interface {
	Len() int
	Elem(int) interface{}
}

type Array []int

func (a *Array) Len() int {
	return len(*a)
}

func (a *Array) Elem(i int) interface{} {
	return (*a)[i]
}

func (a *Array) A() A {
	return a
}
// C code:
// decl
struct foo$A_struct;
typedef struct foo$A_struct foo$A;
// def
struct foo$A_struct {
	interface (*Elem)(ival*, int);
	int (*Len)(ival*);
};
// decl
typedef slice foo$Array;
// decl
int foo$Array$Len(foo$Array *a$);
// def
int foo$Array$Len(foo$Array *a$) {
	return len(*a$);
}
// decl
int foo$Array$Len$0(ival* a$);
// def
int foo$Array$Len$0(ival* a$) {
	return foo$Array$Len((foo$Array*)a$->ptr);
}
// decl
int foo$Array$Len$1(ival* a$);
// def
int foo$Array$Len$1(ival* a$) {
	return foo$Array$Len((foo$Array*)a$);
}
// decl
interface foo$Array$Elem(foo$Array *a$, int i$);
// def
interface foo$Array$Elem(foo$Array *a$, int i$) {
	return INTERFACE(((int*)(*a$).arr)[i$], nil;
}
// decl
interface foo$Array$Elem$0(ival* a$, int i$);
// def
interface foo$Array$Elem$0(ival* a$, int i$) {
	return foo$Array$Elem((foo$Array*)a$->ptr, i$);
}
// decl
interface foo$Array$Elem$1(ival* a$, int i$);
// def
interface foo$Array$Elem$1(ival* a$, int i$) {
	return foo$Array$Elem((foo$Array*)a$, i$);
}
// decl
foo$A foo$A$$$$8$foo$Array __attribute__((__weak__));
// def
foo$A foo$A$$$$8$foo$Array = {
	foo$Array$Elem$0,
	foo$Array$Len$0
};
// decl
interface foo$Array$A(foo$Array *a$);
// def
interface foo$Array$A(foo$Array *a$) {
	return INTERFACE(a$, &foo$A$$$$8$foo$Array);
}
// decl
interface foo$Array$A$0(ival* a$);
// def
interface foo$Array$A$0(ival* a$) {
	return foo$Array$A((foo$Array*)a$->ptr);
}
// decl
interface foo$Array$A$1(ival* a$);
// def
interface foo$Array$A$1(ival* a$) {
	return foo$Array$A((foo$Array*)a$);
}
// end

// Go code:
type Stringer interface {
	String() string
}

type B byte

func (b B) String() string {
	return "byte"
}

func (b B) Str() Stringer {
	return b
}
// C code:
// decl
struct foo$Stringer_struct;
typedef struct foo$Stringer_struct foo$Stringer;
// def
struct foo$Stringer_struct {
	string (*String)(ival*);
};
// decl
typedef byte foo$B;
// decl
string foo$B$String(foo$B b$);
// def
string foo$B$String(foo$B b$) {
	return EGSTR("byte");
}
// decl
string foo$B$String$0(ival* b$);
// def
string foo$B$String$0(ival* b$) {
	return foo$B$String(*(foo$B*)b$->ptr);
}
// decl
string foo$B$String$1(ival* b$);
// def
string foo$B$String$1(ival* b$) {
	return foo$B$String(*(foo$B*)b$);
}
foo$Stringer foo$Stringer$$$foo$B __attribute__((__weak__));
// def
foo$Stringer foo$Stringer$$$foo$B = {
	foo$B$String$1
};
// end

// Go code:
type A interface {
	A() string
}

type AB interface {
	A() string
	B() int
}

func ToA(ab AB) A {
	return ab
}
// C code:
// decl
struct foo$A_struct;
typedef struct foo$A_struct foo$A;
// def
struct foo$A_struct {
	interface;
	string (*A)(ival*);
};
// decl
struct foo$AB_struct;
typedef struct foo$AB_struct foo$AB;
// def
struct foo$AB_struct {
	interface;
	string (*A)(ival*);
	int (*B)(ival*);
};
// decl
foo$A foo$ToA(foo$AB ab$);
// def
foo$A foo$ToA(foo$AB ab$) {
	return ({
		foo$AB e = ab$;
		(foo$A){
			.interface = e.interface,
			.A = e.A
		}
	});
}
// end

// Go code:
type A interface {
	A() (int, int)
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
struct foo$A_struct;
typedef struct foo$A_struct foo$A;
// def
struct foo$A_struct {
	interface;
	int$$int (*A)(ival*);
};
// end

// Go code:
type Error string

func (e *Error) Error() string {
	return string(*e)
}

var (
	errNoSignal = Error("no signal")
	ErrNoSignal = error(&errNoSignal)
)
// C code:
// decl
typedef string foo$Error;
// decl
string foo$Error$Error(foo$Error *e$);
// def
string foo$Error$Error(foo$Error *e$) {
	return ((string)(*e$));
}
// decl
string foo$Error$Error$0(ival* e$);
// def
string foo$Error$Error$0(ival* e$) {
	return foo$Error$Error((foo$Error*)e$->ptr);
}
// decl
string foo$Error$Error$1(ival* e$);
// def
string foo$Error$Error$1(ival* e$) {
	return foo$Error$Error((foo$Error*)e$);
}
// decl
foo$Error foo$errNoSignal;
// def
foo$Error foo$errNoSignal = EGSTR("no signal");
// decl
error foo$ErrNoSignal;
// def
error foo$ErrNoSignal;
// init
	foo$ErrNoSignal = (error){
		.interface = INTERFACE(&foo$errNoSignal, 0x101c7c62),
		.Error = foo$Error$Error$0
	};
// end

// Go code:
type Error string

func (e Error) Error() string {
	return string(e)
}

var ErrNoSignal error = Error("no signal")
// C code:
// decl
typedef string foo$Error;
// decl
string foo$Error$Error(foo$Error e$);
// def
string foo$Error$Error(foo$Error e$) {
	return ((string)(e$));
}
// decl
string foo$Error$Error$0(ival* e$);
// def
string foo$Error$Error$0(ival* e$) {
	return foo$Error$Error(*(foo$Error*)e$->ptr);
}
// decl
string foo$Error$Error$1(ival* e$);
// def
string foo$Error$Error$1(ival* e$) {
	return foo$Error$Error(*(foo$Error*)e$);
}
// decl
error foo$ErrNoSignal;
// def
error foo$ErrNoSignal = (error){
	.interface = INTERFACE(EGSTR("no signal"), 0x14061479),
	.Error = foo$Error$Error$1
};
// end

// Go code:
func E(e error) string {
	return e.Error()
}
// C code:
// decl
string foo$E(error e$);
// def
string foo$E(error e$) {
	return e$.Error(&e$.val$);
}
// end

// Go code:
type Stringer interface {
	String() string
}

func S(s *Stringer) string {
	return (*s).String()
}
// C code:
// decl
struct foo$Stringer_struct;
typedef struct foo$Stringer_struct foo$Stringer;
// def
struct foo$Stringer_struct {
	interface;
	string (*String)(ival*);
};
// decl
string foo$S(foo$Stringer *s$);
// def
string foo$S(foo$Stringer *s$) {
	return ({
		foo$Stringer _r = (*s$);
		_r.String(&_r.val$);
	});
}
// end

// Go code:
type Reader interface {
	Read([]byte) (int, error)
}

type Writer interface {
	Write([]byte) (int, error)
}

type ReadWriter interface {
	Reader
	Writer
}
// C code:
// decl
struct int$$error_struct;
typedef struct int$$error_struct int$$error;
// def
#ifndef int$$error$
#define int$$error$
struct int$$error_struct {
	int _0;
	error _1;
};
#endif
// decl
struct foo$Reader_struct;
typedef struct foo$Reader_struct foo$Reader;
// def
struct foo$Reader_struct {
	interface;
	int$$error (*Read)(ival*, slice);
};
// decl
struct foo$Writer_struct;
typedef struct foo$Writer_struct foo$Writer;
// def
struct foo$Writer_struct {
	interface;
	int$$error (*Write)(ival*, slice);
};
// decl
struct foo$ReadWriter_struct;
typedef struct foo$ReadWriter_struct foo$ReadWriter;
// def
struct foo$ReadWriter_struct {
	interface;
	int$$error (*Read)(ival*, slice);
	int$$error (*Write)(ival*, slice);
};
// end