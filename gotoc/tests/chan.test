// Go code:
var c chan int;
// C code:
// decl
chan foo$c;
// def
__typeof__(foo$c) foo$c = {};
// end

// Go code:
var c chan int = nil;
// C code:
// decl
chan foo$c;
// def
__typeof__(foo$c) foo$c = NILCHAN;
// end

// Go code:
func R(c chan *int) *int {
	return <-c
}
// C code:
// decl
int_ *foo$R(chan c$);
// def
int_ *foo$R(chan c$) {
	return RECV(int_*, c$, nil);
}
// end

// Go code:
func R(c chan int) (i int, ok bool) {
	i, ok = <-c
	return
}
// C code:
// decl
struct int_$$bool_struct;
typedef struct int_$$bool_struct int_$$bool;
// def
#ifndef int_$$bool$
#define int_$$bool$
struct int_$$bool_struct {
	int_ _0;
	bool _1;
};
#endif
// decl
int_$$bool foo$R(chan c$);
// def
int_$$bool foo$R(chan c$) {
	int_ i$ = 0;
	bool ok$ = false;
	{
		int_$$bool _tmp0 = RECVOK(int_$$bool, c$);
		i$ = _tmp0._0;
		ok$ = _tmp0._1;
		goto end;
	}
end:
	return (int_$$bool){i$, ok$};
}
// end

// Go code:
func S(c chan int, i int) {
	c <- i
	close(c)
}
// C code:
// decl
void foo$S(chan c$, int_ i$);
// def
void foo$S(chan c$, int_ i$) {
	SEND(c$, int_, i$);
	close(c$);
}
// end

// Go code:
func S(c chan int, i int) {
	c <- i + 1
	close(c)
}
// C code:
// decl
void foo$S(chan c$, int_ i$);
// def
void foo$S(chan c$, int_ i$) {
	SEND(c$, int_, (i$+1));
	close(c$);
}
// end

// Go code:
func Len(c chan int) int {
	return len(c)
}
// C code:
// decl
int_ foo$Len(chan c$);
// def
int_ foo$Len(chan c$) {
	return clen(c$);
}
// end

// Go code:
func Cap(c chan int) int {
	return cap(c)
}
// C code:
// decl
int_ foo$Cap(chan c$);
// def
int_ foo$Cap(chan c$) {
	return ccap(c$);
}
// end