// Go code:
var A = 3
// C code:
// decl
int foo$A;
// def
int foo$A = 3;
// end

// Go code:
var A = []int{1, 2, 3}
// C code:
// decl
struct $3_$int_struct;
typedef struct $3_$int_struct $3_$int;
// def
#ifndef $3_$int$
#define $3_$int$
struct $3_$int_struct {
	int arr[3];
};
#endif
// decl
$3_$int array0;
// def
$3_$int array0;
// init
	array0 = (($3_$int){{1, 2, 3}});
// decl
slice foo$A;
// def
slice foo$A;
// init
	foo$A = ASLICE(3, array0);
// end

// Go code:
var A = []int{10: 1, 20: 2, 30: 3}
// C code:
// decl
struct $31_$int_struct;
typedef struct $31_$int_struct $31_$int;
// def
#ifndef $31_$int$
#define $31_$int$
struct $31_$int_struct {
	int arr[31];
};
#endif
// decl
$31_$int array0;
// def
$31_$int array0;
// init
	array0 = (($31_$int){{[10] = 1, [20] = 2, [30] = 3}});
// decl
slice foo$A;
// def
slice foo$A;
// init
	foo$A = ASLICE(31, array0);
// end

// Go code:
var A = []int{1, 2, 30: 3, 4}
// C code:
// decl
struct $32_$int_struct;
typedef struct $32_$int_struct $32_$int;
// def
#ifndef $32_$int$
#define $32_$int$
struct $32_$int_struct {
	int arr[32];
};
#endif
// decl
$32_$int array0;
// def
$32_$int array0;
// init
	array0 = (($32_$int){{1, 2, [30] = 3, 4}});
// decl
slice foo$A;
// def
slice foo$A;
// init
	foo$A = ASLICE(32, array0);
// end

// Go code:
type S struct{a, b int}
var p = &S{a: 1}
// C code:
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	int a;
	int b;
};
// decl
foo$S cl0;
// def
foo$S cl0;
// init
	cl0 = ((foo$S){.a = 1});
// decl
foo$S *foo$p;
// def
foo$S *foo$p;
// init
	foo$p = &cl0;
// end

// Go code:
var F func(byte, int) (bool, int32)
// C code:
// decl
struct bool$$int32_struct;
typedef struct bool$$int32_struct bool$$int32;
// def
#ifndef bool$$int32$
#define bool$$int32$
struct bool$$int32_struct {
	bool _0;
	int32 _1;
};
#endif
// decl
bool$$int32 (*foo$F)(byte, int);
// def
bool$$int32 (*foo$F)(byte, int) = nil;
// end