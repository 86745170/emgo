// Go code:
var A = 3
// C code:
// decl
int_ foo$A;
// def
__typeof__(foo$A) foo$A = 3;
// end

// Go code:
var A = []int{1, 2, 3}
// C code:
// decl
struct $3_$int__struct;
typedef struct $3_$int__struct $3_$int_;
// def
#ifndef $3_$int_$
#define $3_$int_$
struct $3_$int__struct {
	int_ arr[3];
};
#endif
// decl
$3_$int_ _cl0;
// def
__typeof__(_cl0) _cl0 = {{1, 2, 3}};
// decl
slice foo$A;
// def
__typeof__(foo$A) foo$A = {&_cl0, 3, 3};
// end

// Go code:
var A = []int{10: 1, 20: 2, 30: 3}
// C code:
// decl
struct $31_$int__struct;
typedef struct $31_$int__struct $31_$int_;
// def
#ifndef $31_$int_$
#define $31_$int_$
struct $31_$int__struct {
	int_ arr[31];
};
#endif
// decl
$31_$int_ _cl0;
// def
__typeof__(_cl0) _cl0 = {{[10] = 1, [20] = 2, [30] = 3}};
// decl
slice foo$A;
// def
__typeof__(foo$A) foo$A = {&_cl0, 31, 31};
// end

// Go code:
var A = []int{1, 2, 30: 3, 4}
// C code:
// decl
struct $32_$int__struct;
typedef struct $32_$int__struct $32_$int_;
// def
#ifndef $32_$int_$
#define $32_$int_$
struct $32_$int__struct {
	int_ arr[32];
};
#endif
// decl
$32_$int_ _cl0;
// def
__typeof__(_cl0) _cl0 = {{1, 2, [30] = 3, 4}};
// decl
slice foo$A;
// def
__typeof__(foo$A) foo$A = {&_cl0, 32, 32};
// end

// Go code:
type S struct{a, b int}
var p = &S{a: 1}
// C code:
// decl
const tinfo foo$S$$;
// def
const tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = CSLICE(2, ((const tinfo*[]){
			&int_$$,
			&int_$$
		}))
	}
};
// decl
const tinfo $8$foo$S$$;
// def
const tinfo $8$foo$S$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$S$$
		}))
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	int_ a;
	int_ b;
};
// decl
foo$S _cl0;
// def
__typeof__(_cl0) _cl0 = {.a = 1};
// decl
foo$S *foo$p;
// def
__typeof__(foo$p) foo$p = &_cl0;
// end

// Go code:
var F func(byte, int) (bool, int32)
// C code:
// decl
struct bool$$int32_struct;
typedef struct bool$$int32_struct bool$$int32;
// def
#ifndef bool$$int32$
#define bool$$int32$
struct bool$$int32_struct {
	bool _0;
	int32 _1;
};
#endif
// decl
bool$$int32 (*foo$F)(byte, int_);
// def
__typeof__(foo$F) foo$F = nil;
// end