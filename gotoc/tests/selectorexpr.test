// Go code:
type S struct {
	a, b int
}

var s S

func F() int {
	return s.a + s.b
}
// C code:
// decl
const tinfo foo$S$$;
// def
const tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = CSLICE(2, ((const tinfo*[]){
			&int$$,
			&int$$
		}))
	}
};
// decl
const tinfo $8$foo$S$$;
// def
const tinfo $8$foo$S$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$S$$
		}))
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	int a;
	int b;
};
// decl
foo$S foo$s;
// def
foo$S foo$s = {};
// decl
int foo$F();
// def
int foo$F() {
	return (foo$s.a+foo$s.b);
}
// end

// Go code:
var s struct{a, b int}

func F() int {
	return s.a + s.b
}
// C code:
// decl
struct {
	int a;
	int b;
} foo$s;
// def
struct {
	int a;
	int b;
} foo$s = {};
// decl
int foo$F();
// def
int foo$F() {
	return (foo$s.a+foo$s.b);
}
// end

// Go code:
type T int

func (t *T) Add(a T) {
	*t += a
}

func (t *T) F() func(T) {
	// This isn't correct Emgo code. t.Addr can't be
	// returned from F because it is implemented in C
	// as embeded function that refers to local variable t.
	return t.Add
}
// C code:
// decl
const tinfo foo$T$$;
// def
const tinfo foo$T$$ = {
	{
		.name = EGSTR("foo.T"),
		.kind = Int
	}
};
// decl
const minfo Add$$$foo$T$$$;
// def
const minfo Add$$$foo$T$$$;
// decl
const minfo F$$$$func$$$foo$T$$$;
// def
const minfo F$$$$func$$$foo$T$$$;
// decl
void foo$T$Add$0(ival* t$, foo$T a$);
// def
void foo$T$Add$0(ival* t$, foo$T a$) {
	return foo$T$Add(((foo$T*)t$->ptr), a$);
}
// decl
void (*foo$T$F$0(ival* t$))(foo$T);
// def
void (*foo$T$F$0(ival* t$))(foo$T) {
	return foo$T$F(((foo$T*)t$->ptr));
}
// decl
const tinfo $8$foo$T$$;
// def
const tinfo $8$foo$T$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$T$$
		})),
		.methods = CSLICE(2, ((const minfo*[]){
			&Add$$$foo$T$$$,
			&F$$$$func$$$foo$T$$$
		}))
	}, {
		foo$T$Add$0,
		foo$T$F$0
	}
};
// decl
typedef int foo$T;
// decl
void foo$T$Add(foo$T *t$, foo$T a$);
// def
void foo$T$Add(foo$T *t$, foo$T a$) {
	*t$ += a$;
}
// decl
void (*foo$T$F(foo$T *t$))(foo$T);
// def
void (*foo$T$F(foo$T *t$))(foo$T) {
	return &({void func(foo$T _1) { return foo$T$Add(t$, _1); } func;});
}
// end

// Go code:
type T int

func (t *T) Add(a T) {
	*t += a
}

func F() func(*T, T) {
	return (*T).Add
}
// C code:
// decl
const tinfo foo$T$$;
// def
const tinfo foo$T$$ = {
	{
		.name = EGSTR("foo.T"),
		.kind = Int
	}
};
// decl
const minfo Add$$$foo$T$$$;
// def
const minfo Add$$$foo$T$$$;
// decl
void foo$T$Add$0(ival* t$, foo$T a$);
// def
void foo$T$Add$0(ival* t$, foo$T a$) {
	return foo$T$Add(((foo$T*)t$->ptr), a$);
}
// decl
const tinfo $8$foo$T$$;
// def
const tinfo $8$foo$T$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$T$$
		})),
		.methods = CSLICE(1, ((const minfo*[]){
			&Add$$$foo$T$$$
		}))
	}, {
		foo$T$Add$0
	}
};
// decl
typedef int foo$T;
// decl
void foo$T$Add(foo$T *t$, foo$T a$);
// def
void foo$T$Add(foo$T *t$, foo$T a$) {
	*t$ += a$;
}
// decl
void (*foo$F())(foo$T*, foo$T);
// def
void (*foo$F())(foo$T*, foo$T) {
	return &foo$T$Add;
}
// end

// Go code:
type A struct {
	Fa int
}

type B struct {
	A
	Fb int
}

func (a *A) F(b *B) {
	b.F(b)
}
// C code:
// decl
const tinfo foo$A$$;
// def
const tinfo foo$A$$ = {
	{
		.name = EGSTR("foo.A"),
		.kind = Struct,
		.elems = CSLICE(1, ((const tinfo*[]){
			&int$$
		}))
	}
};
// decl
const minfo F$$$$8$foo$B$$$;
// def
const minfo F$$$$8$foo$B$$$;
// decl
void foo$A$F$0(ival* a$, foo$B *b$);
// def
void foo$A$F$0(ival* a$, foo$B *b$) {
	return foo$A$F(((foo$A*)a$->ptr), b$);
}
// decl
const tinfo $8$foo$A$$;
// def
const tinfo $8$foo$A$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$A$$
		})),
		.methods = CSLICE(1, ((const minfo*[]){
			&F$$$$8$foo$B$$$
		}))
	}, {
		foo$A$F$0
	}
};
// decl
struct foo$A_struct;
typedef struct foo$A_struct foo$A;
// def
struct foo$A_struct {
	int Fa;
};
// decl
const tinfo foo$B$$;
// def
const tinfo foo$B$$ = {
	{
		.name = EGSTR("foo.B"),
		.kind = Struct,
		.elems = CSLICE(2, ((const tinfo*[]){
			&foo$A$$,
			&int$$
		}))
	}
};
// decl
void foo$B$F$0(ival* a$, foo$B *b$);
// def
void foo$B$F$0(ival* a$, foo$B *b$) {
	return foo$A$F(&((foo$B*)a$->ptr)->A, b$);
}
// decl
const tinfo $8$foo$B$$;
// def
const tinfo $8$foo$B$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$B$$
		})),
		.methods = CSLICE(1, ((const minfo*[]){
			&F$$$$8$foo$B$$$
		}))
	}, {
		foo$B$F$0
	}
};
// decl
struct foo$B_struct;
typedef struct foo$B_struct foo$B;
// def
struct foo$B_struct {
	foo$A A;
	int Fb;
};
// decl
void foo$A$F(foo$A *a$, foo$B *b$);
// def
void foo$A$F(foo$A *a$, foo$B *b$) {
	foo$A$F(&b$->A, b$);
}
// end