// Go code:
type T byte

func (t T) F() {
	t.F()
}
// C code:
// decl
typedef byte foo$T;
// decl
void foo$T$F(foo$T t$);
// def
void foo$T$F(foo$T t$) {
	foo$T$F(t$);
}
// decl
void foo$T$F$0(ival* t$);
// def
void foo$T$F$0(ival* t$) {
	return foo$T$F(*(foo$T*)t$->ptr);
}
// decl
void foo$T$F$1(ival* t$);
// def
void foo$T$F$1(ival* t$) {
	return foo$T$F(*(foo$T*)t$);
}
// end

// Go code:
type T int

func (t T) F() {
	p := &t
	p.F()
}
// C code:
// decl
typedef int foo$T;
// decl
void foo$T$F(foo$T t$);
// def
void foo$T$F(foo$T t$) {
	foo$T *p$ = &t$;
	foo$T$F(*p$);
}
// decl
void foo$T$F$0(ival* t$);
// def
void foo$T$F$0(ival* t$) {
	return foo$T$F(*(foo$T*)t$->ptr);
}
// decl
void foo$T$F$1(ival* t$);
// def
void foo$T$F$1(ival* t$) {
	return foo$T$F(*(foo$T*)t$);
}
// end

// Go code:
type T int

func (t *T) F() {
	t.F()
}
// C code:
// decl
typedef int foo$T;
// decl
void foo$T$F(foo$T *t$);
// def
void foo$T$F(foo$T *t$) {
	foo$T$F(t$);
}
// decl
void foo$T$F$0(ival* t$);
// def
void foo$T$F$0(ival* t$) {
	return foo$T$F((foo$T*)t$->ptr);
}
// end

// Go code:
type T int

func (t *T) F() {
	v := *t
	v.F()
}
// C code:
// decl
typedef int foo$T;
// decl
void foo$T$F(foo$T *t$);
// def
void foo$T$F(foo$T *t$) {
	foo$T v$ = *t$;
	foo$T$F(&v$);
}
// decl
void foo$T$F$0(ival* t$);
// def
void foo$T$F$0(ival* t$) {
	return foo$T$F((foo$T*)t$->ptr);
}
// end