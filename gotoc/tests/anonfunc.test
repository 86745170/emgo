// Go code:
func F(a, b int) int {
	return func(x int) int {
		return x + b
	}(a)
}
// C code:
// decl
int_ foo$F(int_ a$, int_ b$);
// def
int_ foo$F(int_ a$, int_ b$) {
	return ({
		int_ func$(int_ x$) {
			return (x$+b$);
		}
		func$;
	})(a$);
}
// end

// Go code:
func F(a, b int) (int, int) {
	return func(x int) (int, int) {
		return x + b, x - b
	}(a)
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$F(int_ a$, int_ b$);
// def
int_$$int_ foo$F(int_ a$, int_ b$) {
	return ({
		int_$$int_ func$(int_ x$) {
			return (int_$$int_){(x$+b$), (x$-b$)};
		}
		func$;
	})(a$);
}
// end

// Go code:
func F(b bool) func(int) bool{
	var g func(int) bool
	if b {
		g = func(a int) bool {
			return a > 0
		}
	} else {
		g = func(a int) bool {
			return a < 0
		}
	}
	return g
}
// C code:
// decl
bool (*foo$F(bool b$))(int_);
// def
bool (*foo$F(bool b$))(int_) {
	bool (*g$)(int_) = nil;
	if (b$) {
		g$ = ({
			bool func$(int_ a$) {
				return (a$>0);
			}
			func$;
		});
	} else {
		g$ = ({
			bool func$(int_ a$) {
				return (a$<0);
			}
			func$;
		});
	}
	return g$;
}
// end