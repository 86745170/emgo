// Go code:
func Nil() []byte {
	var b []byte
	b = nil
	return b
}
// C code:
// decl
slice foo$Nil();
// def
slice foo$Nil() {
	slice b$ = {};
	b$ = NILSLICE;
	return b$;
}
// end

// Go code:
func Nil() *int {
	var i *int
	i = nil
	return i
}
// C code:
// decl
int *foo$Nil();
// def
int *foo$Nil() {
	int *i$ = nil;
	i$ = nil;
	return i$;
}
// end

// Go code:
func Nil() []int {
	return nil
}
// C code:
// decl
slice foo$Nil();
// def
slice foo$Nil() {
	return NILSLICE;
}
// end

// Go code:
func Nil(b []byte) bool {
	return b == nil
}
// C code:
// decl
bool foo$Nil(slice b$);
// def
bool foo$Nil(slice b$) {
	return b$.arr == nil;
}
// end

// Go code:
import "unsafe"

func Nil() unsafe.Pointer {
	return nil
}
// C code:
// decl
unsafe$Pointer foo$Nil();
// def
unsafe$Pointer foo$Nil() {
	return nil;
}
// end

// Go code:
func Nil(i interface{}) bool {
	return i == nil
}
// C code:
// decl
bool foo$Nil(interface i$);
// def
bool foo$Nil(interface i$) {
	return EQUALI(i$, NILI);
}
// end

// Go code:
func NotNil(e error) bool {
	return nil != e
}
// C code:
// decl
bool foo$NotNil(error e$);
// def
bool foo$NotNil(error e$) {
	return !EQUALI(NILI, e$.interface);
}
// end