// Go code:
func F(a [4]byte) (r byte) {
	for k := range a {
		r += byte(k)
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
		{
			int k$ = 0;
			for (; k$ < 4; ++k$) {
				r$ += ((byte)(k$));
			}
		}
		goto end;
	}
end:
	return r$;
}
// end

// Go code:
func F(a [4]byte) (r byte) {
	for k, _ := range a {
		r += byte(k)
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
		{
			int k$ = 0;
			for (; k$ < 4; ++k$) {
				r$ += ((byte)(k$));
			}
		}
		goto end;
	}
end:
	return r$;
}
// end

// Go code:
func F(a [4]byte) (r byte) {
	for k, v := range a {
		if r > 4 {
			continue
		}
		r += byte(k) + v
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
		{
			int k$ = 0;
			for (; k$ < 4; ++k$) {
				byte v$ = a$[k$];
				{
					if ((r$>4)) {
						continue;
					}
					r$ += (((byte)(k$))+v$);
				}
			}
		}
		goto end;
	}
end:
	return r$;
}
// end

// Go code:
func F(a [4]byte) (r byte) {
	for _, v := range a {
		if r > 4 {
			break
		}
		r += v
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
		{
			int _$ = 0;
			for (; _$ < 4; ++_$) {
				byte v$ = a$[_$];
				{
					if ((r$>4)) {
						break;
					}
					r$ += v$;
				}
			}
		}
		goto end;
	}
end:
	return r$;
}
// end

// Go code:
func F(a [4]byte) (r byte) {
	for k := range a[1:] {
		r += byte(k)
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
		{
			slice x = ASLICEL(a$, 1);
			int k$ = 0;
			for (; k$ < len(x); ++k$) {
				r$ += ((byte)(k$));
			}
		}
		goto end;
	}
end:
	return r$;
}
// end

// Go code:
func F(a [4]byte) (r byte) {
	for k, _ := range a[1:] {
		r += byte(k)
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
		{
			slice x = ASLICEL(a$, 1);
			int k$ = 0;
			for (; k$ < len(x); ++k$) {
				r$ += ((byte)(k$));
			}
		}
		goto end;
	}
end:
	return r$;
}
// end

// Go code:
func F(a [4]byte) (r byte) {
loop:
	for k, v := range a[1:] {
		if r > 4 {
			continue loop
		}
		r += byte(k) + v
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
	loop$:;
		{
			slice x = ASLICEL(a$, 1);
			int k$ = 0;
		loop$_continue:;
			for (; k$ < len(x); ++k$) {
				byte v$ = ((byte*)x.arr)[k$];
				{
					if ((r$>4)) {
						goto loop$_continue;
					}
					r$ += (((byte)(k$))+v$);
				}
			}
		}
	loop$_break:;
		goto end;
	}
end:
	return r$;
}
// end

// Go code:
func F(a [4]byte) (r byte) {
loop:
	for _, v := range a[1:] {
		if r > 4 {
			break loop
		}
		r += v
	}
	return
}
// C code:
// decl
byte foo$F(byte a$[4]);
// def
byte foo$F(byte a$[4]) {
	byte r$ = {0};
	{
	loop$:;
		{
			slice x = ASLICEL(a$, 1);
			int _$ = 0;
		loop$_continue:;
			for (; _$ < len(x); ++_$) {
				byte v$ = ((byte*)x.arr)[_$];
				{
					if ((r$>4)) {
						goto loop$_break;
					}
					r$ += v$;
				}
			}
		}
	loop$_break:;
		goto end;
	}
end:
	return r$;
}
// end