// Go code:
type S struct {a, b int}
// C code:
// decl
const tinfo foo$S$$;
// def
const tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = (const field[]){
			{{(byte*)4, 4}, nil},
			{{(byte*)4, 4}, nil}
		},
		.elemN = 2
	}
};
// decl
const tinfo $8$foo$S$$;
// def
const tinfo $8$foo$S$$ = {
	{
		.kind = Ptr,
		.elems = &foo$S$$
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	int_ a;
	int_ b;
};
// end

// Go code:
type S struct {
	a byte
	_ byte
	b byte
	_ byte
}
// C code:
// decl
const tinfo foo$S$$;
// def
const tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = (const field[]){
			{{(byte*)1, 1}, nil},
			{{(byte*)1, 1}, nil},
			{{(byte*)1, 1}, nil},
			{{(byte*)1, 1}, nil}
		},
		.elemN = 4
	}
};
// decl
const tinfo $8$foo$S$$;
// def
const tinfo $8$foo$S$$ = {
	{
		.kind = Ptr,
		.elems = &foo$S$$
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	byte a;
	byte _1$;
	byte b;
	byte _3$;
};
// end

// Go code:
type S struct {
	F func(c, e int) (uint, int, byte)
}
// C code:
// decl
struct uint$$int_$$byte_struct;
typedef struct uint$$int_$$byte_struct uint$$int_$$byte;
// def
#ifndef uint$$int_$$byte$
#define uint$$int_$$byte$
struct uint$$int_$$byte_struct {
	uint _0;
	int_ _1;
	byte _2;
};
#endif
// decl
const tinfo func$$$int_$$int_$$$uint$$int_$$uint8$$;
// def
const tinfo func$$$int_$$int_$$$uint$$int_$$uint8$$ = {
	{
		.kind = Func
	}
};
// decl
const tinfo foo$S$$;
// def
const tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = (const field[]){
			{EGSTR("F"), &func$$$int_$$int_$$$uint$$int_$$uint8$$}
		},
		.elemN = 1
	}
};
// decl
const tinfo $8$foo$S$$;
// def
const tinfo $8$foo$S$$ = {
	{
		.kind = Ptr,
		.elems = &foo$S$$
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	uint$$int_$$byte (*F)(int_, int_);
};
// end

// Go code:
type S struct {
	a int
	b byte
	c [3]byte
}

func f() bool {
	var s1, s2 S
	eq := s1 == s2
	neq := s1 != s2
	return eq && neq
}
// C code:
// decl
struct $3_$byte_struct;
typedef struct $3_$byte_struct $3_$byte;
// def
#ifndef $3_$byte$
#define $3_$byte$
struct $3_$byte_struct {
	byte arr[3];
};
#endif
// decl
const tinfo $3_$byte$$;
// def
const tinfo $3_$byte$$ = {
	{
		.kind = Array - 3,
		.elems = &uint8$$
	}
};
// decl
const tinfo foo$S$$;
// def
const tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = (const field[]){
			{{(byte*)4, 4}, nil},
			{{(byte*)1, 1}, nil},
			{{(byte*)1, 1}, nil}
		},
		.elemN = 3
	}
};
// decl
const tinfo $8$foo$S$$;
// def
const tinfo $8$foo$S$$ = {
	{
		.kind = Ptr,
		.elems = &foo$S$$
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	int_ a;
	byte b;
	$3_$byte c;
};
// decl
bool foo$f();
// def
bool foo$f() {
	foo$S s1$ = {};
	foo$S s2$ = {};
	bool eq$ = ({
		foo$S _l0 = s1$; foo$S _r0 = s2$;
		(_l0.a == _r0.a) &&
		(_l0.b == _r0.b) &&
		EQUALA(_l0.c, _r0.c);
	});
	bool neq$ = ({
		foo$S _l1 = s1$; foo$S _r1 = s2$;
		(_l1.a != _r1.a) ||
		(_l1.b != _r1.b) ||
		!EQUALA(_l1.c, _r1.c);
	});
	return (eq$&&neq$);
}
// end
