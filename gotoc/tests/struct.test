// Go code:
type S struct {a, b int}
// C code:
// decl
const
tinfo foo$S$$;
// def
const
tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.size = 8,
		.kind = Struct,
		.elems = CSLICE(2, ((const tinfo*[]){
			&int$$,
			&int$$
		}))
	}
};
// decl
const
tinfo $8$foo$S$$;
// def
const
tinfo $8$foo$S$$ = {
	{
		.size = 4,
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$S$$
		}))
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	int a;
	int b;
};
// end

// Go code:
type S struct {
	a byte
	_ byte
	b byte
	_ byte
}
// C code:
// decl
const
tinfo foo$S$$;
// def
const
tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.size = 4,
		.kind = Struct,
		.elems = CSLICE(4, ((const tinfo*[]){
			&uint8$$,
			&uint8$$,
			&uint8$$,
			&uint8$$
		}))
	}
};
// decl
const
tinfo $8$foo$S$$;
// def
const
tinfo $8$foo$S$$ = {
	{
		.size = 4,
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$S$$
		}))
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	byte a;
	byte _1$;
	byte b;
	byte _3$;
};
// end

// Go code:
type S struct {
	F func(c, e int) (uint, int, byte)
}
// C code:
// decl
struct uint$$int$$byte_struct;
typedef struct uint$$int$$byte_struct uint$$int$$byte;
// def
#ifndef uint$$int$$byte$
#define uint$$int$$byte$
struct uint$$int$$byte_struct {
	uint _0;
	int _1;
	byte _2;
};
#endif
// decl
const
tinfo func$$$int$$int$$$uint$$int$$uint8$$;
// def
const
tinfo func$$$int$$int$$$uint$$int$$uint8$$ = {
	{
		.size = 4,
		.kind = Func
	}
};
// decl
const
tinfo foo$S$$;
// def
const
tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.size = 4,
		.kind = Struct,
		.elems = CSLICE(1, ((const tinfo*[]){
			&func$$$int$$int$$$uint$$int$$uint8$$
		}))
	}
};
// decl
const
tinfo $8$foo$S$$;
// def
const
tinfo $8$foo$S$$ = {
	{
		.size = 4,
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$S$$
		}))
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_struct {
	uint$$int$$byte (*F)(int, int);
};
// end