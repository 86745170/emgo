// Go code:
func ArrayToSlice(a [3]int) []int {
	return a[:]
}
// C code:
// decl
struct $3_$int__struct;
typedef struct $3_$int__struct $3_$int_;
// def
#ifndef $3_$int_$
#define $3_$int_$
struct $3_$int__struct {
	int_ arr[3];
};
#endif
// decl
slice foo$ArrayToSlice($3_$int_ a$);
// def
slice foo$ArrayToSlice($3_$int_ a$) {
	return ASLICE(&a$);
}
// end

// Go code:
func ArrayToSlice(a [3]int) []int {
	b := a[0:3]
	b = a[:3]
	b = a[0:]
	b = a[0:1:2]
	b = a[:1:2]
	return b
}
// C code:
// decl
struct $3_$int__struct;
typedef struct $3_$int__struct $3_$int_;
// def
#ifndef $3_$int_$
#define $3_$int_$
struct $3_$int__struct {
	int_ arr[3];
};
#endif
// decl
slice foo$ArrayToSlice($3_$int_ a$);
// def
slice foo$ArrayToSlice($3_$int_ a$) {
	slice b$ = ASLICELH(&a$, 0L, 3L);
	b$ = ASLICEH(&a$, 3L);
	b$ = ASLICEL(&a$, 0L);
	b$ = ASLICELHM(&a$, 0L, 1L, 2L);
	b$ = ASLICEHM(&a$, 1L, 2L);
	return b$;
}
// end

// Go code:
func ArrayPtrToSlice(a *[3]int) []int {
	return a[:]
}
// C code:
// decl
struct $3_$int__struct;
typedef struct $3_$int__struct $3_$int_;
// def
#ifndef $3_$int_$
#define $3_$int_$
struct $3_$int__struct {
	int_ arr[3];
};
#endif
// decl
slice foo$ArrayPtrToSlice($3_$int_ *a$);
// def
slice foo$ArrayPtrToSlice($3_$int_ *a$) {
	return ASLICE(a$);
}
// end

// Go code:
func SliceToSlice(a []int) []int {
	b := a[0:3]
	b = a[:3]
	b = a[0:]
	b = a[0:1:2]
	b = a[:1:2]
	return b
}
// C code:
// decl
slice foo$SliceToSlice(slice a$);
// def
slice foo$SliceToSlice(slice a$) {
	slice b$ = SLICELH(a$, int_*, 0L, 3L);
	b$ = SLICEH(a$, 3L);
	b$ = SLICEL(a$, int_*, 0L);
	b$ = SLICELHM(a$, int_*, 0L, 1L, 2L);
	b$ = SLICEHM(a$, 1L, 2L);
	return b$;
}
// end