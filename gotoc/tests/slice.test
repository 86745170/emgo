// Go code:
func ArrayToSlice(a [3]int) []int {
	return a[:]
}
// C code:
// decl
struct $3_$int_struct;
typedef struct $3_$int_struct $3_$int;
// def
#ifndef $3_$int$
#define $3_$int$
struct $3_$int_struct {
	int arr[3];
};
#endif
// decl
slice foo$ArrayToSlice($3_$int a$);
// def
slice foo$ArrayToSlice($3_$int a$) {
	return ASLICE(3, a$);
}
// end

// Go code:
func ArrayToSlice(a [3]int) []int {
	b := a[0:3]
	b = a[:3]
	b = a[0:]
	b = a[0:1:2]
	b = a[:1:2]
	return b
}
// C code:
// decl
struct $3_$int_struct;
typedef struct $3_$int_struct $3_$int;
// def
#ifndef $3_$int$
#define $3_$int$
struct $3_$int_struct {
	int arr[3];
};
#endif
// decl
slice foo$ArrayToSlice($3_$int a$);
// def
slice foo$ArrayToSlice($3_$int a$) {
	slice b$ = ASLICELH(3, a$, 0, 3);
	b$ = ASLICEH(3, a$, 3);
	b$ = ASLICEL(3, a$, 0);
	b$ = ASLICELHM(a$, 0, 1, 2);
	b$ = ASLICEHM(a$, 1, 2);
	return b$;
}
// end

// Go code:
func ArrayPtrToSlice(a *[3]int) []int {
	return a[:]
}
// C code:
// decl
struct $3_$int_struct;
typedef struct $3_$int_struct $3_$int;
// def
#ifndef $3_$int$
#define $3_$int$
struct $3_$int_struct {
	int arr[3];
};
#endif
// decl
slice foo$ArrayPtrToSlice($3_$int *a$);
// def
slice foo$ArrayPtrToSlice($3_$int *a$) {
	return ASLICE(3, (*a$));
}
// end

// Go code:
func SliceToSlice(a []int) []int {
	b := a[0:3]
	b = a[:3]
	b = a[0:]
	b = a[0:1:2]
	b = a[:1:2]
	return b
}
// C code:
// decl
slice foo$SliceToSlice(slice a$);
// def
slice foo$SliceToSlice(slice a$) {
	slice b$ = SLICELH(a$, int*, 0, 3);
	b$ = SLICEH(a$, 3);
	b$ = SLICEL(a$, int*, 0);
	b$ = SLICELHM(a$, int*, 0, 1, 2);
	b$ = SLICEHM(a$, 1, 2);
	return b$;
}
// end