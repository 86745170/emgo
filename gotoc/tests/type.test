// Go code:
type F func(a, b int) (x, y int)
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
const tinfo foo$F$$;
// def
const tinfo foo$F$$ = {
	{
		.name = EGSTR("foo.F"),
		.kind = Func
	}
};
// decl
const tinfo $8$foo$F$$;
// def
const tinfo $8$foo$F$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$F$$
		}))
	}
};
// decl
typedef int_$$int_ (*foo$F)(int_, int_);
// end

// Go code:
type A [4]int
// C code:
// decl
struct $4_$int__struct;
typedef struct $4_$int__struct $4_$int_;
// def
#ifndef $4_$int_$
#define $4_$int_$
struct $4_$int__struct {
	int_ arr[4];
};
#endif
// decl
const tinfo foo$A$$;
// def
const tinfo foo$A$$ = {
	{
		.name = EGSTR("foo.A"),
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&int_$$
		}))
	}
};
// decl
const tinfo $8$foo$A$$;
// def
const tinfo $8$foo$A$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$A$$
		}))
	}
};
// decl
typedef $4_$int_ foo$A;
// end

// Go code:
type AP [4]*int
// C code:
// decl
struct $4_$$8$int__struct;
typedef struct $4_$$8$int__struct $4_$$8$int_;
// def
#ifndef $4_$$8$int_$
#define $4_$$8$int_$
struct $4_$$8$int__struct {
	int_ *arr[4];
};
#endif
// decl
const tinfo foo$AP$$;
// def
const tinfo foo$AP$$ = {
	{
		.name = EGSTR("foo.AP"),
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$8$int_$$
		}))
	}
};
// decl
const tinfo $8$foo$AP$$;
// def
const tinfo $8$foo$AP$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$AP$$
		}))
	}
};
// decl
typedef $4_$$8$int_ foo$AP;
// end

// Go code:
type PA *[4]int
// C code:
// decl
struct $4_$int__struct;
typedef struct $4_$int__struct $4_$int_;
// def
#ifndef $4_$int_$
#define $4_$int_$
struct $4_$int__struct {
	int_ arr[4];
};
#endif
// decl
const tinfo $4_$int_$$;
// def
const tinfo $4_$int_$$ = {
	{
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&int_$$
		}))
	}
};
// decl
const tinfo foo$PA$$;
// def
const tinfo foo$PA$$ = {
	{
		.name = EGSTR("foo.PA"),
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$4_$int_$$
		}))
	}
};
// decl
typedef $4_$int_ *foo$PA;
// end

// Go code:
type PAP *[4]*int
// C code:
// decl
struct $4_$$8$int__struct;
typedef struct $4_$$8$int__struct $4_$$8$int_;
// def
#ifndef $4_$$8$int_$
#define $4_$$8$int_$
struct $4_$$8$int__struct {
	int_ *arr[4];
};
#endif
// decl
const tinfo $4_$$8$int_$$;
// def
const tinfo $4_$$8$int_$$ = {
	{
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$8$int_$$
		}))
	}
};
// decl
const tinfo foo$PAP$$;
// def
const tinfo foo$PAP$$ = {
	{
		.name = EGSTR("foo.PAP"),
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$4_$$8$int_$$
		}))
	}
};
// decl
typedef $4_$$8$int_ *foo$PAP;
// end

// Go code:
type AA [4][3]int
// C code:
// decl
struct $3_$int__struct;
typedef struct $3_$int__struct $3_$int_;
// def
#ifndef $3_$int_$
#define $3_$int_$
struct $3_$int__struct {
	int_ arr[3];
};
#endif
// decl
struct $4_$$3_$int__struct;
typedef struct $4_$$3_$int__struct $4_$$3_$int_;
// def
#ifndef $4_$$3_$int_$
#define $4_$$3_$int_$
struct $4_$$3_$int__struct {
	$3_$int_ arr[4];
};
#endif
// decl
const tinfo $3_$int_$$;
// def
const tinfo $3_$int_$$ = {
	{
		.kind = Array - 3,
		.elems = CSLICE(1, ((const tinfo*[]){
			&int_$$
		}))
	}
};
// decl
const tinfo foo$AA$$;
// def
const tinfo foo$AA$$ = {
	{
		.name = EGSTR("foo.AA"),
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$3_$int_$$
		}))
	}
};
// decl
const tinfo $8$foo$AA$$;
// def
const tinfo $8$foo$AA$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$AA$$
		}))
	}
};
// decl
typedef $4_$$3_$int_ foo$AA;
// end

// Go code:
type PAA *[4][3]int
// C code:
// decl
struct $3_$int__struct;
typedef struct $3_$int__struct $3_$int_;
// def
#ifndef $3_$int_$
#define $3_$int_$
struct $3_$int__struct {
	int_ arr[3];
};
#endif
// decl
struct $4_$$3_$int__struct;
typedef struct $4_$$3_$int__struct $4_$$3_$int_;
// def
#ifndef $4_$$3_$int_$
#define $4_$$3_$int_$
struct $4_$$3_$int__struct {
	$3_$int_ arr[4];
};
#endif
// decl
const tinfo $3_$int_$$;
// def
const tinfo $3_$int_$$ = {
	{
		.kind = Array - 3,
		.elems = CSLICE(1, ((const tinfo*[]){
			&int_$$
		}))
	}
};
// decl
const tinfo $4_$$3_$int_$$;
// def
const tinfo $4_$$3_$int_$$ = {
	{
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$3_$int_$$
		}))
	}
};
// decl
const tinfo foo$PAA$$;
// def
const tinfo foo$PAA$$ = {
	{
		.name = EGSTR("foo.PAA"),
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$4_$$3_$int_$$
		}))
	}
};
// decl
typedef $4_$$3_$int_ *foo$PAA;
// end

// Go code:
type PAPA *[4]*[3]int
// C code:
// decl
struct $3_$int__struct;
typedef struct $3_$int__struct $3_$int_;
// def
#ifndef $3_$int_$
#define $3_$int_$
struct $3_$int__struct {
	int_ arr[3];
};
#endif
// decl
struct $4_$$8$$3_$int__struct;
typedef struct $4_$$8$$3_$int__struct $4_$$8$$3_$int_;
// def
#ifndef $4_$$8$$3_$int_$
#define $4_$$8$$3_$int_$
struct $4_$$8$$3_$int__struct {
	$3_$int_ *arr[4];
};
#endif
// decl
const tinfo $3_$int_$$;
// def
const tinfo $3_$int_$$ = {
	{
		.kind = Array - 3,
		.elems = CSLICE(1, ((const tinfo*[]){
			&int_$$
		}))
	}
};
// decl
const tinfo $8$$3_$int_$$;
// def
const tinfo $8$$3_$int_$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$3_$int_$$
		}))
	}
};
// decl
const tinfo $4_$$8$$3_$int_$$;
// def
const tinfo $4_$$8$$3_$int_$$ = {
	{
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$8$$3_$int_$$
		}))
	}
};
// decl
const tinfo foo$PAPA$$;
// def
const tinfo foo$PAPA$$ = {
	{
		.name = EGSTR("foo.PAPA"),
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&$4_$$8$$3_$int_$$
		}))
	}
};
// decl
typedef $4_$$8$$3_$int_ *foo$PAPA;
// end

// Go code:
type F [4]func(int, uint)
// C code:
// decl
struct $4_$$9$$8$void$0$$9$int_$1$uint$0$_struct;
typedef struct $4_$$9$$8$void$0$$9$int_$1$uint$0$_struct $4_$$9$$8$void$0$$9$int_$1$uint$0$;
// def
#ifndef $4_$$9$$8$void$0$$9$int_$1$uint$0$$
#define $4_$$9$$8$void$0$$9$int_$1$uint$0$$
struct $4_$$9$$8$void$0$$9$int_$1$uint$0$_struct {
	void (*arr[4])(int_, uint);
};
#endif
// decl
const tinfo func$$$int_$$uint$$$;
// def
const tinfo func$$$int_$$uint$$$ = {
	{
		.kind = Func
	}
};
// decl
const tinfo foo$F$$;
// def
const tinfo foo$F$$ = {
	{
		.name = EGSTR("foo.F"),
		.kind = Array - 4,
		.elems = CSLICE(1, ((const tinfo*[]){
			&func$$$int_$$uint$$$
		}))
	}
};
// decl
const tinfo $8$foo$F$$;
// def
const tinfo $8$foo$F$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$F$$
		}))
	}
};
// decl
typedef $4_$$9$$8$void$0$$9$int_$1$uint$0$ foo$F;
// end
