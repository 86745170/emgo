// Go code:
func F(a, b int) (x, y byte) {
	x, y = byte(a) + y, byte(b) + x
	return
}
// C code:
// decl
struct byte$$byte_struct;
typedef struct byte$$byte_struct byte$$byte;
// def
#ifndef byte$$byte$
#define byte$$byte$
struct byte$$byte_struct {
	byte _0;
	byte _1;
};
#endif
// decl
byte$$byte foo$F(int_ a$, int_ b$);
// def
byte$$byte foo$F(int_ a$, int_ b$) {
	byte x$ = 0;
	byte y$ = 0;
	{
		byte _tmp0 = (((byte)(a$))+y$);
		byte _tmp1 = (((byte)(b$))+x$);
		x$ = _tmp0;
		y$ = _tmp1;
		goto end;
	}
end:
	return (byte$$byte){x$, y$};
}
// end

// Go code:
func F(a, b int) (x, y int) {
	x, y = F(a, b)
	return
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$F(int_ a$, int_ b$);
// def
int_$$int_ foo$F(int_ a$, int_ b$) {
	int_ x$ = 0;
	int_ y$ = 0;
	{
		int_$$int_ _tmp0 = foo$F(a$, b$);
		x$ = _tmp0._0;
		y$ = _tmp0._1;
		goto end;
	}
end:
	return (int_$$int_){x$, y$};
}
// end

// Go code:
func F(a [2]int) (int, int) {
	return a[0], a[1]
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
struct $2_$int__struct;
typedef struct $2_$int__struct $2_$int_;
// def
#ifndef $2_$int_$
#define $2_$int_$
struct $2_$int__struct {
	int_ arr[2];
};
#endif
// decl
int_$$int_ foo$F($2_$int_ a$);
// def
int_$$int_ foo$F($2_$int_ a$) {
	return (int_$$int_){AIDX(&a$, 0L), AIDX(&a$, 1L)};
}
// end

// Go code:
func F(a, b int) (x, y int) {
	c, _ := F(a, b)
	return c, a + b
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$F(int_ a$, int_ b$);
// def
int_$$int_ foo$F(int_ a$, int_ b$) {
	int_ x$ = 0;
	int_ y$ = 0;
	{
		int_$$int_ _tmp0 = foo$F(a$, b$);
		int_ c$ = _tmp0._0;
		return (int_$$int_){c$, (a$+b$)};
	}
}
// end

// Go code:
func F(a int) (x, _ int) {
	x = a
	return
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$F(int_ a$);
// def
int_$$int_ foo$F(int_ a$) {
	int_ x$ = 0;
	{
		x$ = a$;
		goto end;
	}
end:
	return (int_$$int_){._0=x$};
}
// end

// Go code:
func F(n int, a ...int) {
	F(10)
	F(20, 1)
	F(30, 1, 2)
	F(40, a...)
}
// C code:
// decl
void foo$F(int_ n$, slice a$);
// def
void foo$F(int_ n$, slice a$) {
	foo$F(10L, NILSLICE);
	({
		int_ _0 = 20L;
		int_ _a[] = {1L};
		foo$F(_0, CSLICE(1, _a));
	});
	({
		int_ _0 = 30L;
		int_ _a[] = {1L, 2L};
		foo$F(_0, CSLICE(2, _a));
	});
	foo$F(40L, a$);
}
// end

// Go code:
func F(a interface{}, b int) (int, int) {
	return F(F(a, b))
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$F(interface a$, int_ b$);
// def
int_$$int_ foo$F(interface a$, int_ b$) {
	return ({
		int_$$int_ _tup = foo$F(a$, b$);
		foo$F(INTERFACE(_tup._0, &int_$$), _tup._1);
	});
}
// end

// Go code:
type S struct{}

func (s S) M(a, b interface{}) (int, int) {
	return s.M(s.M(a, b))
}
// C code:
// decl
const minfo M$$$interface$$interface$$$int_$$int_$$;
// def
const minfo M$$$interface$$interface$$$int_$$int_$$;
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$S$M$1(ival* s$, interface a$, interface b$);
// def
int_$$int_ foo$S$M$1(ival* s$, interface a$, interface b$) {
	return foo$S$M((*(foo$S*)s$), a$, b$);
}
// decl
const tinfo foo$S$$;
// def
const tinfo foo$S$$ = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.methods = CSLICE(1, ((const minfo*[]){
			&M$$$interface$$interface$$$int_$$int_$$
		}))
	}, {
		foo$S$M$1
	}
};
// decl
int_$$int_ foo$S$M$0(ival* s$, interface a$, interface b$);
// def
int_$$int_ foo$S$M$0(ival* s$, interface a$, interface b$) {
	return foo$S$M(*((foo$S*)s$->ptr), a$, b$);
}
// decl
const tinfo $8$foo$S$$;
// def
const tinfo $8$foo$S$$ = {
	{
		.kind = Ptr,
		.elems = {&foo$S$$},
		.methods = CSLICE(1, ((const minfo*[]){
			&M$$$interface$$interface$$$int_$$int_$$
		}))
	}, {
		foo$S$M$0
	}
};
// decl
struct foo$S_struct;
typedef struct foo$S_struct foo$S;
// def
struct foo$S_structE;
// decl
int_$$int_ foo$S$M(foo$S s$, interface a$, interface b$);
// def
int_$$int_ foo$S$M(foo$S s$, interface a$, interface b$) {
	return ({
		int_$$int_ _tup = foo$S$M(s$, a$, b$);
		foo$S$M(s$, INTERFACE(_tup._0, &int_$$), INTERFACE(_tup._1, &int_$$));
	});
}
// end