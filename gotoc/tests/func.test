// Go code:
func F(a, b int) (x, y byte) {
	x, y = byte(a) + y, byte(b) + x
	return
}
// C code:
// decl
struct byte$byte_struct;
typedef struct byte$byte_struct byte$byte;
// def
#ifndef $byte$byte
#define $byte$byte
struct byte$byte_struct {
	byte _0;
	byte _1;
};
#endif
// decl
byte$byte foo_F(int a, int b);
// def
byte$byte foo_F(int a, int b) {
	byte x = {0};
	byte y = {0};
	{
		byte __tmp0 = (((byte)(a))+y);
		byte __tmp1 = (((byte)(b))+x);
		x = __tmp0;
		y = __tmp1;
		goto __end;
	}
__end:
	return (byte$byte){x, y};
}
// end

// Go code:
func F(a, b int) (x, y int) {
	x, y = F(a, b)
	return
}
// C code:
// decl
struct int$int_struct;
typedef struct int$int_struct int$int;
// def
#ifndef $int$int
#define $int$int
struct int$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$int foo_F(int a, int b);
// def
int$int foo_F(int a, int b) {
	int x = {0};
	int y = {0};
	{
		int$int __tmp0 = foo_F(a, b);
		x = __tmp0._0;
		y = __tmp0._1;
		goto __end;
	}
__end:
	return (int$int){x, y};
}
// end

// Go code:
func F(a [2]int) (int, int) {
	return a[0], a[1]
}
// C code:
// decl
struct int$int_struct;
typedef struct int$int_struct int$int;
// def
#ifndef $int$int
#define $int$int
struct int$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$int foo_F(int a[2]);
// def
int$int foo_F(int a[2]) {
	return (int$int){a[0], a[1]};
}
// end

// Go code:
func F(a, b int) (x, y int) {
	c, _ := F(a, b)
	return c, a + b
}
// C code:
// decl
struct int$int_struct;
typedef struct int$int_struct int$int;
// def
#ifndef $int$int
#define $int$int
struct int$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$int foo_F(int a, int b);
// def
int$int foo_F(int a, int b) {
	int x = {0};
	int y = {0};
	{
		int$int __tmp0 = foo_F(a, b);
		int c = __tmp0._0;
		return (int$int){c, (a+b)};
	}
}
// end

// Go code:
func F(a int) (x, _ int) {
	x = a
	return
}
// C code:
// decl
struct int$int_struct;
typedef struct int$int_struct int$int;
// def
#ifndef $int$int
#define $int$int
struct int$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$int foo_F(int a);
// def
int$int foo_F(int a) {
	int x = {0};
	{
		x = a;
		goto __end;
	}
__end:
	return (int$int){._0=x};
}
// end