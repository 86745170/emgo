// Go code:
func F(a, b int) (x, y byte) {
	x, y = byte(a) + y, byte(b) + x
	return
}
// C code:
// decl
struct byte$$byte_struct;
typedef struct byte$$byte_struct byte$$byte;
// def
#ifndef byte$$byte$
#define byte$$byte$
struct byte$$byte_struct {
	byte _0;
	byte _1;
};
#endif
// decl
byte$$byte foo$F(int a$, int b$);
// def
byte$$byte foo$F(int a$, int b$) {
	byte x$ = 0;
	byte y$ = 0;
	{
		byte tmp0 = (((byte)(a$))+y$);
		byte tmp1 = (((byte)(b$))+x$);
		x$ = tmp0;
		y$ = tmp1;
		goto end;
	}
end:
	return (byte$$byte){x$, y$};
}
// end

// Go code:
func F(a, b int) (x, y int) {
	x, y = F(a, b)
	return
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$$int foo$F(int a$, int b$);
// def
int$$int foo$F(int a$, int b$) {
	int x$ = 0;
	int y$ = 0;
	{
		int$$int tmp0 = foo$F(a$, b$);
		x$ = tmp0._0;
		y$ = tmp0._1;
		goto end;
	}
end:
	return (int$$int){x$, y$};
}
// end

// Go code:
func F(a [2]int) (int, int) {
	return a[0], a[1]
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
struct $2_$int_struct;
typedef struct $2_$int_struct $2_$int;
// def
#ifndef $2_$int$
#define $2_$int$
struct $2_$int_struct {
	int arr[2];
};
#endif
// decl
int$$int foo$F($2_$int a$);
// def
int$$int foo$F($2_$int a$) {
	return (int$$int){a$.arr[0], a$.arr[1]};
}
// end

// Go code:
func F(a, b int) (x, y int) {
	c, _ := F(a, b)
	return c, a + b
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$$int foo$F(int a$, int b$);
// def
int$$int foo$F(int a$, int b$) {
	int x$ = 0;
	int y$ = 0;
	{
		int$$int tmp0 = foo$F(a$, b$);
		int c$ = tmp0._0;
		return (int$$int){c$, (a$+b$)};
	}
}
// end

// Go code:
func F(a int) (x, _ int) {
	x = a
	return
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$$int foo$F(int a$);
// def
int$$int foo$F(int a$) {
	int x$ = 0;
	{
		x$ = a$;
		goto end;
	}
end:
	return (int$$int){._0=x$};
}
// end

// Go code:
func F(n int, a ...int) {
	F(10)
	F(20, 1)
	F(30, 1, 2)
	F(40, a...)
}
// C code:
// decl
void foo$F(int n$, slice a$);
// def
void foo$F(int n$, slice a$) {
	foo$F(10, NILSLICE);
	({
		int _0 = 20;
		int _a[] = {1};
		foo$F(_0, CSLICE(1, _a));
	});
	({
		int _0 = 30;
		int _a[] = {1, 2};
		foo$F(_0, CSLICE(2, _a));
	});
	foo$F(40, a$);
}
// end