// Go code:
func CompositeLitSlice() int {
	var a = [][2]int{{1, 2}, {3, 4}, {4, 5}}
	b := []*[2]int{&a[0], &a[1], &a[2]}
	return len(b)
}
// C code:
// decl
struct $2_$int_struct;
typedef struct $2_$int_struct $2_$int;
// def
#ifndef $2_$int$
#define $2_$int$
struct $2_$int_struct {
	int arr[2];
};
#endif
// decl
int foo$CompositeLitSlice();
// def
int foo$CompositeLitSlice() {
	slice a$ = ((slice){($2_$int[]){(($2_$int){{1, 2}}), (($2_$int){{3, 4}}), (($2_$int){{4, 5}})}, 3, 3});
	slice b$ = ((slice){($2_$int*[]){&(($2_$int*)a$.arr)[0], &(($2_$int*)a$.arr)[1], &(($2_$int*)a$.arr)[2]}, 3, 3});
	return len(b$);
}
// end

// Go code:
func CompositeLitStruct() int {
	type S struct {
		a, b int
	}
	s := S{1, 2}
	s = S{a: 2, b: 3}
	return s.a + s.b
}
// C code:
// decl
int foo$CompositeLitStruct();
// def
int foo$CompositeLitStruct() {
	struct S$_struct;
	typedef struct S$_struct S$;
	struct S$_struct {
		int a;
		int b;
	};
	S$ s$ = ((S$){1, 2});
	s$ = ((S$){.a = 2, .b = 3});
	return (s$.a+s$.b);
}
// end

// Go code:
func F() (int, int) {
	var a int
	a, _ = F()
	return a, a
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$$int foo$F();
// def
int$$int foo$F() {
	int a$ = 0;
	int$$int tmp0 = foo$F();
	a$ = tmp0._0;
	return (int$$int){a$, a$};
}
// end

// Go code:
func F() int {
	a, _ := 1, F()+F()
	_, a = 3*F(), 2*1
	return a
}
// C code:
// decl
int foo$F();
// def
int foo$F() {
	int a$ = 1;
	(void)((foo$F()+foo$F()));
	(void)((3*foo$F()));
	int tmp0 = 2;
	(void)((3*foo$F()));
	a$ = tmp0;
	return a$;
}
// end