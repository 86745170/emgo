// Go code:
func CompositeLitSlice() int {
	var a = [][2]int{{1, 2}, {3, 4}, {4, 5}}
	b := []*[2]int{&a[0], &a[1], &a[2]}
	return len(b)
}
// C code:
// decl
int foo_CompositeLitSlice();
// def
int foo_CompositeLitSlice() {
	__slice a = (__slice){(int[][2]){{1, 2}, {3, 4}, {4, 5}}, 3, 3};
	__slice b = (__slice){(int(*[])[2]){&((int(*)[2])a.arr)[0], &((int(*)[2])a.arr)[1], &((int(*)[2])a.arr)[2]}, 3, 3};
	return len(b);
}
// end

// Go code:
func CompositeLitStruct() int {
	type S struct {
		a, b int
	}
	s := S{1, 2}
	s = S{a: 2, b: 3}
	return s.a + s.b
}
// C code:
// decl
int foo_CompositeLitStruct();
// def
int foo_CompositeLitStruct() {
	struct S_struct;
	typedef struct S_struct S;
	struct S_struct {
		int a;
		int b;
	};
	S s = (S){1, 2};
	s = (S){.a = 2, .b = 3};
	return (s.a+s.b);
}
// end

// Go code:
func F() (int, int) {
	var a int
	a, _ = F()
	return a, a
}
// C code:
// decl
struct int$int_struct;
typedef struct int$int_struct int$int;
// def
#ifndef $int$int
#define $int$int
struct int$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$int foo_F();
// def
int$int foo_F() {
	int a = {0};
	int$int __tmp0 = foo_F();
	a = __tmp0._0;
	return (int$int){a, a};
}
// end

// Go code:
func F() int {
	a, _ := 1, F()+F()
	_, a = 3*F(), 2*1
	return a
}
// C code:
// decl
int foo_F();
// def
int foo_F() {
	int a = 1;
	(void)((foo_F()+foo_F()));
	(void)((3*foo_F()));
	int __tmp1 = 2;
	(void)((3*foo_F()));
	a = __tmp1;
	return a;
}
// end