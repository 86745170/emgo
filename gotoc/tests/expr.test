// Go code:
func CompositeLitSlice() int {
	var a = [][2]int{{1, 2}, {3, 4}, {4, 5}}
	b := []*[2]int{&a[0], &a[1], &a[2]}
	return len(b)
}
// C code:
// decl
struct $2_$int_struct;
typedef struct $2_$int_struct $2_$int;
// def
#ifndef $2_$int$
#define $2_$int$
struct $2_$int_struct {
	int arr[2];
};
#endif
// decl
int foo$CompositeLitSlice();
// def
int foo$CompositeLitSlice() {
	slice a$ = CSLICE(3, (($2_$int[]){(($2_$int){{1, 2}}), (($2_$int){{3, 4}}), (($2_$int){{4, 5}})}));
	slice b$ = CSLICE(3, (($2_$int*[]){&(($2_$int*)a$.arr)[0], &(($2_$int*)a$.arr)[1], &(($2_$int*)a$.arr)[2]}));
	return len(b$);
}
// end

// Go code:
func CompositeLitStruct() int {
	type S struct {
		a, b int
	}
	s := S{1, 2}
	s = S{a: 2, b: 3}
	return s.a + s.b
}
// C code:
// decl
const tinfo foo$S$$51;
// def
const tinfo foo$S$$51 = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = CSLICE(2, ((const tinfo*[]){
			&int$$,
			&int$$
		}))
	}
};
// decl
const tinfo $8$foo$S$$51;
// def
const tinfo $8$foo$S$$51 = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$S$$51
		}))
	}
};
// decl
int foo$CompositeLitStruct();
// def
int foo$CompositeLitStruct() {
	struct S$_struct;
	typedef struct S$_struct S$;
	struct S$_struct {
		int a;
		int b;
	};
	S$ s$ = ((S$){1, 2});
	s$ = ((S$){.a = 2, .b = 3});
	return (s$.a+s$.b);
}
// end

// Go code:
func F() (int, int) {
	var a int
	a, _ = F()
	return a, a
}
// C code:
// decl
struct int$$int_struct;
typedef struct int$$int_struct int$$int;
// def
#ifndef int$$int$
#define int$$int$
struct int$$int_struct {
	int _0;
	int _1;
};
#endif
// decl
int$$int foo$F();
// def
int$$int foo$F() {
	int a$ = 0;
	int$$int _tmp0 = foo$F();
	a$ = _tmp0._0;
	return (int$$int){a$, a$};
}
// end

// Go code:
func F() int {
	a, _ := 1, F()+F()
	_, a = 3*F(), 2*1
	return a
}
// C code:
// decl
int foo$F();
// def
int foo$F() {
	int a$ = 1;
	(void)((foo$F()+foo$F()));
	(void)((3*foo$F()));
	int _tmp0 = 2;
	(void)((3*foo$F()));
	a$ = _tmp0;
	return a$;
}
// end

// Go code:
func F(v interface{}) (int, bool) {
	i, ok := v.(int)
	return i, ok
}
// C code:
// decl
struct int$$bool_struct;
typedef struct int$$bool_struct int$$bool;
// def
#ifndef int$$bool$
#define int$$bool$
struct int$$bool_struct {
	int _0;
	bool _1;
};
#endif
// decl
int$$bool foo$F(interface v$);
// def
int$$bool foo$F(interface v$) {
	int$$bool _tmp0 = ({
		interface _i = v$;
		bool _ok = (_i.itab$ == &int$$);
		(int$$bool){IVAL(_i, int), _ok};
	});
	int i$ = _tmp0._0;
	bool ok$ = _tmp0._1;
	return (int$$bool){i$, ok$};
}
// end

// Go code:
func F(v interface{}) int {
	return v.(int)
}
// C code:
// decl
int foo$F(interface v$);
// def
int foo$F(interface v$) {
	return ({
		interface _i = v$;
		bool _ok = (_i.itab$ == &int$$);
		if (!_ok) panicIC();
		IVAL(_i, int);
	});
}
// end

// Go code:
func F(v interface{}) (error, bool) {
	e, ok := v.(error)
	return e, ok
}
// C code:
// decl
struct interface$$bool_struct;
typedef struct interface$$bool_struct interface$$bool;
// def
#ifndef interface$$bool$
#define interface$$bool$
struct interface$$bool_struct {
	interface _0;
	bool _1;
};
#endif
// decl
interface$$bool foo$F(interface v$);
// def
interface$$bool foo$F(interface v$) {
	interface$$bool _tmp0 = ({
		interface _i = v$;
		bool _ok = implements(_i.itab$, &error$$);
		(interface$$bool){ICONVERTEI(_i,  error$$), _ok};
	});
	interface e$ = _tmp0._0;
	bool ok$ = _tmp0._1;
	return (interface$$bool){e$, ok$};
}
// end

// Go code:
func F(v interface{}) error {
	return v.(error)
}
// C code:
// decl
interface foo$F(interface v$);
// def
interface foo$F(interface v$) {
	return ({
		interface _i = v$;
		bool _ok = implements(_i.itab$, &error$$);
		if (!_ok) panicIC();
		ICONVERTEI(_i,  error$$);
	});
}
// end