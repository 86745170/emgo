// Go code:
func CompositeLitSlice() int {
	var a = [][2]int{{1, 2}, {3, 4}, {4, 5}}
	b := []*[2]int{&a[0], &a[1], &a[2]}
	return len(b)
}
// C code:
// decl
struct $2_$int__struct;
typedef struct $2_$int__struct $2_$int_;
// def
#ifndef $2_$int_$
#define $2_$int_$
struct $2_$int__struct {
	int_ arr[2];
};
#endif
// decl
int_ foo$CompositeLitSlice();
// def
int_ foo$CompositeLitSlice() {
	slice a$ = CSLICE(3, (($2_$int_[]){(($2_$int_){{1L, 2L}}), (($2_$int_){{3L, 4L}}), (($2_$int_){{4L, 5L}})}));
	slice b$ = CSLICE(3, (($2_$int_*[]){&SLIDXC($2_$int_*, a$, 0L), &SLIDXC($2_$int_*, a$, 1L), &SLIDXC($2_$int_*, a$, 2L)}));
	return len(b$);
}
// end

// Go code:
func CompositeLitStruct() int {
	type S struct {
		a, b int
	}
	s := S{1, 2}
	s = S{a: 2, b: 3}
	return s.a + s.b
}
// C code:
// decl
const tinfo foo$S$$51;
// def
const tinfo foo$S$$51 = {
	{
		.name = EGSTR("foo.S"),
		.kind = Struct,
		.elems = (const field[]){
			{{(byte*)4, 4}, nil},
			{{(byte*)4, 4}, nil}
		},
		.elemN = 2
	}
};
// decl
const tinfo $8$foo$S$$51;
// def
const tinfo $8$foo$S$$51 = {
	{
		.kind = Ptr,
		.elems = &foo$S$$51
	}
};
// decl
int_ foo$CompositeLitStruct();
// def
int_ foo$CompositeLitStruct() {
	struct S$_struct;
	typedef struct S$_struct S$;
	struct S$_struct {
		int_ a;
		int_ b;
	};
	S$ s$ = ((S$){1L, 2L});
	s$ = ((S$){.a = 2L, .b = 3L});
	return (s$.a+s$.b);
}
// end

// Go code:
func F() (int, int) {
	var a int
	a, _ = F()
	return a, a
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$F();
// def
int_$$int_ foo$F() {
	int_ a$ = 0;
	int_$$int_ _tmp0 = foo$F();
	a$ = _tmp0._0;
	return (int_$$int_){a$, a$};
}
// end

// Go code:
func F() int {
	a, _ := 1, F()+F()
	_, a = 3*F(), 2*1
	return a
}
// C code:
// decl
int_ foo$F();
// def
int_ foo$F() {
	int_ a$ = 1L;
	(void)((foo$F()+foo$F()));
	(void)((3L*foo$F()));
	int_ _tmp0 = 2L;
	(void)((3L*foo$F()));
	a$ = _tmp0;
	return a$;
}
// end

// Go code:
func F(v interface{}) (int, bool) {
	i, ok := v.(int)
	return i, ok
}
// C code:
// decl
struct int_$$bool_struct;
typedef struct int_$$bool_struct int_$$bool;
// def
#ifndef int_$$bool$
#define int_$$bool$
struct int_$$bool_struct {
	int_ _0;
	bool _1;
};
#endif
// decl
int_$$bool foo$F(interface v$);
// def
int_$$bool foo$F(interface v$) {
	int_$$bool _tmp0 = ({
		interface _i = v$;
		bool _ok = (_i.itab$ == &int_$$);
		(int_$$bool){IVAL(_i, int_), _ok};
	});
	int_ i$ = _tmp0._0;
	bool ok$ = _tmp0._1;
	return (int_$$bool){i$, ok$};
}
// end

// Go code:
func F(v interface{}) int {
	return v.(int)
}
// C code:
// decl
int_ foo$F(interface v$);
// def
int_ foo$F(interface v$) {
	return ({
		interface _i = v$;
		if (!(_i.itab$ == &int_$$)) panicIC();
		IVAL(_i, int_);
	});
}
// end

// Go code:
func F(v interface{}) (error, bool) {
	e, ok := v.(error)
	return e, ok
}
// C code:
// decl
struct interface$$bool_struct;
typedef struct interface$$bool_struct interface$$bool;
// def
#ifndef interface$$bool$
#define interface$$bool$
struct interface$$bool_struct {
	interface _0;
	bool _1;
};
#endif
// decl
interface$$bool foo$F(interface v$);
// def
interface$$bool foo$F(interface v$) {
	interface$$bool _tmp0 = ({
		interface _i = v$;
		interface$$bool _ret = {};
		_ret._1 = implements(_i.itab$, &error$$);
		if (_ret._1) _ret._0 = ICONVERTEI(_i,  error$$);
		_ret;
	});
	interface e$ = _tmp0._0;
	bool ok$ = _tmp0._1;
	return (interface$$bool){e$, ok$};
}
// end

// Go code:
func F(v interface{}) error {
	return v.(error)
}
// C code:
// decl
interface foo$F(interface v$);
// def
interface foo$F(interface v$) {
	return ({
		interface _i = v$;
		if (!implements(_i.itab$, &error$$)) panicIC();
		ICONVERTEI(_i,  error$$);
	});
}
// end