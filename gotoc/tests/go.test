// Go code:
func F() {
	go F()
}
// C code:
// decl
void foo$F();
// def
void foo$F() {
	GO(foo$F(), false);
}
// end

// Go code:
func F(i int) {
	go F(2*i)
}
// C code:
// decl
void foo$F(int_ i$);
// def
void foo$F(int_ i$) {
	{
		void wrap(int_ _0) {
			goready();
			foo$F(_0);
		}
		int_ _0 = (2L*i$);
		GO(wrap(_0), true);
	}
}
// end

// Go code:
type I int

func (i I) F(k int) int {
	go i.F(int(i) * k)
	return int(i) - k
}
// C code:
// decl
const minfo F$$$int_$$$int_$$;
// def
const minfo F$$$int_$$$int_$$;
// decl
int_ foo$I$F$1(ival* i$, int_ k$);
// def
int_ foo$I$F$1(ival* i$, int_ k$) {
	return foo$I$F((*(foo$I*)i$), k$);
}
// decl
const tinfo foo$I$$;
// def
const tinfo foo$I$$ = {
	{
		.name = EGSTR("foo.I"),
		.kind = Int,
		.methods = CSLICE(1, ((const minfo*[]){
			&F$$$int_$$$int_$$
		}))
	}, {
		foo$I$F$1
	}
};
// decl
int_ foo$I$F$0(ival* i$, int_ k$);
// def
int_ foo$I$F$0(ival* i$, int_ k$) {
	return foo$I$F(*((foo$I*)i$->ptr), k$);
}
// decl
const tinfo $8$foo$I$$;
// def
const tinfo $8$foo$I$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$I$$
		})),
		.methods = CSLICE(1, ((const minfo*[]){
			&F$$$int_$$$int_$$
		}))
	}, {
		foo$I$F$0
	}
};
// decl
typedef int_ foo$I;
// decl
int_ foo$I$F(foo$I i$, int_ k$);
// def
int_ foo$I$F(foo$I i$, int_ k$) {
	{
		void wrap(foo$I _r, int_ _0) {
			goready();
			foo$I$F(_r, _0);
		}
		foo$I _r = i$;
		int_ _0 = (((int_)(i$))*k$);
		GO(wrap(_r, _0), true);
	}
	return (((int_)(i$))-k$);
}
// end

// Go code:
func F(a, b interface{}) (int, int) {
	go F(F(a, b))
	return 0, 0
}
// C code:
// decl
struct int_$$int__struct;
typedef struct int_$$int__struct int_$$int_;
// def
#ifndef int_$$int_$
#define int_$$int_$
struct int_$$int__struct {
	int_ _0;
	int_ _1;
};
#endif
// decl
int_$$int_ foo$F(interface a$, interface b$);
// def
int_$$int_ foo$F(interface a$, interface b$) {
	{
		void wrap(interface _0, interface _1) {
			goready();
			foo$F(_0, _1);
		}
		int_$$int_ _tup = foo$F(a$, b$);
		interface _0 = INTERFACE(_tup._0, &int_$$);
		interface _1 = INTERFACE(_tup._1, &int_$$);
		GO(wrap(_0, _1), true);
	}
	return (int_$$int_){0L, 0L};
}
// end
