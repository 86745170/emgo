// Go code:
func F() {
	go F()
}
// C code:
// decl
void foo$F();
// def
void foo$F() {
	GO(foo$F());
}
// end

// Go code:
func F(i int) {
	go F(2*i)
}
// C code:
// decl
void foo$F(int i$);
// def
void foo$F(int i$) {
	{
		void wrap(int _0) {
			goready();
			foo$F(_0);
		}
		int _0 = (2*i$);
		GOWAIT(wrap(_0));
	}
}
// end

// Go code:
type I int

func (i I) F(k int) int {
	go i.F(int(i) * k)
	return int(i) - k
}
// C code:
// decl
typedef int foo$I;
// decl
int foo$I$F(foo$I i$, int k$);
// def
int foo$I$F(foo$I i$, int k$) {
	{
		void wrap(foo$I _r, int _0) {
			goready();
			foo$I$F(_r, _0);
		}
		foo$I _r = i$;
		int _0 = (((int)(i$))*k$);
		GOWAIT(wrap(_r, _0));
	}
	return (((int)(i$))-k$);
}
// end

// Go code:
func F(a []byte) func([]byte) {
	go F(a[1:])(a[:1])
	return func(b []byte) {F(b)}
}
// C code:
// decl
void (*foo$F(slice a$))(slice);
// def
void (*foo$F(slice a$))(slice) {
	{
		void wrap(void (*_f)(slice), slice _0) {
			goready();
			_f(_0);
		}
		void (*_f)(slice) = foo$F(SLICEL(a$, byte*, 1));
		slice _0 = SLICEH(a$, 1);
		GOWAIT(wrap(_f, _0));
	}
	return ({
		void func$(slice b$) {
			foo$F(b$);
		}
		func$;
	});
}
// end