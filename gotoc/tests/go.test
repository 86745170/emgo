// Go code:
func F() {
	go F()
}
// C code:
// decl
void foo$F();
// def
void foo$F() {
	GO(foo$F(), false);
}
// end

// Go code:
func F(i int) {
	go F(2*i)
}
// C code:
// decl
void foo$F(int i$);
// def
void foo$F(int i$) {
	{
		void wrap(int _0) {
			goready();
			foo$F(_0);
		}
		int _0 = (2*i$);
		GO(wrap(_0), true);
	}
}
// end

// Go code:
type I int

func (i I) F(k int) int {
	go i.F(int(i) * k)
	return int(i) - k
}
// C code:
// decl
const minfo F$$$int$$$int$$;
// def
const minfo F$$$int$$$int$$;
// decl
int foo$I$F$1(ival* i$, int k$);
// def
int foo$I$F$1(ival* i$, int k$) {
	return foo$I$F((*(foo$I*)i$), k$);
}
// end

// Go code:
func F(n int, a ...int) {
	go F(10)
	go F(20, 0)
	go F(30, 0, 1)
	go F(40, a...)
}
// C code:
// decl
void foo$F(int n$, slice a$);
// def
void foo$F(int n$, slice a$) {
	{
		void wrap(int _0) {
			goready();
			foo$F(_0, NILSLICE);
		}
		int _0 = 10;
		GO(wrap(_0), true);
	}
	{
		void wrap(int _0) {
			goready();
			foo$F(_0, CSLICE(1, _a));
		}
		int _0 = 20;
		int _a[] = {0};
		GO(wrap(_0), true);
	}
	{
		void wrap(int _0) {
			goready();
			foo$F(_0, CSLICE(2, _a));
		}
		int _0 = 30;
		int _a[] = {0, 1};
		GO(wrap(_0), true);
	}
	{
		void wrap(int _0, slice _1) {
			goready();
			foo$F(_0, _1);
		}
		int _0 = 40;
		slice _1 = a$;
		GO(wrap(_0, _1), true);
	}
}
// end