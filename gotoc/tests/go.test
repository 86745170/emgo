// Go code:
func F() {
	go F()
}
// C code:
// decl
void foo$F();
// def
void foo$F() {
	GO(foo$F(), false);
}
// end

// Go code:
func F(i int) {
	go F(2*i)
}
// C code:
// decl
void foo$F(int i$);
// def
void foo$F(int i$) {
	{
		void wrap(int _0) {
			goready();
			foo$F(_0);
		}
		int _0 = (2*i$);
		GO(wrap(_0), true);
	}
}
// end

// Go code:
type I int

func (i I) F(k int) int {
	go i.F(int(i) * k)
	return int(i) - k
}
// C code:
// decl
const minfo F$$$int$$$int$$;
// def
const minfo F$$$int$$$int$$;
// decl
int foo$I$F$1(ival* i$, int k$);
// def
int foo$I$F$1(ival* i$, int k$) {
	return foo$I$F((*(foo$I*)i$), k$);
}
// decl
const tinfo foo$I$$;
// def
const tinfo foo$I$$ = {
	{
		.name = EGSTR("foo.I"),
		.kind = Int,
		.methods = CSLICE(1, ((const minfo*[]){
			&F$$$int$$$int$$
		}))
	}, {
		foo$I$F$1
	}
};
// decl
int foo$I$F$0(ival* i$, int k$);
// def
int foo$I$F$0(ival* i$, int k$) {
	return foo$I$F(*((foo$I*)i$->ptr), k$);
}
// decl
const tinfo $8$foo$I$$;
// def
const tinfo $8$foo$I$$ = {
	{
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$I$$
		})),
		.methods = CSLICE(1, ((const minfo*[]){
			&F$$$int$$$int$$
		}))
	}, {
		foo$I$F$0
	}
};
// decl
typedef int foo$I;
// decl
int foo$I$F(foo$I i$, int k$);
// def
int foo$I$F(foo$I i$, int k$) {
	{
		void wrap(foo$I _r, int _0) {
			goready();
			foo$I$F(_r, _0);
		}
		foo$I _r = i$;
		int _0 = (CAST(int, i$)*k$);
		GO(wrap(_r, _0), true);
	}
	return (CAST(int, i$)-k$);
}
// end