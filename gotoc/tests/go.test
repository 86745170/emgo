// Go code:
func F() {
	go F()
}
// C code:
// decl
void foo$F();
// def
void foo$F() {
	GO(foo$F(), false);
}
// end

// Go code:
func F(i int) {
	go F(2*i)
}
// C code:
// decl
void foo$F(int i$);
// def
void foo$F(int i$) {
	{
		void wrap(int _0) {
			goready();
			foo$F(_0);
		}
		int _0 = (2*i$);
		GO(wrap(_0), true);
	}
}
// end

// Go code:
type I int

func (i I) F(k int) int {
	go i.F(int(i) * k)
	return int(i) - k
}
// C code:
// decl
__attribute__((section(".unused"))) const
minfo F$$$int$$$int$$;
// def
__attribute__((section(".unused"))) const
minfo F$$$int$$$int$$;
// decl
const
tinfo foo$I$$;
// def
const
tinfo foo$I$$ = {
	{
		.name = EGSTR("foo.I"),
		.size = 4,
		.kind = Int,
		.methods = CSLICE(1, ((const minfo*[]){
			&F$$$int$$$int$$
		}))
	}, {
		foo$I$F$1
	}
};
// decl
const
tinfo $8$foo$I$$;
// def
const
tinfo $8$foo$I$$ = {
	{
		.size = 4,
		.kind = Ptr,
		.elems = CSLICE(1, ((const tinfo*[]){
			&foo$I$$
		}))
	}
};
// decl
typedef int foo$I;
// decl
int foo$I$F(foo$I i$, int k$);
// def
int foo$I$F(foo$I i$, int k$) {
	{
		void wrap(foo$I _r, int _0) {
			goready();
			foo$I$F(_r, _0);
		}
		foo$I _r = i$;
		int _0 = (((int)(i$))*k$);
		GO(wrap(_r, _0), true);
	}
	return (((int)(i$))-k$);
}
// decl
int foo$I$F$0(ival* i$, int k$);
// def
int foo$I$F$0(ival* i$, int k$) {
	return foo$I$F(*(foo$I*)i$->ptr, k$);
}
// decl
int foo$I$F$1(ival* i$, int k$);
// def
int foo$I$F$1(ival* i$, int k$) {
	return foo$I$F(*(foo$I*)i$, k$);
}
// end

// Go code:
func F(a []byte) func([]byte) {
	go F(a[1:])(a[:1])
	return func(b []byte) {F(b)}
}
// C code:
// decl
void (*foo$F(slice a$))(slice);
// def
void (*foo$F(slice a$))(slice) {
	{
		void wrap(void (*_f)(slice), slice _0) {
			goready();
			_f(_0);
		}
		void (*_f)(slice) = foo$F(SLICEL(a$, byte*, 1));
		slice _0 = SLICEH(a$, 1);
		GO(wrap(_f, _0), true);
	}
	return ({
		void func$(slice b$) {
			foo$F(b$);
		}
		func$;
	});
}
// end

// Go code:
func F(n int, a ...int) {
	go F(10)
	go F(20, 0)
	go F(30, 0, 1)
	go F(40, a...)
}
// C code:
// decl
void foo$F(int n$, slice a$);
// def
void foo$F(int n$, slice a$) {
	{
		void wrap(int _0) {
			goready();
			foo$F(_0, NILSLICE);
		}
		int _0 = 10;
		GO(wrap(_0), true);
	}
	{
		void wrap(int _0) {
			goready();
			foo$F(_0, CSLICE(1, _a));
		}
		int _0 = 20;
		int _a[] = {0};
		GO(wrap(_0), true);
	}
	{
		void wrap(int _0) {
			goready();
			foo$F(_0, CSLICE(2, _a));
		}
		int _0 = 30;
		int _a[] = {0, 1};
		GO(wrap(_0), true);
	}
	{
		void wrap(int _0, slice _1) {
			goready();
			foo$F(_0, _1);
		}
		int _0 = 40;
		slice _1 = a$;
		GO(wrap(_0, _1), true);
	}
}
// end