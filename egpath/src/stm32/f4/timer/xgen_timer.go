package timer

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type Timer struct{}

func (p *Timer) r(n uint) *mmio.U32 {
	return &(*[6]mmio.U32)(unsafe.Pointer(p))[n]
}


var TIM1 = (*Timer)(unsafe.Pointer(uintptr(0x40010000)))
var TIM2 = (*Timer)(unsafe.Pointer(uintptr(0x40000000)))
var TIM3 = (*Timer)(unsafe.Pointer(uintptr(0x40000400)))
var TIM4 = (*Timer)(unsafe.Pointer(uintptr(0x40000800)))


type CR1_Bits uint32

func (p *Timer) CEN() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(CEN)} }
func (p *Timer) UDIS() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(UDIS)} }
func (p *Timer) URS() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(URS)} }
func (p *Timer) OPM() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(OPM)} }
func (p *Timer) DIR() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(DIR)} }
func (p *Timer) CMS() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(CMS)} }
func (p *Timer) ARPE() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(ARPE)} }
func (p *Timer) CKD() mmio.Bits32 {return mmio.Bits32{p.r(0), uint32(CKD)} }

func (p *Timer) CR1_Load() CR1_Bits   { return CR1_Bits(p.r(0).Load()) }
func (p *Timer) CR1_Store(b CR1_Bits) { p.r(0).Store(uint32(b)) }

func (b CR1_Bits) Field(mask CR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CR1(v int, mask CR1_Bits) CR1_Bits {
	return CR1_Bits(bits.Make32(v, uint32(mask)))
}


type CR2_Bits uint32

func (p *Timer) CCPC() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(CCPC)} }
func (p *Timer) CCUS() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(CCUS)} }
func (p *Timer) CCDS() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(CCDS)} }
func (p *Timer) MMS() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(MMS)} }
func (p *Timer) TI1S() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(TI1S)} }
func (p *Timer) OIS1() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(OIS1)} }
func (p *Timer) OIS1N() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(OIS1N)} }
func (p *Timer) OIS2() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(OIS2)} }
func (p *Timer) OIS2N() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(OIS2N)} }
func (p *Timer) OIS3() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(OIS3)} }
func (p *Timer) OIS3N() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(OIS3N)} }
func (p *Timer) OIS4() mmio.Bits32 {return mmio.Bits32{p.r(1), uint32(OIS4)} }

func (p *Timer) CR2_Load() CR2_Bits   { return CR2_Bits(p.r(1).Load()) }
func (p *Timer) CR2_Store(b CR2_Bits) { p.r(1).Store(uint32(b)) }

func (b CR2_Bits) Field(mask CR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CR2(v int, mask CR2_Bits) CR2_Bits {
	return CR2_Bits(bits.Make32(v, uint32(mask)))
}


type SMCR_Bits uint32

func (p *Timer) SMS() mmio.Bits32 {return mmio.Bits32{p.r(2), uint32(SMS)} }
func (p *Timer) TS() mmio.Bits32 {return mmio.Bits32{p.r(2), uint32(TS)} }
func (p *Timer) MSM() mmio.Bits32 {return mmio.Bits32{p.r(2), uint32(MSM)} }
func (p *Timer) ETF() mmio.Bits32 {return mmio.Bits32{p.r(2), uint32(ETF)} }
func (p *Timer) ETPS() mmio.Bits32 {return mmio.Bits32{p.r(2), uint32(ETPS)} }
func (p *Timer) ECE() mmio.Bits32 {return mmio.Bits32{p.r(2), uint32(ECE)} }
func (p *Timer) ETP() mmio.Bits32 {return mmio.Bits32{p.r(2), uint32(ETP)} }

func (p *Timer) SMCR_Load() SMCR_Bits   { return SMCR_Bits(p.r(2).Load()) }
func (p *Timer) SMCR_Store(b SMCR_Bits) { p.r(2).Store(uint32(b)) }

func (b SMCR_Bits) Field(mask SMCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SMCR(v int, mask SMCR_Bits) SMCR_Bits {
	return SMCR_Bits(bits.Make32(v, uint32(mask)))
}


type DIER_Bits uint32

func (p *Timer) UIE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(UIE)} }
func (p *Timer) CC1IE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC1IE)} }
func (p *Timer) CC2IE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC2IE)} }
func (p *Timer) CC3IE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC3IE)} }
func (p *Timer) CC4IE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC4IE)} }
func (p *Timer) COMIE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(COMIE)} }
func (p *Timer) TIE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(TIE)} }
func (p *Timer) BIE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(BIE)} }
func (p *Timer) UDE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(UDE)} }
func (p *Timer) CC1DE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC1DE)} }
func (p *Timer) CC2DE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC2DE)} }
func (p *Timer) CC3DE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC3DE)} }
func (p *Timer) CC4DE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(CC4DE)} }
func (p *Timer) COMDE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(COMDE)} }
func (p *Timer) TDE() mmio.Bits32 {return mmio.Bits32{p.r(3), uint32(TDE)} }

func (p *Timer) DIER_Load() DIER_Bits   { return DIER_Bits(p.r(3).Load()) }
func (p *Timer) DIER_Store(b DIER_Bits) { p.r(3).Store(uint32(b)) }

func (b DIER_Bits) Field(mask DIER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_DIER(v int, mask DIER_Bits) DIER_Bits {
	return DIER_Bits(bits.Make32(v, uint32(mask)))
}


type SR_Bits uint32

func (p *Timer) UIF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(UIF)} }
func (p *Timer) CC1IF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC1IF)} }
func (p *Timer) CC2IF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC2IF)} }
func (p *Timer) CC3IF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC3IF)} }
func (p *Timer) CC4IF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC4IF)} }
func (p *Timer) COMIF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(COMIF)} }
func (p *Timer) TIF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(TIF)} }
func (p *Timer) BIF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(BIF)} }
func (p *Timer) CC1OF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC1OF)} }
func (p *Timer) CC2OF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC2OF)} }
func (p *Timer) CC3OF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC3OF)} }
func (p *Timer) CC4OF() mmio.Bits32 {return mmio.Bits32{p.r(4), uint32(CC4OF)} }

func (p *Timer) SR_Load() SR_Bits   { return SR_Bits(p.r(4).Load()) }
func (p *Timer) SR_Store(b SR_Bits) { p.r(4).Store(uint32(b)) }

func (b SR_Bits) Field(mask SR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SR(v int, mask SR_Bits) SR_Bits {
	return SR_Bits(bits.Make32(v, uint32(mask)))
}


type EGR_Bits uint32

func (p *Timer) UG() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(UG)} }
func (p *Timer) CC1G() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(CC1G)} }
func (p *Timer) CC2G() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(CC2G)} }
func (p *Timer) CC3G() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(CC3G)} }
func (p *Timer) CC4G() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(CC4G)} }
func (p *Timer) COMG() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(COMG)} }
func (p *Timer) TG() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(TG)} }
func (p *Timer) BG() mmio.Bits32 {return mmio.Bits32{p.r(5), uint32(BG)} }

func (p *Timer) EGR_Load() EGR_Bits   { return EGR_Bits(p.r(5).Load()) }
func (p *Timer) EGR_Store(b EGR_Bits) { p.r(5).Store(uint32(b)) }

func (b EGR_Bits) Field(mask EGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_EGR(v int, mask EGR_Bits) EGR_Bits {
	return EGR_Bits(bits.Make32(v, uint32(mask)))
}

