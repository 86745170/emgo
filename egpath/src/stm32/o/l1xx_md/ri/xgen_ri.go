package ri

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l1xx_md/mmap"
)

type RI_Periph struct {
	ICR    RICR
	ASCR1  RASCR1
	ASCR2  RASCR2
	HYSCR1 RHYSCR1
	HYSCR2 RHYSCR2
	HYSCR3 RHYSCR3
	HYSCR4 RHYSCR4
	ASMR1  RASMR1
	CMR1   RCMR1
	CICR1  RCICR1
	ASMR2  RASMR2
	CMR2   RCMR2
	CICR2  RCICR2
	ASMR3  RASMR3
	CMR3   RCMR3
	CICR3  RCICR3
	ASMR4  RASMR4
	CMR4   RCMR4
	CICR4  RCICR4
	ASMR5  RASMR5
	CMR5   RCMR5
	CICR5  RCICR5
}

func (p *RI_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var RI = (*RI_Periph)(unsafe.Pointer(uintptr(mmap.RI_BASE)))

type ICR uint32

func (b ICR) Field(mask ICR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICR) J(v int) ICR {
	return ICR(bits.MakeField32(v, uint32(mask)))
}

type RICR struct{ mmio.U32 }

func (r *RICR) Bits(mask ICR) ICR     { return ICR(r.U32.Bits(uint32(mask))) }
func (r *RICR) StoreBits(mask, b ICR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICR) SetBits(mask ICR)      { r.U32.SetBits(uint32(mask)) }
func (r *RICR) ClearBits(mask ICR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RICR) Load() ICR             { return ICR(r.U32.Load()) }
func (r *RICR) Store(b ICR)           { r.U32.Store(uint32(b)) }

func (r *RICR) AtomicStoreBits(mask, b ICR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RICR) AtomicSetBits(mask ICR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RICR) AtomicClearBits(mask ICR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMICR struct{ mmio.UM32 }

func (rm RMICR) Load() ICR   { return ICR(rm.UM32.Load()) }
func (rm RMICR) Store(b ICR) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) IC1Z() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC1Z)}}
}

func (p *RI_Periph) IC2Z() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC2Z)}}
}

func (p *RI_Periph) IC3Z() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC3Z)}}
}

func (p *RI_Periph) IC4Z() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC4Z)}}
}

func (p *RI_Periph) TIM() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(TIM)}}
}

func (p *RI_Periph) IC1() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC1)}}
}

func (p *RI_Periph) IC2() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC2)}}
}

func (p *RI_Periph) IC3() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC3)}}
}

func (p *RI_Periph) IC4() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(IC4)}}
}

type ASCR1 uint32

func (b ASCR1) Field(mask ASCR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ASCR1) J(v int) ASCR1 {
	return ASCR1(bits.MakeField32(v, uint32(mask)))
}

type RASCR1 struct{ mmio.U32 }

func (r *RASCR1) Bits(mask ASCR1) ASCR1   { return ASCR1(r.U32.Bits(uint32(mask))) }
func (r *RASCR1) StoreBits(mask, b ASCR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RASCR1) SetBits(mask ASCR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RASCR1) ClearBits(mask ASCR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RASCR1) Load() ASCR1             { return ASCR1(r.U32.Load()) }
func (r *RASCR1) Store(b ASCR1)           { r.U32.Store(uint32(b)) }

func (r *RASCR1) AtomicStoreBits(mask, b ASCR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RASCR1) AtomicSetBits(mask ASCR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RASCR1) AtomicClearBits(mask ASCR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMASCR1 struct{ mmio.UM32 }

func (rm RMASCR1) Load() ASCR1   { return ASCR1(rm.UM32.Load()) }
func (rm RMASCR1) Store(b ASCR1) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) CH() RMASCR1 {
	return RMASCR1{mmio.UM32{&p.ASCR1.U32, uint32(CH)}}
}

func (p *RI_Periph) CH_31() RMASCR1 {
	return RMASCR1{mmio.UM32{&p.ASCR1.U32, uint32(CH_31)}}
}

func (p *RI_Periph) VCOMP() RMASCR1 {
	return RMASCR1{mmio.UM32{&p.ASCR1.U32, uint32(VCOMP)}}
}

func (p *RI_Periph) SCM() RMASCR1 {
	return RMASCR1{mmio.UM32{&p.ASCR1.U32, uint32(SCM)}}
}

type ASCR2 uint32

func (b ASCR2) Field(mask ASCR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ASCR2) J(v int) ASCR2 {
	return ASCR2(bits.MakeField32(v, uint32(mask)))
}

type RASCR2 struct{ mmio.U32 }

func (r *RASCR2) Bits(mask ASCR2) ASCR2   { return ASCR2(r.U32.Bits(uint32(mask))) }
func (r *RASCR2) StoreBits(mask, b ASCR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RASCR2) SetBits(mask ASCR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RASCR2) ClearBits(mask ASCR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RASCR2) Load() ASCR2             { return ASCR2(r.U32.Load()) }
func (r *RASCR2) Store(b ASCR2)           { r.U32.Store(uint32(b)) }

func (r *RASCR2) AtomicStoreBits(mask, b ASCR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RASCR2) AtomicSetBits(mask ASCR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RASCR2) AtomicClearBits(mask ASCR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMASCR2 struct{ mmio.UM32 }

func (rm RMASCR2) Load() ASCR2   { return ASCR2(rm.UM32.Load()) }
func (rm RMASCR2) Store(b ASCR2) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) GR10_1() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR10_1)}}
}

func (p *RI_Periph) GR10_2() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR10_2)}}
}

func (p *RI_Periph) GR10_3() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR10_3)}}
}

func (p *RI_Periph) GR10_4() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR10_4)}}
}

func (p *RI_Periph) GR6_1() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR6_1)}}
}

func (p *RI_Periph) GR6_2() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR6_2)}}
}

func (p *RI_Periph) GR5_1() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR5_1)}}
}

func (p *RI_Periph) GR5_2() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR5_2)}}
}

func (p *RI_Periph) GR5_3() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR5_3)}}
}

func (p *RI_Periph) GR4_1() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR4_1)}}
}

func (p *RI_Periph) GR4_2() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR4_2)}}
}

func (p *RI_Periph) GR4_3() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR4_3)}}
}

func (p *RI_Periph) GR4_4() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR4_4)}}
}

func (p *RI_Periph) CH0b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH0b)}}
}

func (p *RI_Periph) CH1b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH1b)}}
}

func (p *RI_Periph) CH2b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH2b)}}
}

func (p *RI_Periph) CH3b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH3b)}}
}

func (p *RI_Periph) CH6b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH6b)}}
}

func (p *RI_Periph) CH7b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH7b)}}
}

func (p *RI_Periph) CH8b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH8b)}}
}

func (p *RI_Periph) CH9b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH9b)}}
}

func (p *RI_Periph) CH10b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH10b)}}
}

func (p *RI_Periph) CH11b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH11b)}}
}

func (p *RI_Periph) CH12b() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(CH12b)}}
}

func (p *RI_Periph) GR6_3() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR6_3)}}
}

func (p *RI_Periph) GR6_4() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR6_4)}}
}

func (p *RI_Periph) GR5_4() RMASCR2 {
	return RMASCR2{mmio.UM32{&p.ASCR2.U32, uint32(GR5_4)}}
}

type HYSCR1 uint32

func (b HYSCR1) Field(mask HYSCR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HYSCR1) J(v int) HYSCR1 {
	return HYSCR1(bits.MakeField32(v, uint32(mask)))
}

type RHYSCR1 struct{ mmio.U32 }

func (r *RHYSCR1) Bits(mask HYSCR1) HYSCR1  { return HYSCR1(r.U32.Bits(uint32(mask))) }
func (r *RHYSCR1) StoreBits(mask, b HYSCR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR1) SetBits(mask HYSCR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RHYSCR1) ClearBits(mask HYSCR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RHYSCR1) Load() HYSCR1             { return HYSCR1(r.U32.Load()) }
func (r *RHYSCR1) Store(b HYSCR1)           { r.U32.Store(uint32(b)) }

func (r *RHYSCR1) AtomicStoreBits(mask, b HYSCR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR1) AtomicSetBits(mask HYSCR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RHYSCR1) AtomicClearBits(mask HYSCR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMHYSCR1 struct{ mmio.UM32 }

func (rm RMHYSCR1) Load() HYSCR1   { return HYSCR1(rm.UM32.Load()) }
func (rm RMHYSCR1) Store(b HYSCR1) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PA() RMHYSCR1 {
	return RMHYSCR1{mmio.UM32{&p.HYSCR1.U32, uint32(PA)}}
}

func (p *RI_Periph) PB() RMHYSCR1 {
	return RMHYSCR1{mmio.UM32{&p.HYSCR1.U32, uint32(PB)}}
}

type HYSCR2 uint32

func (b HYSCR2) Field(mask HYSCR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HYSCR2) J(v int) HYSCR2 {
	return HYSCR2(bits.MakeField32(v, uint32(mask)))
}

type RHYSCR2 struct{ mmio.U32 }

func (r *RHYSCR2) Bits(mask HYSCR2) HYSCR2  { return HYSCR2(r.U32.Bits(uint32(mask))) }
func (r *RHYSCR2) StoreBits(mask, b HYSCR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR2) SetBits(mask HYSCR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RHYSCR2) ClearBits(mask HYSCR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RHYSCR2) Load() HYSCR2             { return HYSCR2(r.U32.Load()) }
func (r *RHYSCR2) Store(b HYSCR2)           { r.U32.Store(uint32(b)) }

func (r *RHYSCR2) AtomicStoreBits(mask, b HYSCR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR2) AtomicSetBits(mask HYSCR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RHYSCR2) AtomicClearBits(mask HYSCR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMHYSCR2 struct{ mmio.UM32 }

func (rm RMHYSCR2) Load() HYSCR2   { return HYSCR2(rm.UM32.Load()) }
func (rm RMHYSCR2) Store(b HYSCR2) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PC() RMHYSCR2 {
	return RMHYSCR2{mmio.UM32{&p.HYSCR2.U32, uint32(PC)}}
}

func (p *RI_Periph) PD() RMHYSCR2 {
	return RMHYSCR2{mmio.UM32{&p.HYSCR2.U32, uint32(PD)}}
}

type HYSCR3 uint32

func (b HYSCR3) Field(mask HYSCR3) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HYSCR3) J(v int) HYSCR3 {
	return HYSCR3(bits.MakeField32(v, uint32(mask)))
}

type RHYSCR3 struct{ mmio.U32 }

func (r *RHYSCR3) Bits(mask HYSCR3) HYSCR3  { return HYSCR3(r.U32.Bits(uint32(mask))) }
func (r *RHYSCR3) StoreBits(mask, b HYSCR3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR3) SetBits(mask HYSCR3)      { r.U32.SetBits(uint32(mask)) }
func (r *RHYSCR3) ClearBits(mask HYSCR3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RHYSCR3) Load() HYSCR3             { return HYSCR3(r.U32.Load()) }
func (r *RHYSCR3) Store(b HYSCR3)           { r.U32.Store(uint32(b)) }

func (r *RHYSCR3) AtomicStoreBits(mask, b HYSCR3) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR3) AtomicSetBits(mask HYSCR3)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RHYSCR3) AtomicClearBits(mask HYSCR3)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMHYSCR3 struct{ mmio.UM32 }

func (rm RMHYSCR3) Load() HYSCR3   { return HYSCR3(rm.UM32.Load()) }
func (rm RMHYSCR3) Store(b HYSCR3) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PF() RMHYSCR3 {
	return RMHYSCR3{mmio.UM32{&p.HYSCR3.U32, uint32(PF)}}
}

type HYSCR4 uint32

func (b HYSCR4) Field(mask HYSCR4) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HYSCR4) J(v int) HYSCR4 {
	return HYSCR4(bits.MakeField32(v, uint32(mask)))
}

type RHYSCR4 struct{ mmio.U32 }

func (r *RHYSCR4) Bits(mask HYSCR4) HYSCR4  { return HYSCR4(r.U32.Bits(uint32(mask))) }
func (r *RHYSCR4) StoreBits(mask, b HYSCR4) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR4) SetBits(mask HYSCR4)      { r.U32.SetBits(uint32(mask)) }
func (r *RHYSCR4) ClearBits(mask HYSCR4)    { r.U32.ClearBits(uint32(mask)) }
func (r *RHYSCR4) Load() HYSCR4             { return HYSCR4(r.U32.Load()) }
func (r *RHYSCR4) Store(b HYSCR4)           { r.U32.Store(uint32(b)) }

func (r *RHYSCR4) AtomicStoreBits(mask, b HYSCR4) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RHYSCR4) AtomicSetBits(mask HYSCR4)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RHYSCR4) AtomicClearBits(mask HYSCR4)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMHYSCR4 struct{ mmio.UM32 }

func (rm RMHYSCR4) Load() HYSCR4   { return HYSCR4(rm.UM32.Load()) }
func (rm RMHYSCR4) Store(b HYSCR4) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PG() RMHYSCR4 {
	return RMHYSCR4{mmio.UM32{&p.HYSCR4.U32, uint32(PG)}}
}

type ASMR1 uint32

func (b ASMR1) Field(mask ASMR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ASMR1) J(v int) ASMR1 {
	return ASMR1(bits.MakeField32(v, uint32(mask)))
}

type RASMR1 struct{ mmio.U32 }

func (r *RASMR1) Bits(mask ASMR1) ASMR1   { return ASMR1(r.U32.Bits(uint32(mask))) }
func (r *RASMR1) StoreBits(mask, b ASMR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RASMR1) SetBits(mask ASMR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RASMR1) ClearBits(mask ASMR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RASMR1) Load() ASMR1             { return ASMR1(r.U32.Load()) }
func (r *RASMR1) Store(b ASMR1)           { r.U32.Store(uint32(b)) }

func (r *RASMR1) AtomicStoreBits(mask, b ASMR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RASMR1) AtomicSetBits(mask ASMR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RASMR1) AtomicClearBits(mask ASMR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMASMR1 struct{ mmio.UM32 }

func (rm RMASMR1) Load() ASMR1   { return ASMR1(rm.UM32.Load()) }
func (rm RMASMR1) Store(b ASMR1) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PA() RMASMR1 {
	return RMASMR1{mmio.UM32{&p.ASMR1.U32, uint32(PA)}}
}

type CMR1 uint32

func (b CMR1) Field(mask CMR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CMR1) J(v int) CMR1 {
	return CMR1(bits.MakeField32(v, uint32(mask)))
}

type RCMR1 struct{ mmio.U32 }

func (r *RCMR1) Bits(mask CMR1) CMR1    { return CMR1(r.U32.Bits(uint32(mask))) }
func (r *RCMR1) StoreBits(mask, b CMR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMR1) SetBits(mask CMR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RCMR1) ClearBits(mask CMR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCMR1) Load() CMR1             { return CMR1(r.U32.Load()) }
func (r *RCMR1) Store(b CMR1)           { r.U32.Store(uint32(b)) }

func (r *RCMR1) AtomicStoreBits(mask, b CMR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCMR1) AtomicSetBits(mask CMR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCMR1) AtomicClearBits(mask CMR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCMR1 struct{ mmio.UM32 }

func (rm RMCMR1) Load() CMR1   { return CMR1(rm.UM32.Load()) }
func (rm RMCMR1) Store(b CMR1) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PA() RMCMR1 {
	return RMCMR1{mmio.UM32{&p.CMR1.U32, uint32(PA)}}
}

type CICR1 uint32

func (b CICR1) Field(mask CICR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CICR1) J(v int) CICR1 {
	return CICR1(bits.MakeField32(v, uint32(mask)))
}

type RCICR1 struct{ mmio.U32 }

func (r *RCICR1) Bits(mask CICR1) CICR1   { return CICR1(r.U32.Bits(uint32(mask))) }
func (r *RCICR1) StoreBits(mask, b CICR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR1) SetBits(mask CICR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RCICR1) ClearBits(mask CICR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR1) Load() CICR1             { return CICR1(r.U32.Load()) }
func (r *RCICR1) Store(b CICR1)           { r.U32.Store(uint32(b)) }

func (r *RCICR1) AtomicStoreBits(mask, b CICR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCICR1) AtomicSetBits(mask CICR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCICR1) AtomicClearBits(mask CICR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCICR1 struct{ mmio.UM32 }

func (rm RMCICR1) Load() CICR1   { return CICR1(rm.UM32.Load()) }
func (rm RMCICR1) Store(b CICR1) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PA() RMCICR1 {
	return RMCICR1{mmio.UM32{&p.CICR1.U32, uint32(PA)}}
}

type ASMR2 uint32

func (b ASMR2) Field(mask ASMR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ASMR2) J(v int) ASMR2 {
	return ASMR2(bits.MakeField32(v, uint32(mask)))
}

type RASMR2 struct{ mmio.U32 }

func (r *RASMR2) Bits(mask ASMR2) ASMR2   { return ASMR2(r.U32.Bits(uint32(mask))) }
func (r *RASMR2) StoreBits(mask, b ASMR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RASMR2) SetBits(mask ASMR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RASMR2) ClearBits(mask ASMR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RASMR2) Load() ASMR2             { return ASMR2(r.U32.Load()) }
func (r *RASMR2) Store(b ASMR2)           { r.U32.Store(uint32(b)) }

func (r *RASMR2) AtomicStoreBits(mask, b ASMR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RASMR2) AtomicSetBits(mask ASMR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RASMR2) AtomicClearBits(mask ASMR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMASMR2 struct{ mmio.UM32 }

func (rm RMASMR2) Load() ASMR2   { return ASMR2(rm.UM32.Load()) }
func (rm RMASMR2) Store(b ASMR2) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PB() RMASMR2 {
	return RMASMR2{mmio.UM32{&p.ASMR2.U32, uint32(PB)}}
}

type CMR2 uint32

func (b CMR2) Field(mask CMR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CMR2) J(v int) CMR2 {
	return CMR2(bits.MakeField32(v, uint32(mask)))
}

type RCMR2 struct{ mmio.U32 }

func (r *RCMR2) Bits(mask CMR2) CMR2    { return CMR2(r.U32.Bits(uint32(mask))) }
func (r *RCMR2) StoreBits(mask, b CMR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMR2) SetBits(mask CMR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RCMR2) ClearBits(mask CMR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCMR2) Load() CMR2             { return CMR2(r.U32.Load()) }
func (r *RCMR2) Store(b CMR2)           { r.U32.Store(uint32(b)) }

func (r *RCMR2) AtomicStoreBits(mask, b CMR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCMR2) AtomicSetBits(mask CMR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCMR2) AtomicClearBits(mask CMR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCMR2 struct{ mmio.UM32 }

func (rm RMCMR2) Load() CMR2   { return CMR2(rm.UM32.Load()) }
func (rm RMCMR2) Store(b CMR2) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PB() RMCMR2 {
	return RMCMR2{mmio.UM32{&p.CMR2.U32, uint32(PB)}}
}

type CICR2 uint32

func (b CICR2) Field(mask CICR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CICR2) J(v int) CICR2 {
	return CICR2(bits.MakeField32(v, uint32(mask)))
}

type RCICR2 struct{ mmio.U32 }

func (r *RCICR2) Bits(mask CICR2) CICR2   { return CICR2(r.U32.Bits(uint32(mask))) }
func (r *RCICR2) StoreBits(mask, b CICR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR2) SetBits(mask CICR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RCICR2) ClearBits(mask CICR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR2) Load() CICR2             { return CICR2(r.U32.Load()) }
func (r *RCICR2) Store(b CICR2)           { r.U32.Store(uint32(b)) }

func (r *RCICR2) AtomicStoreBits(mask, b CICR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCICR2) AtomicSetBits(mask CICR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCICR2) AtomicClearBits(mask CICR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCICR2 struct{ mmio.UM32 }

func (rm RMCICR2) Load() CICR2   { return CICR2(rm.UM32.Load()) }
func (rm RMCICR2) Store(b CICR2) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PB() RMCICR2 {
	return RMCICR2{mmio.UM32{&p.CICR2.U32, uint32(PB)}}
}

type ASMR3 uint32

func (b ASMR3) Field(mask ASMR3) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ASMR3) J(v int) ASMR3 {
	return ASMR3(bits.MakeField32(v, uint32(mask)))
}

type RASMR3 struct{ mmio.U32 }

func (r *RASMR3) Bits(mask ASMR3) ASMR3   { return ASMR3(r.U32.Bits(uint32(mask))) }
func (r *RASMR3) StoreBits(mask, b ASMR3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RASMR3) SetBits(mask ASMR3)      { r.U32.SetBits(uint32(mask)) }
func (r *RASMR3) ClearBits(mask ASMR3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RASMR3) Load() ASMR3             { return ASMR3(r.U32.Load()) }
func (r *RASMR3) Store(b ASMR3)           { r.U32.Store(uint32(b)) }

func (r *RASMR3) AtomicStoreBits(mask, b ASMR3) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RASMR3) AtomicSetBits(mask ASMR3)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RASMR3) AtomicClearBits(mask ASMR3)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMASMR3 struct{ mmio.UM32 }

func (rm RMASMR3) Load() ASMR3   { return ASMR3(rm.UM32.Load()) }
func (rm RMASMR3) Store(b ASMR3) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PC() RMASMR3 {
	return RMASMR3{mmio.UM32{&p.ASMR3.U32, uint32(PC)}}
}

type CMR3 uint32

func (b CMR3) Field(mask CMR3) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CMR3) J(v int) CMR3 {
	return CMR3(bits.MakeField32(v, uint32(mask)))
}

type RCMR3 struct{ mmio.U32 }

func (r *RCMR3) Bits(mask CMR3) CMR3    { return CMR3(r.U32.Bits(uint32(mask))) }
func (r *RCMR3) StoreBits(mask, b CMR3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMR3) SetBits(mask CMR3)      { r.U32.SetBits(uint32(mask)) }
func (r *RCMR3) ClearBits(mask CMR3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCMR3) Load() CMR3             { return CMR3(r.U32.Load()) }
func (r *RCMR3) Store(b CMR3)           { r.U32.Store(uint32(b)) }

func (r *RCMR3) AtomicStoreBits(mask, b CMR3) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCMR3) AtomicSetBits(mask CMR3)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCMR3) AtomicClearBits(mask CMR3)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCMR3 struct{ mmio.UM32 }

func (rm RMCMR3) Load() CMR3   { return CMR3(rm.UM32.Load()) }
func (rm RMCMR3) Store(b CMR3) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PC() RMCMR3 {
	return RMCMR3{mmio.UM32{&p.CMR3.U32, uint32(PC)}}
}

type CICR3 uint32

func (b CICR3) Field(mask CICR3) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CICR3) J(v int) CICR3 {
	return CICR3(bits.MakeField32(v, uint32(mask)))
}

type RCICR3 struct{ mmio.U32 }

func (r *RCICR3) Bits(mask CICR3) CICR3   { return CICR3(r.U32.Bits(uint32(mask))) }
func (r *RCICR3) StoreBits(mask, b CICR3) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR3) SetBits(mask CICR3)      { r.U32.SetBits(uint32(mask)) }
func (r *RCICR3) ClearBits(mask CICR3)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR3) Load() CICR3             { return CICR3(r.U32.Load()) }
func (r *RCICR3) Store(b CICR3)           { r.U32.Store(uint32(b)) }

func (r *RCICR3) AtomicStoreBits(mask, b CICR3) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCICR3) AtomicSetBits(mask CICR3)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCICR3) AtomicClearBits(mask CICR3)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCICR3 struct{ mmio.UM32 }

func (rm RMCICR3) Load() CICR3   { return CICR3(rm.UM32.Load()) }
func (rm RMCICR3) Store(b CICR3) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PC() RMCICR3 {
	return RMCICR3{mmio.UM32{&p.CICR3.U32, uint32(PC)}}
}

type ASMR4 uint32

func (b ASMR4) Field(mask ASMR4) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ASMR4) J(v int) ASMR4 {
	return ASMR4(bits.MakeField32(v, uint32(mask)))
}

type RASMR4 struct{ mmio.U32 }

func (r *RASMR4) Bits(mask ASMR4) ASMR4   { return ASMR4(r.U32.Bits(uint32(mask))) }
func (r *RASMR4) StoreBits(mask, b ASMR4) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RASMR4) SetBits(mask ASMR4)      { r.U32.SetBits(uint32(mask)) }
func (r *RASMR4) ClearBits(mask ASMR4)    { r.U32.ClearBits(uint32(mask)) }
func (r *RASMR4) Load() ASMR4             { return ASMR4(r.U32.Load()) }
func (r *RASMR4) Store(b ASMR4)           { r.U32.Store(uint32(b)) }

func (r *RASMR4) AtomicStoreBits(mask, b ASMR4) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RASMR4) AtomicSetBits(mask ASMR4)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RASMR4) AtomicClearBits(mask ASMR4)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMASMR4 struct{ mmio.UM32 }

func (rm RMASMR4) Load() ASMR4   { return ASMR4(rm.UM32.Load()) }
func (rm RMASMR4) Store(b ASMR4) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PF() RMASMR4 {
	return RMASMR4{mmio.UM32{&p.ASMR4.U32, uint32(PF)}}
}

type CMR4 uint32

func (b CMR4) Field(mask CMR4) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CMR4) J(v int) CMR4 {
	return CMR4(bits.MakeField32(v, uint32(mask)))
}

type RCMR4 struct{ mmio.U32 }

func (r *RCMR4) Bits(mask CMR4) CMR4    { return CMR4(r.U32.Bits(uint32(mask))) }
func (r *RCMR4) StoreBits(mask, b CMR4) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMR4) SetBits(mask CMR4)      { r.U32.SetBits(uint32(mask)) }
func (r *RCMR4) ClearBits(mask CMR4)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCMR4) Load() CMR4             { return CMR4(r.U32.Load()) }
func (r *RCMR4) Store(b CMR4)           { r.U32.Store(uint32(b)) }

func (r *RCMR4) AtomicStoreBits(mask, b CMR4) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCMR4) AtomicSetBits(mask CMR4)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCMR4) AtomicClearBits(mask CMR4)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCMR4 struct{ mmio.UM32 }

func (rm RMCMR4) Load() CMR4   { return CMR4(rm.UM32.Load()) }
func (rm RMCMR4) Store(b CMR4) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PF() RMCMR4 {
	return RMCMR4{mmio.UM32{&p.CMR4.U32, uint32(PF)}}
}

type CICR4 uint32

func (b CICR4) Field(mask CICR4) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CICR4) J(v int) CICR4 {
	return CICR4(bits.MakeField32(v, uint32(mask)))
}

type RCICR4 struct{ mmio.U32 }

func (r *RCICR4) Bits(mask CICR4) CICR4   { return CICR4(r.U32.Bits(uint32(mask))) }
func (r *RCICR4) StoreBits(mask, b CICR4) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR4) SetBits(mask CICR4)      { r.U32.SetBits(uint32(mask)) }
func (r *RCICR4) ClearBits(mask CICR4)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR4) Load() CICR4             { return CICR4(r.U32.Load()) }
func (r *RCICR4) Store(b CICR4)           { r.U32.Store(uint32(b)) }

func (r *RCICR4) AtomicStoreBits(mask, b CICR4) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCICR4) AtomicSetBits(mask CICR4)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCICR4) AtomicClearBits(mask CICR4)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCICR4 struct{ mmio.UM32 }

func (rm RMCICR4) Load() CICR4   { return CICR4(rm.UM32.Load()) }
func (rm RMCICR4) Store(b CICR4) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PF() RMCICR4 {
	return RMCICR4{mmio.UM32{&p.CICR4.U32, uint32(PF)}}
}

type ASMR5 uint32

func (b ASMR5) Field(mask ASMR5) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ASMR5) J(v int) ASMR5 {
	return ASMR5(bits.MakeField32(v, uint32(mask)))
}

type RASMR5 struct{ mmio.U32 }

func (r *RASMR5) Bits(mask ASMR5) ASMR5   { return ASMR5(r.U32.Bits(uint32(mask))) }
func (r *RASMR5) StoreBits(mask, b ASMR5) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RASMR5) SetBits(mask ASMR5)      { r.U32.SetBits(uint32(mask)) }
func (r *RASMR5) ClearBits(mask ASMR5)    { r.U32.ClearBits(uint32(mask)) }
func (r *RASMR5) Load() ASMR5             { return ASMR5(r.U32.Load()) }
func (r *RASMR5) Store(b ASMR5)           { r.U32.Store(uint32(b)) }

func (r *RASMR5) AtomicStoreBits(mask, b ASMR5) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RASMR5) AtomicSetBits(mask ASMR5)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RASMR5) AtomicClearBits(mask ASMR5)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMASMR5 struct{ mmio.UM32 }

func (rm RMASMR5) Load() ASMR5   { return ASMR5(rm.UM32.Load()) }
func (rm RMASMR5) Store(b ASMR5) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PG() RMASMR5 {
	return RMASMR5{mmio.UM32{&p.ASMR5.U32, uint32(PG)}}
}

type CMR5 uint32

func (b CMR5) Field(mask CMR5) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CMR5) J(v int) CMR5 {
	return CMR5(bits.MakeField32(v, uint32(mask)))
}

type RCMR5 struct{ mmio.U32 }

func (r *RCMR5) Bits(mask CMR5) CMR5    { return CMR5(r.U32.Bits(uint32(mask))) }
func (r *RCMR5) StoreBits(mask, b CMR5) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMR5) SetBits(mask CMR5)      { r.U32.SetBits(uint32(mask)) }
func (r *RCMR5) ClearBits(mask CMR5)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCMR5) Load() CMR5             { return CMR5(r.U32.Load()) }
func (r *RCMR5) Store(b CMR5)           { r.U32.Store(uint32(b)) }

func (r *RCMR5) AtomicStoreBits(mask, b CMR5) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCMR5) AtomicSetBits(mask CMR5)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCMR5) AtomicClearBits(mask CMR5)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCMR5 struct{ mmio.UM32 }

func (rm RMCMR5) Load() CMR5   { return CMR5(rm.UM32.Load()) }
func (rm RMCMR5) Store(b CMR5) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PG() RMCMR5 {
	return RMCMR5{mmio.UM32{&p.CMR5.U32, uint32(PG)}}
}

type CICR5 uint32

func (b CICR5) Field(mask CICR5) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CICR5) J(v int) CICR5 {
	return CICR5(bits.MakeField32(v, uint32(mask)))
}

type RCICR5 struct{ mmio.U32 }

func (r *RCICR5) Bits(mask CICR5) CICR5   { return CICR5(r.U32.Bits(uint32(mask))) }
func (r *RCICR5) StoreBits(mask, b CICR5) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR5) SetBits(mask CICR5)      { r.U32.SetBits(uint32(mask)) }
func (r *RCICR5) ClearBits(mask CICR5)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR5) Load() CICR5             { return CICR5(r.U32.Load()) }
func (r *RCICR5) Store(b CICR5)           { r.U32.Store(uint32(b)) }

func (r *RCICR5) AtomicStoreBits(mask, b CICR5) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCICR5) AtomicSetBits(mask CICR5)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCICR5) AtomicClearBits(mask CICR5)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCICR5 struct{ mmio.UM32 }

func (rm RMCICR5) Load() CICR5   { return CICR5(rm.UM32.Load()) }
func (rm RMCICR5) Store(b CICR5) { rm.UM32.Store(uint32(b)) }

func (p *RI_Periph) PG() RMCICR5 {
	return RMCICR5{mmio.UM32{&p.CICR5.U32, uint32(PG)}}
}
