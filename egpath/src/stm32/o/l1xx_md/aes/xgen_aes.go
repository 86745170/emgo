package aes

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l1xx_md/mmap"
)

type AES_Periph struct {
	CR    CR
	SR    SR
	DINR  DINR
	DOUTR DOUTR
	KEYR0 KEYR0
	KEYR1 KEYR1
	KEYR2 KEYR2
	KEYR3 KEYR3
	IVR0  IVR0
	IVR1  IVR1
	IVR2  IVR2
	IVR3  IVR3
}

func (p *AES_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var AES = (*AES_Periph)(unsafe.Pointer(uintptr(mmap.AES_BASE)))

type CR_Bits uint32

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR_Bits) J(v int) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}

type CR struct{ mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.U32.Load()) }
func (r *CR) Store(b CR_Bits)           { r.U32.Store(uint32(b)) }

func (r *CR) AtomicStoreBits(mask, b CR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *CR) AtomicSetBits(mask CR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CR) AtomicClearBits(mask CR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type CR_Mask struct{ mmio.UM32 }

func (rm CR_Mask) Load() CR_Bits   { return CR_Bits(rm.UM32.Load()) }
func (rm CR_Mask) Store(b CR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *AES_Periph) EN() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(EN)}}
}

func (p *AES_Periph) DATATYPE() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(DATATYPE)}}
}

func (p *AES_Periph) MODE() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(MODE)}}
}

func (p *AES_Periph) CHMOD() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(CHMOD)}}
}

func (p *AES_Periph) CCFC() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(CCFC)}}
}

func (p *AES_Periph) ERRC() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(ERRC)}}
}

func (p *AES_Periph) CCIE() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(CCIE)}}
}

func (p *AES_Periph) ERRIE() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(ERRIE)}}
}

func (p *AES_Periph) DMAINEN() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(DMAINEN)}}
}

func (p *AES_Periph) DMAOUTEN() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(DMAOUTEN)}}
}

type SR_Bits uint32

func (b SR_Bits) Field(mask SR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SR_Bits) J(v int) SR_Bits {
	return SR_Bits(bits.Make32(v, uint32(mask)))
}

type SR struct{ mmio.U32 }

func (r *SR) Bits(mask SR_Bits) SR_Bits { return SR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SR) StoreBits(mask, b SR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SR) SetBits(mask SR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *SR) ClearBits(mask SR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *SR) Load() SR_Bits             { return SR_Bits(r.U32.Load()) }
func (r *SR) Store(b SR_Bits)           { r.U32.Store(uint32(b)) }

func (r *SR) AtomicStoreBits(mask, b SR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *SR) AtomicSetBits(mask SR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *SR) AtomicClearBits(mask SR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type SR_Mask struct{ mmio.UM32 }

func (rm SR_Mask) Load() SR_Bits   { return SR_Bits(rm.UM32.Load()) }
func (rm SR_Mask) Store(b SR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *AES_Periph) CCF() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(CCF)}}
}

func (p *AES_Periph) RDERR() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(RDERR)}}
}

func (p *AES_Periph) WRERR() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(WRERR)}}
}

type DINR_Bits uint32

func (b DINR_Bits) Field(mask DINR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DINR_Bits) J(v int) DINR_Bits {
	return DINR_Bits(bits.Make32(v, uint32(mask)))
}

type DINR struct{ mmio.U32 }

func (r *DINR) Bits(mask DINR_Bits) DINR_Bits { return DINR_Bits(r.U32.Bits(uint32(mask))) }
func (r *DINR) StoreBits(mask, b DINR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DINR) SetBits(mask DINR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *DINR) ClearBits(mask DINR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *DINR) Load() DINR_Bits               { return DINR_Bits(r.U32.Load()) }
func (r *DINR) Store(b DINR_Bits)             { r.U32.Store(uint32(b)) }

func (r *DINR) AtomicStoreBits(mask, b DINR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *DINR) AtomicSetBits(mask DINR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *DINR) AtomicClearBits(mask DINR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type DINR_Mask struct{ mmio.UM32 }

func (rm DINR_Mask) Load() DINR_Bits   { return DINR_Bits(rm.UM32.Load()) }
func (rm DINR_Mask) Store(b DINR_Bits) { rm.UM32.Store(uint32(b)) }

type DOUTR_Bits uint32

func (b DOUTR_Bits) Field(mask DOUTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DOUTR_Bits) J(v int) DOUTR_Bits {
	return DOUTR_Bits(bits.Make32(v, uint32(mask)))
}

type DOUTR struct{ mmio.U32 }

func (r *DOUTR) Bits(mask DOUTR_Bits) DOUTR_Bits { return DOUTR_Bits(r.U32.Bits(uint32(mask))) }
func (r *DOUTR) StoreBits(mask, b DOUTR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DOUTR) SetBits(mask DOUTR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *DOUTR) ClearBits(mask DOUTR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *DOUTR) Load() DOUTR_Bits                { return DOUTR_Bits(r.U32.Load()) }
func (r *DOUTR) Store(b DOUTR_Bits)              { r.U32.Store(uint32(b)) }

func (r *DOUTR) AtomicStoreBits(mask, b DOUTR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *DOUTR) AtomicSetBits(mask DOUTR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *DOUTR) AtomicClearBits(mask DOUTR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type DOUTR_Mask struct{ mmio.UM32 }

func (rm DOUTR_Mask) Load() DOUTR_Bits   { return DOUTR_Bits(rm.UM32.Load()) }
func (rm DOUTR_Mask) Store(b DOUTR_Bits) { rm.UM32.Store(uint32(b)) }

type KEYR0_Bits uint32

func (b KEYR0_Bits) Field(mask KEYR0_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask KEYR0_Bits) J(v int) KEYR0_Bits {
	return KEYR0_Bits(bits.Make32(v, uint32(mask)))
}

type KEYR0 struct{ mmio.U32 }

func (r *KEYR0) Bits(mask KEYR0_Bits) KEYR0_Bits { return KEYR0_Bits(r.U32.Bits(uint32(mask))) }
func (r *KEYR0) StoreBits(mask, b KEYR0_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *KEYR0) SetBits(mask KEYR0_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *KEYR0) ClearBits(mask KEYR0_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *KEYR0) Load() KEYR0_Bits                { return KEYR0_Bits(r.U32.Load()) }
func (r *KEYR0) Store(b KEYR0_Bits)              { r.U32.Store(uint32(b)) }

func (r *KEYR0) AtomicStoreBits(mask, b KEYR0_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *KEYR0) AtomicSetBits(mask KEYR0_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *KEYR0) AtomicClearBits(mask KEYR0_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type KEYR0_Mask struct{ mmio.UM32 }

func (rm KEYR0_Mask) Load() KEYR0_Bits   { return KEYR0_Bits(rm.UM32.Load()) }
func (rm KEYR0_Mask) Store(b KEYR0_Bits) { rm.UM32.Store(uint32(b)) }

type KEYR1_Bits uint32

func (b KEYR1_Bits) Field(mask KEYR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask KEYR1_Bits) J(v int) KEYR1_Bits {
	return KEYR1_Bits(bits.Make32(v, uint32(mask)))
}

type KEYR1 struct{ mmio.U32 }

func (r *KEYR1) Bits(mask KEYR1_Bits) KEYR1_Bits { return KEYR1_Bits(r.U32.Bits(uint32(mask))) }
func (r *KEYR1) StoreBits(mask, b KEYR1_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *KEYR1) SetBits(mask KEYR1_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *KEYR1) ClearBits(mask KEYR1_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *KEYR1) Load() KEYR1_Bits                { return KEYR1_Bits(r.U32.Load()) }
func (r *KEYR1) Store(b KEYR1_Bits)              { r.U32.Store(uint32(b)) }

func (r *KEYR1) AtomicStoreBits(mask, b KEYR1_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *KEYR1) AtomicSetBits(mask KEYR1_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *KEYR1) AtomicClearBits(mask KEYR1_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type KEYR1_Mask struct{ mmio.UM32 }

func (rm KEYR1_Mask) Load() KEYR1_Bits   { return KEYR1_Bits(rm.UM32.Load()) }
func (rm KEYR1_Mask) Store(b KEYR1_Bits) { rm.UM32.Store(uint32(b)) }

type KEYR2_Bits uint32

func (b KEYR2_Bits) Field(mask KEYR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask KEYR2_Bits) J(v int) KEYR2_Bits {
	return KEYR2_Bits(bits.Make32(v, uint32(mask)))
}

type KEYR2 struct{ mmio.U32 }

func (r *KEYR2) Bits(mask KEYR2_Bits) KEYR2_Bits { return KEYR2_Bits(r.U32.Bits(uint32(mask))) }
func (r *KEYR2) StoreBits(mask, b KEYR2_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *KEYR2) SetBits(mask KEYR2_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *KEYR2) ClearBits(mask KEYR2_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *KEYR2) Load() KEYR2_Bits                { return KEYR2_Bits(r.U32.Load()) }
func (r *KEYR2) Store(b KEYR2_Bits)              { r.U32.Store(uint32(b)) }

func (r *KEYR2) AtomicStoreBits(mask, b KEYR2_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *KEYR2) AtomicSetBits(mask KEYR2_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *KEYR2) AtomicClearBits(mask KEYR2_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type KEYR2_Mask struct{ mmio.UM32 }

func (rm KEYR2_Mask) Load() KEYR2_Bits   { return KEYR2_Bits(rm.UM32.Load()) }
func (rm KEYR2_Mask) Store(b KEYR2_Bits) { rm.UM32.Store(uint32(b)) }

type KEYR3_Bits uint32

func (b KEYR3_Bits) Field(mask KEYR3_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask KEYR3_Bits) J(v int) KEYR3_Bits {
	return KEYR3_Bits(bits.Make32(v, uint32(mask)))
}

type KEYR3 struct{ mmio.U32 }

func (r *KEYR3) Bits(mask KEYR3_Bits) KEYR3_Bits { return KEYR3_Bits(r.U32.Bits(uint32(mask))) }
func (r *KEYR3) StoreBits(mask, b KEYR3_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *KEYR3) SetBits(mask KEYR3_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *KEYR3) ClearBits(mask KEYR3_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *KEYR3) Load() KEYR3_Bits                { return KEYR3_Bits(r.U32.Load()) }
func (r *KEYR3) Store(b KEYR3_Bits)              { r.U32.Store(uint32(b)) }

func (r *KEYR3) AtomicStoreBits(mask, b KEYR3_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *KEYR3) AtomicSetBits(mask KEYR3_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *KEYR3) AtomicClearBits(mask KEYR3_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type KEYR3_Mask struct{ mmio.UM32 }

func (rm KEYR3_Mask) Load() KEYR3_Bits   { return KEYR3_Bits(rm.UM32.Load()) }
func (rm KEYR3_Mask) Store(b KEYR3_Bits) { rm.UM32.Store(uint32(b)) }

type IVR0_Bits uint32

func (b IVR0_Bits) Field(mask IVR0_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IVR0_Bits) J(v int) IVR0_Bits {
	return IVR0_Bits(bits.Make32(v, uint32(mask)))
}

type IVR0 struct{ mmio.U32 }

func (r *IVR0) Bits(mask IVR0_Bits) IVR0_Bits { return IVR0_Bits(r.U32.Bits(uint32(mask))) }
func (r *IVR0) StoreBits(mask, b IVR0_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *IVR0) SetBits(mask IVR0_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *IVR0) ClearBits(mask IVR0_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *IVR0) Load() IVR0_Bits               { return IVR0_Bits(r.U32.Load()) }
func (r *IVR0) Store(b IVR0_Bits)             { r.U32.Store(uint32(b)) }

func (r *IVR0) AtomicStoreBits(mask, b IVR0_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *IVR0) AtomicSetBits(mask IVR0_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *IVR0) AtomicClearBits(mask IVR0_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type IVR0_Mask struct{ mmio.UM32 }

func (rm IVR0_Mask) Load() IVR0_Bits   { return IVR0_Bits(rm.UM32.Load()) }
func (rm IVR0_Mask) Store(b IVR0_Bits) { rm.UM32.Store(uint32(b)) }

type IVR1_Bits uint32

func (b IVR1_Bits) Field(mask IVR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IVR1_Bits) J(v int) IVR1_Bits {
	return IVR1_Bits(bits.Make32(v, uint32(mask)))
}

type IVR1 struct{ mmio.U32 }

func (r *IVR1) Bits(mask IVR1_Bits) IVR1_Bits { return IVR1_Bits(r.U32.Bits(uint32(mask))) }
func (r *IVR1) StoreBits(mask, b IVR1_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *IVR1) SetBits(mask IVR1_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *IVR1) ClearBits(mask IVR1_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *IVR1) Load() IVR1_Bits               { return IVR1_Bits(r.U32.Load()) }
func (r *IVR1) Store(b IVR1_Bits)             { r.U32.Store(uint32(b)) }

func (r *IVR1) AtomicStoreBits(mask, b IVR1_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *IVR1) AtomicSetBits(mask IVR1_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *IVR1) AtomicClearBits(mask IVR1_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type IVR1_Mask struct{ mmio.UM32 }

func (rm IVR1_Mask) Load() IVR1_Bits   { return IVR1_Bits(rm.UM32.Load()) }
func (rm IVR1_Mask) Store(b IVR1_Bits) { rm.UM32.Store(uint32(b)) }

type IVR2_Bits uint32

func (b IVR2_Bits) Field(mask IVR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IVR2_Bits) J(v int) IVR2_Bits {
	return IVR2_Bits(bits.Make32(v, uint32(mask)))
}

type IVR2 struct{ mmio.U32 }

func (r *IVR2) Bits(mask IVR2_Bits) IVR2_Bits { return IVR2_Bits(r.U32.Bits(uint32(mask))) }
func (r *IVR2) StoreBits(mask, b IVR2_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *IVR2) SetBits(mask IVR2_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *IVR2) ClearBits(mask IVR2_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *IVR2) Load() IVR2_Bits               { return IVR2_Bits(r.U32.Load()) }
func (r *IVR2) Store(b IVR2_Bits)             { r.U32.Store(uint32(b)) }

func (r *IVR2) AtomicStoreBits(mask, b IVR2_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *IVR2) AtomicSetBits(mask IVR2_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *IVR2) AtomicClearBits(mask IVR2_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type IVR2_Mask struct{ mmio.UM32 }

func (rm IVR2_Mask) Load() IVR2_Bits   { return IVR2_Bits(rm.UM32.Load()) }
func (rm IVR2_Mask) Store(b IVR2_Bits) { rm.UM32.Store(uint32(b)) }

type IVR3_Bits uint32

func (b IVR3_Bits) Field(mask IVR3_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IVR3_Bits) J(v int) IVR3_Bits {
	return IVR3_Bits(bits.Make32(v, uint32(mask)))
}

type IVR3 struct{ mmio.U32 }

func (r *IVR3) Bits(mask IVR3_Bits) IVR3_Bits { return IVR3_Bits(r.U32.Bits(uint32(mask))) }
func (r *IVR3) StoreBits(mask, b IVR3_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *IVR3) SetBits(mask IVR3_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *IVR3) ClearBits(mask IVR3_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *IVR3) Load() IVR3_Bits               { return IVR3_Bits(r.U32.Load()) }
func (r *IVR3) Store(b IVR3_Bits)             { r.U32.Store(uint32(b)) }

func (r *IVR3) AtomicStoreBits(mask, b IVR3_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *IVR3) AtomicSetBits(mask IVR3_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *IVR3) AtomicClearBits(mask IVR3_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type IVR3_Mask struct{ mmio.UM32 }

func (rm IVR3_Mask) Load() IVR3_Bits   { return IVR3_Bits(rm.UM32.Load()) }
func (rm IVR3_Mask) Store(b IVR3_Bits) { rm.UM32.Store(uint32(b)) }
