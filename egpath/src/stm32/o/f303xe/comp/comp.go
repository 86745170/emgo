// Peripheral: COMP_Periph  Analog Comparators.
// Instances:
//  COMP   mmap.COMP_BASE
//  COMP1  mmap.COMP1_BASE
//  COMP2  mmap.COMP2_BASE
//  COMP3  mmap.COMP3_BASE
//  COMP4  mmap.COMP4_BASE
//  COMP5  mmap.COMP5_BASE
//  COMP6  mmap.COMP6_BASE
//  COMP7  mmap.COMP7_BASE
// Registers:
//  0x00 32  CSR Comparator control Status register.
// Import:
//  stm32/o/f303xe/mmap
package comp

// DO NOT EDIT THIS FILE. GENERATED BY stm32xgen.

const (
	COMPxEN         CSR_Bits = 0x01 << 0  //+ COMPx enable.
	COMP1SW1        CSR_Bits = 0x01 << 1  //+ COMP1 SW1 switch control.
	COMPxMODE       CSR_Bits = 0x03 << 2  //+ COMPx power mode.
	COMPxMODE_0     CSR_Bits = 0x01 << 2  //  COMPx power mode bit 0.
	COMPxMODE_1     CSR_Bits = 0x02 << 2  //  COMPx power mode bit 1.
	COMPxINSEL      CSR_Bits = 0x07 << 4  //+ COMPx inverting input select.
	COMPxINSEL_0    CSR_Bits = 0x01 << 4  //  COMPx inverting input select bit 0.
	COMPxINSEL_1    CSR_Bits = 0x02 << 4  //  COMPx inverting input select bit 1.
	COMPxINSEL_2    CSR_Bits = 0x04 << 4  //  COMPx inverting input select bit 2.
	COMPxNONINSEL   CSR_Bits = 0x01 << 7  //+ COMPx non inverting input select.
	COMPxWNDWEN     CSR_Bits = 0x01 << 9  //+ COMPx window mode enable.
	COMPxOUTSEL     CSR_Bits = 0x0F << 10 //+ COMPx output select.
	COMPxOUTSEL_0   CSR_Bits = 0x01 << 10 //  COMPx output select bit 0.
	COMPxOUTSEL_1   CSR_Bits = 0x02 << 10 //  COMPx output select bit 1.
	COMPxOUTSEL_2   CSR_Bits = 0x04 << 10 //  COMPx output select bit 2.
	COMPxOUTSEL_3   CSR_Bits = 0x08 << 10 //  COMPx output select bit 3.
	COMPxPOL        CSR_Bits = 0x01 << 15 //+ COMPx output polarity.
	COMPxHYST       CSR_Bits = 0x03 << 16 //+ COMPx hysteresis.
	COMPxHYST_0     CSR_Bits = 0x01 << 16 //  COMPx hysteresis bit 0.
	COMPxHYST_1     CSR_Bits = 0x02 << 16 //  COMPx hysteresis bit 1.
	COMPxBLANKING   CSR_Bits = 0x03 << 18 //+ COMPx blanking.
	COMPxBLANKING_0 CSR_Bits = 0x01 << 18 //  COMPx blanking bit 0.
	COMPxBLANKING_1 CSR_Bits = 0x02 << 18 //  COMPx blanking bit 1.
	COMPxBLANKING_2 CSR_Bits = 0x01 << 20 //+ COMPx blanking bit 2.
	COMPxINSEL_3    CSR_Bits = 0x01 << 22 //+ COMPx inverting input select bit 3.
	COMPxOUT        CSR_Bits = 0x01 << 30 //+ COMPx output level.
	COMPxLOCK       CSR_Bits = 0x01 << 31 //+ COMPx lock.
)

const (
	COMPxENn         = 0
	COMP1SW1n        = 1
	COMPxMODEn       = 2
	COMPxINSELn      = 4
	COMPxNONINSELn   = 7
	COMPxWNDWENn     = 9
	COMPxOUTSELn     = 10
	COMPxPOLn        = 15
	COMPxHYSTn       = 16
	COMPxBLANKINGn   = 18
	COMPxBLANKING_2n = 20
	COMPxINSEL_3n    = 22
	COMPxOUTn        = 30
	COMPxLOCKn       = 31
)
