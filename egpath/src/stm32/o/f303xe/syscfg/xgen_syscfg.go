package syscfg

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f303xe/mmap"
)

type SYSCFG_Periph struct {
	CFGR1      CFGR1
	RCR        RCR
	EXTICR     [4]EXTICR
	CFGR2      CFGR2
	RESERVED0  RESERVED0
	RESERVED1  RESERVED1
	RESERVED2  RESERVED2
	RESERVED4  RESERVED4
	RESERVED5  RESERVED5
	RESERVED6  RESERVED6
	RESERVED7  RESERVED7
	RESERVED8  RESERVED8
	RESERVED9  RESERVED9
	RESERVED10 RESERVED10
	RESERVED11 RESERVED11
	CFGR4      CFGR4
	RESERVED13 RESERVED13
	CFGR3      CFGR3
}

func (p *SYSCFG_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var SYSCFG = (*SYSCFG_Periph)(unsafe.Pointer(uintptr(mmap.SYSCFG_BASE)))

type CFGR1_Bits uint32

func (b CFGR1_Bits) Field(mask CFGR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR1_Bits) J(v int) CFGR1_Bits {
	return CFGR1_Bits(bits.Make32(v, uint32(mask)))
}

type CFGR1 struct{ mmio.U32 }

func (r *CFGR1) Bits(mask CFGR1_Bits) CFGR1_Bits { return CFGR1_Bits(r.U32.Bits(uint32(mask))) }
func (r *CFGR1) StoreBits(mask, b CFGR1_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CFGR1) SetBits(mask CFGR1_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *CFGR1) ClearBits(mask CFGR1_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *CFGR1) Load() CFGR1_Bits                { return CFGR1_Bits(r.U32.Load()) }
func (r *CFGR1) Store(b CFGR1_Bits)              { r.U32.Store(uint32(b)) }

func (r *CFGR1) AtomicSetBits(mask CFGR1_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CFGR1) AtomicClearBits(mask CFGR1_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CFGR1_Mask struct{ mmio.UM32 }

func (rm CFGR1_Mask) Load() CFGR1_Bits   { return CFGR1_Bits(rm.UM32.Load()) }
func (rm CFGR1_Mask) Store(b CFGR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SYSCFG_Periph) MEM_MODE() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(MEM_MODE)}}
}

func (p *SYSCFG_Periph) USB_IT_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(USB_IT_RMP)}}
}

func (p *SYSCFG_Periph) TIM1_ITR3_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(TIM1_ITR3_RMP)}}
}

func (p *SYSCFG_Periph) DAC1_TRIG1_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(DAC1_TRIG1_RMP)}}
}

func (p *SYSCFG_Periph) ADC24_DMA_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(ADC24_DMA_RMP)}}
}

func (p *SYSCFG_Periph) TIM16_DMA_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(TIM16_DMA_RMP)}}
}

func (p *SYSCFG_Periph) TIM17_DMA_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(TIM17_DMA_RMP)}}
}

func (p *SYSCFG_Periph) TIM6DAC1Ch1_DMA_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(TIM6DAC1Ch1_DMA_RMP)}}
}

func (p *SYSCFG_Periph) TIM7DAC1Ch2_DMA_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(TIM7DAC1Ch2_DMA_RMP)}}
}

func (p *SYSCFG_Periph) DAC2Ch1_DMA_RMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(DAC2Ch1_DMA_RMP)}}
}

func (p *SYSCFG_Periph) I2C_PB6_FMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB6_FMP)}}
}

func (p *SYSCFG_Periph) I2C_PB7_FMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB7_FMP)}}
}

func (p *SYSCFG_Periph) I2C_PB8_FMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB8_FMP)}}
}

func (p *SYSCFG_Periph) I2C_PB9_FMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(I2C_PB9_FMP)}}
}

func (p *SYSCFG_Periph) I2C1_FMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(I2C1_FMP)}}
}

func (p *SYSCFG_Periph) I2C2_FMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(I2C2_FMP)}}
}

func (p *SYSCFG_Periph) ENCODER_MODE() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(ENCODER_MODE)}}
}

func (p *SYSCFG_Periph) I2C3_FMP() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(I2C3_FMP)}}
}

func (p *SYSCFG_Periph) FPU_IE() CFGR1_Mask {
	return CFGR1_Mask{mmio.UM32{&p.CFGR1.U32, uint32(FPU_IE)}}
}

type RCR_Bits uint32

func (b RCR_Bits) Field(mask RCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RCR_Bits) J(v int) RCR_Bits {
	return RCR_Bits(bits.Make32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask RCR_Bits) RCR_Bits { return RCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b RCR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask RCR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask RCR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() RCR_Bits              { return RCR_Bits(r.U32.Load()) }
func (r *RCR) Store(b RCR_Bits)            { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicSetBits(mask RCR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask RCR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RCR_Mask struct{ mmio.UM32 }

func (rm RCR_Mask) Load() RCR_Bits   { return RCR_Bits(rm.UM32.Load()) }
func (rm RCR_Mask) Store(b RCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SYSCFG_Periph) PAGE0() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE0)}}
}

func (p *SYSCFG_Periph) PAGE1() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE1)}}
}

func (p *SYSCFG_Periph) PAGE2() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE2)}}
}

func (p *SYSCFG_Periph) PAGE3() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE3)}}
}

func (p *SYSCFG_Periph) PAGE4() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE4)}}
}

func (p *SYSCFG_Periph) PAGE5() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE5)}}
}

func (p *SYSCFG_Periph) PAGE6() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE6)}}
}

func (p *SYSCFG_Periph) PAGE7() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE7)}}
}

func (p *SYSCFG_Periph) PAGE8() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE8)}}
}

func (p *SYSCFG_Periph) PAGE9() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE9)}}
}

func (p *SYSCFG_Periph) PAGE10() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE10)}}
}

func (p *SYSCFG_Periph) PAGE11() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE11)}}
}

func (p *SYSCFG_Periph) PAGE12() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE12)}}
}

func (p *SYSCFG_Periph) PAGE13() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE13)}}
}

func (p *SYSCFG_Periph) PAGE14() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE14)}}
}

func (p *SYSCFG_Periph) PAGE15() RCR_Mask {
	return RCR_Mask{mmio.UM32{&p.RCR.U32, uint32(PAGE15)}}
}

type EXTICR_Bits uint32

func (b EXTICR_Bits) Field(mask EXTICR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EXTICR_Bits) J(v int) EXTICR_Bits {
	return EXTICR_Bits(bits.Make32(v, uint32(mask)))
}

type EXTICR struct{ mmio.U32 }

func (r *EXTICR) Bits(mask EXTICR_Bits) EXTICR_Bits { return EXTICR_Bits(r.U32.Bits(uint32(mask))) }
func (r *EXTICR) StoreBits(mask, b EXTICR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *EXTICR) SetBits(mask EXTICR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *EXTICR) ClearBits(mask EXTICR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *EXTICR) Load() EXTICR_Bits                 { return EXTICR_Bits(r.U32.Load()) }
func (r *EXTICR) Store(b EXTICR_Bits)               { r.U32.Store(uint32(b)) }

func (r *EXTICR) AtomicSetBits(mask EXTICR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *EXTICR) AtomicClearBits(mask EXTICR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type EXTICR_Mask struct{ mmio.UM32 }

func (rm EXTICR_Mask) Load() EXTICR_Bits   { return EXTICR_Bits(rm.UM32.Load()) }
func (rm EXTICR_Mask) Store(b EXTICR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SYSCFG_Periph) EXTI0(n int) EXTICR_Mask {
	return EXTICR_Mask{mmio.UM32{&p.EXTICR[n].U32, uint32(EXTI0)}}
}

func (p *SYSCFG_Periph) EXTI1(n int) EXTICR_Mask {
	return EXTICR_Mask{mmio.UM32{&p.EXTICR[n].U32, uint32(EXTI1)}}
}

func (p *SYSCFG_Periph) EXTI2(n int) EXTICR_Mask {
	return EXTICR_Mask{mmio.UM32{&p.EXTICR[n].U32, uint32(EXTI2)}}
}

func (p *SYSCFG_Periph) EXTI3(n int) EXTICR_Mask {
	return EXTICR_Mask{mmio.UM32{&p.EXTICR[n].U32, uint32(EXTI3)}}
}

type CFGR2_Bits uint32

func (b CFGR2_Bits) Field(mask CFGR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR2_Bits) J(v int) CFGR2_Bits {
	return CFGR2_Bits(bits.Make32(v, uint32(mask)))
}

type CFGR2 struct{ mmio.U32 }

func (r *CFGR2) Bits(mask CFGR2_Bits) CFGR2_Bits { return CFGR2_Bits(r.U32.Bits(uint32(mask))) }
func (r *CFGR2) StoreBits(mask, b CFGR2_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CFGR2) SetBits(mask CFGR2_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *CFGR2) ClearBits(mask CFGR2_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *CFGR2) Load() CFGR2_Bits                { return CFGR2_Bits(r.U32.Load()) }
func (r *CFGR2) Store(b CFGR2_Bits)              { r.U32.Store(uint32(b)) }

func (r *CFGR2) AtomicSetBits(mask CFGR2_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CFGR2) AtomicClearBits(mask CFGR2_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CFGR2_Mask struct{ mmio.UM32 }

func (rm CFGR2_Mask) Load() CFGR2_Bits   { return CFGR2_Bits(rm.UM32.Load()) }
func (rm CFGR2_Mask) Store(b CFGR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SYSCFG_Periph) LOCKUP_LOCK() CFGR2_Mask {
	return CFGR2_Mask{mmio.UM32{&p.CFGR2.U32, uint32(LOCKUP_LOCK)}}
}

func (p *SYSCFG_Periph) SRAM_PARITY_LOCK() CFGR2_Mask {
	return CFGR2_Mask{mmio.UM32{&p.CFGR2.U32, uint32(SRAM_PARITY_LOCK)}}
}

func (p *SYSCFG_Periph) PVD_LOCK() CFGR2_Mask {
	return CFGR2_Mask{mmio.UM32{&p.CFGR2.U32, uint32(PVD_LOCK)}}
}

func (p *SYSCFG_Periph) BYP_ADDR_PAR() CFGR2_Mask {
	return CFGR2_Mask{mmio.UM32{&p.CFGR2.U32, uint32(BYP_ADDR_PAR)}}
}

func (p *SYSCFG_Periph) SRAM_PE() CFGR2_Mask {
	return CFGR2_Mask{mmio.UM32{&p.CFGR2.U32, uint32(SRAM_PE)}}
}

type RESERVED0_Bits uint32

func (b RESERVED0_Bits) Field(mask RESERVED0_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED0_Bits) J(v int) RESERVED0_Bits {
	return RESERVED0_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED0 struct{ mmio.U32 }

func (r *RESERVED0) Bits(mask RESERVED0_Bits) RESERVED0_Bits {
	return RESERVED0_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED0) StoreBits(mask, b RESERVED0_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED0) SetBits(mask RESERVED0_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED0) ClearBits(mask RESERVED0_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED0) Load() RESERVED0_Bits             { return RESERVED0_Bits(r.U32.Load()) }
func (r *RESERVED0) Store(b RESERVED0_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED0) AtomicSetBits(mask RESERVED0_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED0) AtomicClearBits(mask RESERVED0_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED0_Mask struct{ mmio.UM32 }

func (rm RESERVED0_Mask) Load() RESERVED0_Bits   { return RESERVED0_Bits(rm.UM32.Load()) }
func (rm RESERVED0_Mask) Store(b RESERVED0_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED1_Bits uint32

func (b RESERVED1_Bits) Field(mask RESERVED1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED1_Bits) J(v int) RESERVED1_Bits {
	return RESERVED1_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED1 struct{ mmio.U32 }

func (r *RESERVED1) Bits(mask RESERVED1_Bits) RESERVED1_Bits {
	return RESERVED1_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED1) StoreBits(mask, b RESERVED1_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED1) SetBits(mask RESERVED1_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED1) ClearBits(mask RESERVED1_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED1) Load() RESERVED1_Bits             { return RESERVED1_Bits(r.U32.Load()) }
func (r *RESERVED1) Store(b RESERVED1_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED1) AtomicSetBits(mask RESERVED1_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED1) AtomicClearBits(mask RESERVED1_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED1_Mask struct{ mmio.UM32 }

func (rm RESERVED1_Mask) Load() RESERVED1_Bits   { return RESERVED1_Bits(rm.UM32.Load()) }
func (rm RESERVED1_Mask) Store(b RESERVED1_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED2_Bits uint32

func (b RESERVED2_Bits) Field(mask RESERVED2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED2_Bits) J(v int) RESERVED2_Bits {
	return RESERVED2_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED2 struct{ mmio.U32 }

func (r *RESERVED2) Bits(mask RESERVED2_Bits) RESERVED2_Bits {
	return RESERVED2_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED2) StoreBits(mask, b RESERVED2_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED2) SetBits(mask RESERVED2_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED2) ClearBits(mask RESERVED2_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED2) Load() RESERVED2_Bits             { return RESERVED2_Bits(r.U32.Load()) }
func (r *RESERVED2) Store(b RESERVED2_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED2) AtomicSetBits(mask RESERVED2_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED2) AtomicClearBits(mask RESERVED2_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED2_Mask struct{ mmio.UM32 }

func (rm RESERVED2_Mask) Load() RESERVED2_Bits   { return RESERVED2_Bits(rm.UM32.Load()) }
func (rm RESERVED2_Mask) Store(b RESERVED2_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED4_Bits uint32

func (b RESERVED4_Bits) Field(mask RESERVED4_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED4_Bits) J(v int) RESERVED4_Bits {
	return RESERVED4_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED4 struct{ mmio.U32 }

func (r *RESERVED4) Bits(mask RESERVED4_Bits) RESERVED4_Bits {
	return RESERVED4_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED4) StoreBits(mask, b RESERVED4_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED4) SetBits(mask RESERVED4_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED4) ClearBits(mask RESERVED4_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED4) Load() RESERVED4_Bits             { return RESERVED4_Bits(r.U32.Load()) }
func (r *RESERVED4) Store(b RESERVED4_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED4) AtomicSetBits(mask RESERVED4_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED4) AtomicClearBits(mask RESERVED4_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED4_Mask struct{ mmio.UM32 }

func (rm RESERVED4_Mask) Load() RESERVED4_Bits   { return RESERVED4_Bits(rm.UM32.Load()) }
func (rm RESERVED4_Mask) Store(b RESERVED4_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED5_Bits uint32

func (b RESERVED5_Bits) Field(mask RESERVED5_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED5_Bits) J(v int) RESERVED5_Bits {
	return RESERVED5_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED5 struct{ mmio.U32 }

func (r *RESERVED5) Bits(mask RESERVED5_Bits) RESERVED5_Bits {
	return RESERVED5_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED5) StoreBits(mask, b RESERVED5_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED5) SetBits(mask RESERVED5_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED5) ClearBits(mask RESERVED5_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED5) Load() RESERVED5_Bits             { return RESERVED5_Bits(r.U32.Load()) }
func (r *RESERVED5) Store(b RESERVED5_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED5) AtomicSetBits(mask RESERVED5_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED5) AtomicClearBits(mask RESERVED5_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED5_Mask struct{ mmio.UM32 }

func (rm RESERVED5_Mask) Load() RESERVED5_Bits   { return RESERVED5_Bits(rm.UM32.Load()) }
func (rm RESERVED5_Mask) Store(b RESERVED5_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED6_Bits uint32

func (b RESERVED6_Bits) Field(mask RESERVED6_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED6_Bits) J(v int) RESERVED6_Bits {
	return RESERVED6_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED6 struct{ mmio.U32 }

func (r *RESERVED6) Bits(mask RESERVED6_Bits) RESERVED6_Bits {
	return RESERVED6_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED6) StoreBits(mask, b RESERVED6_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED6) SetBits(mask RESERVED6_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED6) ClearBits(mask RESERVED6_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED6) Load() RESERVED6_Bits             { return RESERVED6_Bits(r.U32.Load()) }
func (r *RESERVED6) Store(b RESERVED6_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED6) AtomicSetBits(mask RESERVED6_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED6) AtomicClearBits(mask RESERVED6_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED6_Mask struct{ mmio.UM32 }

func (rm RESERVED6_Mask) Load() RESERVED6_Bits   { return RESERVED6_Bits(rm.UM32.Load()) }
func (rm RESERVED6_Mask) Store(b RESERVED6_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED7_Bits uint32

func (b RESERVED7_Bits) Field(mask RESERVED7_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED7_Bits) J(v int) RESERVED7_Bits {
	return RESERVED7_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED7 struct{ mmio.U32 }

func (r *RESERVED7) Bits(mask RESERVED7_Bits) RESERVED7_Bits {
	return RESERVED7_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED7) StoreBits(mask, b RESERVED7_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED7) SetBits(mask RESERVED7_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED7) ClearBits(mask RESERVED7_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED7) Load() RESERVED7_Bits             { return RESERVED7_Bits(r.U32.Load()) }
func (r *RESERVED7) Store(b RESERVED7_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED7) AtomicSetBits(mask RESERVED7_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED7) AtomicClearBits(mask RESERVED7_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED7_Mask struct{ mmio.UM32 }

func (rm RESERVED7_Mask) Load() RESERVED7_Bits   { return RESERVED7_Bits(rm.UM32.Load()) }
func (rm RESERVED7_Mask) Store(b RESERVED7_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED8_Bits uint32

func (b RESERVED8_Bits) Field(mask RESERVED8_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED8_Bits) J(v int) RESERVED8_Bits {
	return RESERVED8_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED8 struct{ mmio.U32 }

func (r *RESERVED8) Bits(mask RESERVED8_Bits) RESERVED8_Bits {
	return RESERVED8_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED8) StoreBits(mask, b RESERVED8_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED8) SetBits(mask RESERVED8_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED8) ClearBits(mask RESERVED8_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED8) Load() RESERVED8_Bits             { return RESERVED8_Bits(r.U32.Load()) }
func (r *RESERVED8) Store(b RESERVED8_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED8) AtomicSetBits(mask RESERVED8_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED8) AtomicClearBits(mask RESERVED8_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED8_Mask struct{ mmio.UM32 }

func (rm RESERVED8_Mask) Load() RESERVED8_Bits   { return RESERVED8_Bits(rm.UM32.Load()) }
func (rm RESERVED8_Mask) Store(b RESERVED8_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED9_Bits uint32

func (b RESERVED9_Bits) Field(mask RESERVED9_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED9_Bits) J(v int) RESERVED9_Bits {
	return RESERVED9_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED9 struct{ mmio.U32 }

func (r *RESERVED9) Bits(mask RESERVED9_Bits) RESERVED9_Bits {
	return RESERVED9_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED9) StoreBits(mask, b RESERVED9_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED9) SetBits(mask RESERVED9_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED9) ClearBits(mask RESERVED9_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED9) Load() RESERVED9_Bits             { return RESERVED9_Bits(r.U32.Load()) }
func (r *RESERVED9) Store(b RESERVED9_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED9) AtomicSetBits(mask RESERVED9_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED9) AtomicClearBits(mask RESERVED9_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED9_Mask struct{ mmio.UM32 }

func (rm RESERVED9_Mask) Load() RESERVED9_Bits   { return RESERVED9_Bits(rm.UM32.Load()) }
func (rm RESERVED9_Mask) Store(b RESERVED9_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED10_Bits uint32

func (b RESERVED10_Bits) Field(mask RESERVED10_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED10_Bits) J(v int) RESERVED10_Bits {
	return RESERVED10_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED10 struct{ mmio.U32 }

func (r *RESERVED10) Bits(mask RESERVED10_Bits) RESERVED10_Bits {
	return RESERVED10_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED10) StoreBits(mask, b RESERVED10_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED10) SetBits(mask RESERVED10_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED10) ClearBits(mask RESERVED10_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED10) Load() RESERVED10_Bits             { return RESERVED10_Bits(r.U32.Load()) }
func (r *RESERVED10) Store(b RESERVED10_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED10) AtomicSetBits(mask RESERVED10_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED10) AtomicClearBits(mask RESERVED10_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED10_Mask struct{ mmio.UM32 }

func (rm RESERVED10_Mask) Load() RESERVED10_Bits   { return RESERVED10_Bits(rm.UM32.Load()) }
func (rm RESERVED10_Mask) Store(b RESERVED10_Bits) { rm.UM32.Store(uint32(b)) }

type RESERVED11_Bits uint32

func (b RESERVED11_Bits) Field(mask RESERVED11_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED11_Bits) J(v int) RESERVED11_Bits {
	return RESERVED11_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED11 struct{ mmio.U32 }

func (r *RESERVED11) Bits(mask RESERVED11_Bits) RESERVED11_Bits {
	return RESERVED11_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED11) StoreBits(mask, b RESERVED11_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED11) SetBits(mask RESERVED11_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED11) ClearBits(mask RESERVED11_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED11) Load() RESERVED11_Bits             { return RESERVED11_Bits(r.U32.Load()) }
func (r *RESERVED11) Store(b RESERVED11_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED11) AtomicSetBits(mask RESERVED11_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED11) AtomicClearBits(mask RESERVED11_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED11_Mask struct{ mmio.UM32 }

func (rm RESERVED11_Mask) Load() RESERVED11_Bits   { return RESERVED11_Bits(rm.UM32.Load()) }
func (rm RESERVED11_Mask) Store(b RESERVED11_Bits) { rm.UM32.Store(uint32(b)) }

type CFGR4_Bits uint32

func (b CFGR4_Bits) Field(mask CFGR4_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR4_Bits) J(v int) CFGR4_Bits {
	return CFGR4_Bits(bits.Make32(v, uint32(mask)))
}

type CFGR4 struct{ mmio.U32 }

func (r *CFGR4) Bits(mask CFGR4_Bits) CFGR4_Bits { return CFGR4_Bits(r.U32.Bits(uint32(mask))) }
func (r *CFGR4) StoreBits(mask, b CFGR4_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CFGR4) SetBits(mask CFGR4_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *CFGR4) ClearBits(mask CFGR4_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *CFGR4) Load() CFGR4_Bits                { return CFGR4_Bits(r.U32.Load()) }
func (r *CFGR4) Store(b CFGR4_Bits)              { r.U32.Store(uint32(b)) }

func (r *CFGR4) AtomicSetBits(mask CFGR4_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CFGR4) AtomicClearBits(mask CFGR4_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CFGR4_Mask struct{ mmio.UM32 }

func (rm CFGR4_Mask) Load() CFGR4_Bits   { return CFGR4_Bits(rm.UM32.Load()) }
func (rm CFGR4_Mask) Store(b CFGR4_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SYSCFG_Periph) ADC12_EXT2_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_EXT2_RMP)}}
}

func (p *SYSCFG_Periph) ADC12_EXT3_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_EXT3_RMP)}}
}

func (p *SYSCFG_Periph) ADC12_EXT5_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_EXT5_RMP)}}
}

func (p *SYSCFG_Periph) ADC12_EXT13_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_EXT13_RMP)}}
}

func (p *SYSCFG_Periph) ADC12_EXT15_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_EXT15_RMP)}}
}

func (p *SYSCFG_Periph) ADC12_JEXT3_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_JEXT3_RMP)}}
}

func (p *SYSCFG_Periph) ADC12_JEXT6_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_JEXT6_RMP)}}
}

func (p *SYSCFG_Periph) ADC12_JEXT13_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC12_JEXT13_RMP)}}
}

func (p *SYSCFG_Periph) ADC34_EXT5_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC34_EXT5_RMP)}}
}

func (p *SYSCFG_Periph) ADC34_EXT6_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC34_EXT6_RMP)}}
}

func (p *SYSCFG_Periph) ADC34_EXT15_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC34_EXT15_RMP)}}
}

func (p *SYSCFG_Periph) ADC34_JEXT5_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC34_JEXT5_RMP)}}
}

func (p *SYSCFG_Periph) ADC34_JEXT11_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC34_JEXT11_RMP)}}
}

func (p *SYSCFG_Periph) ADC34_JEXT14_RMP() CFGR4_Mask {
	return CFGR4_Mask{mmio.UM32{&p.CFGR4.U32, uint32(ADC34_JEXT14_RMP)}}
}

type RESERVED13_Bits uint32

func (b RESERVED13_Bits) Field(mask RESERVED13_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED13_Bits) J(v int) RESERVED13_Bits {
	return RESERVED13_Bits(bits.Make32(v, uint32(mask)))
}

type RESERVED13 struct{ mmio.U32 }

func (r *RESERVED13) Bits(mask RESERVED13_Bits) RESERVED13_Bits {
	return RESERVED13_Bits(r.U32.Bits(uint32(mask)))
}
func (r *RESERVED13) StoreBits(mask, b RESERVED13_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESERVED13) SetBits(mask RESERVED13_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *RESERVED13) ClearBits(mask RESERVED13_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESERVED13) Load() RESERVED13_Bits             { return RESERVED13_Bits(r.U32.Load()) }
func (r *RESERVED13) Store(b RESERVED13_Bits)           { r.U32.Store(uint32(b)) }

func (r *RESERVED13) AtomicSetBits(mask RESERVED13_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESERVED13) AtomicClearBits(mask RESERVED13_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RESERVED13_Mask struct{ mmio.UM32 }

func (rm RESERVED13_Mask) Load() RESERVED13_Bits   { return RESERVED13_Bits(rm.UM32.Load()) }
func (rm RESERVED13_Mask) Store(b RESERVED13_Bits) { rm.UM32.Store(uint32(b)) }

type CFGR3_Bits uint32

func (b CFGR3_Bits) Field(mask CFGR3_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR3_Bits) J(v int) CFGR3_Bits {
	return CFGR3_Bits(bits.Make32(v, uint32(mask)))
}

type CFGR3 struct{ mmio.U32 }

func (r *CFGR3) Bits(mask CFGR3_Bits) CFGR3_Bits { return CFGR3_Bits(r.U32.Bits(uint32(mask))) }
func (r *CFGR3) StoreBits(mask, b CFGR3_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CFGR3) SetBits(mask CFGR3_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *CFGR3) ClearBits(mask CFGR3_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *CFGR3) Load() CFGR3_Bits                { return CFGR3_Bits(r.U32.Load()) }
func (r *CFGR3) Store(b CFGR3_Bits)              { r.U32.Store(uint32(b)) }

func (r *CFGR3) AtomicSetBits(mask CFGR3_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CFGR3) AtomicClearBits(mask CFGR3_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CFGR3_Mask struct{ mmio.UM32 }

func (rm CFGR3_Mask) Load() CFGR3_Bits   { return CFGR3_Bits(rm.UM32.Load()) }
func (rm CFGR3_Mask) Store(b CFGR3_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SYSCFG_Periph) SPI1_RX_DMA_RMP() CFGR3_Mask {
	return CFGR3_Mask{mmio.UM32{&p.CFGR3.U32, uint32(SPI1_RX_DMA_RMP)}}
}

func (p *SYSCFG_Periph) SPI1_TX_DMA_RMP() CFGR3_Mask {
	return CFGR3_Mask{mmio.UM32{&p.CFGR3.U32, uint32(SPI1_TX_DMA_RMP)}}
}

func (p *SYSCFG_Periph) I2C1_RX_DMA_RMP() CFGR3_Mask {
	return CFGR3_Mask{mmio.UM32{&p.CFGR3.U32, uint32(I2C1_RX_DMA_RMP)}}
}

func (p *SYSCFG_Periph) I2C1_TX_DMA_RMP() CFGR3_Mask {
	return CFGR3_Mask{mmio.UM32{&p.CFGR3.U32, uint32(I2C1_TX_DMA_RMP)}}
}

func (p *SYSCFG_Periph) ADC2_DMA_RMP() CFGR3_Mask {
	return CFGR3_Mask{mmio.UM32{&p.CFGR3.U32, uint32(ADC2_DMA_RMP)}}
}

func (p *SYSCFG_Periph) DAC1_TRG3_RMP() CFGR3_Mask {
	return CFGR3_Mask{mmio.UM32{&p.CFGR3.U32, uint32(DAC1_TRG3_RMP)}}
}

func (p *SYSCFG_Periph) DAC1_TRG5_RMP() CFGR3_Mask {
	return CFGR3_Mask{mmio.UM32{&p.CFGR3.U32, uint32(DAC1_TRG5_RMP)}}
}
