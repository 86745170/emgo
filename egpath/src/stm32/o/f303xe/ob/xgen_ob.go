package ob

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f303xe/mmap"
)

type OB_Periph struct {
	RDP  RDP
	USER USER
	_    uint32
	WRP0 WRP0
	WRP1 WRP1
	WRP2 WRP2
	WRP3 WRP3
}

func (p *OB_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var OB = (*OB_Periph)(unsafe.Pointer(uintptr(mmap.OB_BASE)))

type RDP_Bits uint16

func (b RDP_Bits) Field(mask RDP_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RDP_Bits) J(v int) RDP_Bits {
	return RDP_Bits(bits.Make32(v, uint32(mask)))
}

type RDP struct{ mmio.U16 }

func (r *RDP) Bits(mask RDP_Bits) RDP_Bits { return RDP_Bits(r.U16.Bits(uint16(mask))) }
func (r *RDP) StoreBits(mask, b RDP_Bits)  { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDP) SetBits(mask RDP_Bits)       { r.U16.SetBits(uint16(mask)) }
func (r *RDP) ClearBits(mask RDP_Bits)     { r.U16.ClearBits(uint16(mask)) }
func (r *RDP) Load() RDP_Bits              { return RDP_Bits(r.U16.Load()) }
func (r *RDP) Store(b RDP_Bits)            { r.U16.Store(uint16(b)) }

type RDP_Mask struct{ mmio.UM16 }

func (rm RDP_Mask) Load() RDP_Bits   { return RDP_Bits(rm.UM16.Load()) }
func (rm RDP_Mask) Store(b RDP_Bits) { rm.UM16.Store(uint16(b)) }

func (p *OB_Periph) RDP() RDP_Mask {
	return RDP_Mask{mmio.UM16{&p.RDP.U16, uint16(RDP)}}
}

func (p *OB_Periph) nRDP() RDP_Mask {
	return RDP_Mask{mmio.UM16{&p.RDP.U16, uint16(nRDP)}}
}

type USER_Bits uint16

func (b USER_Bits) Field(mask USER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask USER_Bits) J(v int) USER_Bits {
	return USER_Bits(bits.Make32(v, uint32(mask)))
}

type USER struct{ mmio.U16 }

func (r *USER) Bits(mask USER_Bits) USER_Bits { return USER_Bits(r.U16.Bits(uint16(mask))) }
func (r *USER) StoreBits(mask, b USER_Bits)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *USER) SetBits(mask USER_Bits)        { r.U16.SetBits(uint16(mask)) }
func (r *USER) ClearBits(mask USER_Bits)      { r.U16.ClearBits(uint16(mask)) }
func (r *USER) Load() USER_Bits               { return USER_Bits(r.U16.Load()) }
func (r *USER) Store(b USER_Bits)             { r.U16.Store(uint16(b)) }

type USER_Mask struct{ mmio.UM16 }

func (rm USER_Mask) Load() USER_Bits   { return USER_Bits(rm.UM16.Load()) }
func (rm USER_Mask) Store(b USER_Bits) { rm.UM16.Store(uint16(b)) }

func (p *OB_Periph) USER() USER_Mask {
	return USER_Mask{mmio.UM16{&p.USER.U16, uint16(USER)}}
}

func (p *OB_Periph) nUSER() USER_Mask {
	return USER_Mask{mmio.UM16{&p.USER.U16, uint16(nUSER)}}
}

type WRP0_Bits uint16

func (b WRP0_Bits) Field(mask WRP0_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP0_Bits) J(v int) WRP0_Bits {
	return WRP0_Bits(bits.Make32(v, uint32(mask)))
}

type WRP0 struct{ mmio.U16 }

func (r *WRP0) Bits(mask WRP0_Bits) WRP0_Bits { return WRP0_Bits(r.U16.Bits(uint16(mask))) }
func (r *WRP0) StoreBits(mask, b WRP0_Bits)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *WRP0) SetBits(mask WRP0_Bits)        { r.U16.SetBits(uint16(mask)) }
func (r *WRP0) ClearBits(mask WRP0_Bits)      { r.U16.ClearBits(uint16(mask)) }
func (r *WRP0) Load() WRP0_Bits               { return WRP0_Bits(r.U16.Load()) }
func (r *WRP0) Store(b WRP0_Bits)             { r.U16.Store(uint16(b)) }

type WRP0_Mask struct{ mmio.UM16 }

func (rm WRP0_Mask) Load() WRP0_Bits   { return WRP0_Bits(rm.UM16.Load()) }
func (rm WRP0_Mask) Store(b WRP0_Bits) { rm.UM16.Store(uint16(b)) }

func (p *OB_Periph) WRP0() WRP0_Mask {
	return WRP0_Mask{mmio.UM16{&p.WRP0.U16, uint16(WRP0)}}
}

func (p *OB_Periph) nWRP0() WRP0_Mask {
	return WRP0_Mask{mmio.UM16{&p.WRP0.U16, uint16(nWRP0)}}
}

type WRP1_Bits uint16

func (b WRP1_Bits) Field(mask WRP1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP1_Bits) J(v int) WRP1_Bits {
	return WRP1_Bits(bits.Make32(v, uint32(mask)))
}

type WRP1 struct{ mmio.U16 }

func (r *WRP1) Bits(mask WRP1_Bits) WRP1_Bits { return WRP1_Bits(r.U16.Bits(uint16(mask))) }
func (r *WRP1) StoreBits(mask, b WRP1_Bits)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *WRP1) SetBits(mask WRP1_Bits)        { r.U16.SetBits(uint16(mask)) }
func (r *WRP1) ClearBits(mask WRP1_Bits)      { r.U16.ClearBits(uint16(mask)) }
func (r *WRP1) Load() WRP1_Bits               { return WRP1_Bits(r.U16.Load()) }
func (r *WRP1) Store(b WRP1_Bits)             { r.U16.Store(uint16(b)) }

type WRP1_Mask struct{ mmio.UM16 }

func (rm WRP1_Mask) Load() WRP1_Bits   { return WRP1_Bits(rm.UM16.Load()) }
func (rm WRP1_Mask) Store(b WRP1_Bits) { rm.UM16.Store(uint16(b)) }

func (p *OB_Periph) WRP1() WRP1_Mask {
	return WRP1_Mask{mmio.UM16{&p.WRP1.U16, uint16(WRP1)}}
}

func (p *OB_Periph) nWRP1() WRP1_Mask {
	return WRP1_Mask{mmio.UM16{&p.WRP1.U16, uint16(nWRP1)}}
}

type WRP2_Bits uint16

func (b WRP2_Bits) Field(mask WRP2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP2_Bits) J(v int) WRP2_Bits {
	return WRP2_Bits(bits.Make32(v, uint32(mask)))
}

type WRP2 struct{ mmio.U16 }

func (r *WRP2) Bits(mask WRP2_Bits) WRP2_Bits { return WRP2_Bits(r.U16.Bits(uint16(mask))) }
func (r *WRP2) StoreBits(mask, b WRP2_Bits)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *WRP2) SetBits(mask WRP2_Bits)        { r.U16.SetBits(uint16(mask)) }
func (r *WRP2) ClearBits(mask WRP2_Bits)      { r.U16.ClearBits(uint16(mask)) }
func (r *WRP2) Load() WRP2_Bits               { return WRP2_Bits(r.U16.Load()) }
func (r *WRP2) Store(b WRP2_Bits)             { r.U16.Store(uint16(b)) }

type WRP2_Mask struct{ mmio.UM16 }

func (rm WRP2_Mask) Load() WRP2_Bits   { return WRP2_Bits(rm.UM16.Load()) }
func (rm WRP2_Mask) Store(b WRP2_Bits) { rm.UM16.Store(uint16(b)) }

func (p *OB_Periph) WRP2() WRP2_Mask {
	return WRP2_Mask{mmio.UM16{&p.WRP2.U16, uint16(WRP2)}}
}

func (p *OB_Periph) nWRP2() WRP2_Mask {
	return WRP2_Mask{mmio.UM16{&p.WRP2.U16, uint16(nWRP2)}}
}

type WRP3_Bits uint16

func (b WRP3_Bits) Field(mask WRP3_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP3_Bits) J(v int) WRP3_Bits {
	return WRP3_Bits(bits.Make32(v, uint32(mask)))
}

type WRP3 struct{ mmio.U16 }

func (r *WRP3) Bits(mask WRP3_Bits) WRP3_Bits { return WRP3_Bits(r.U16.Bits(uint16(mask))) }
func (r *WRP3) StoreBits(mask, b WRP3_Bits)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *WRP3) SetBits(mask WRP3_Bits)        { r.U16.SetBits(uint16(mask)) }
func (r *WRP3) ClearBits(mask WRP3_Bits)      { r.U16.ClearBits(uint16(mask)) }
func (r *WRP3) Load() WRP3_Bits               { return WRP3_Bits(r.U16.Load()) }
func (r *WRP3) Store(b WRP3_Bits)             { r.U16.Store(uint16(b)) }

type WRP3_Mask struct{ mmio.UM16 }

func (rm WRP3_Mask) Load() WRP3_Bits   { return WRP3_Bits(rm.UM16.Load()) }
func (rm WRP3_Mask) Store(b WRP3_Bits) { rm.UM16.Store(uint16(b)) }

func (p *OB_Periph) WRP3() WRP3_Mask {
	return WRP3_Mask{mmio.UM16{&p.WRP3.U16, uint16(WRP3)}}
}

func (p *OB_Periph) nWRP3() WRP3_Mask {
	return WRP3_Mask{mmio.UM16{&p.WRP3.U16, uint16(nWRP3)}}
}
