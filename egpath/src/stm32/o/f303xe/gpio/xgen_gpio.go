package gpio

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f303xe/mmap"
)

type GPIO_Periph struct {
	MODER   MODER
	OTYPER  OTYPER
	_       uint16
	OSPEEDR OSPEEDR
	PUPDR   PUPDR
	IDR     IDR
	_       uint16
	ODR     ODR
	_       uint16
	BSRR    BSRR
	LCKR    LCKR
	AFR     [2]AFR
	BRR     BRR
}

func (p *GPIO_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var GPIOA = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOA_BASE)))

var GPIOB = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOB_BASE)))

var GPIOC = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOC_BASE)))

var GPIOD = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOD_BASE)))

var GPIOE = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOE_BASE)))

var GPIOF = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOF_BASE)))

var GPIOG = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOG_BASE)))

var GPIOH = (*GPIO_Periph)(unsafe.Pointer(uintptr(mmap.GPIOH_BASE)))

type MODER_Bits uint32

func (b MODER_Bits) Field(mask MODER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MODER_Bits) J(v int) MODER_Bits {
	return MODER_Bits(bits.Make32(v, uint32(mask)))
}

type MODER struct{ mmio.U32 }

func (r *MODER) Bits(mask MODER_Bits) MODER_Bits { return MODER_Bits(r.U32.Bits(uint32(mask))) }
func (r *MODER) StoreBits(mask, b MODER_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MODER) SetBits(mask MODER_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *MODER) ClearBits(mask MODER_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *MODER) Load() MODER_Bits                { return MODER_Bits(r.U32.Load()) }
func (r *MODER) Store(b MODER_Bits)              { r.U32.Store(uint32(b)) }

type MODER_Mask struct{ mmio.UM32 }

func (rm MODER_Mask) Load() MODER_Bits   { return MODER_Bits(rm.UM32.Load()) }
func (rm MODER_Mask) Store(b MODER_Bits) { rm.UM32.Store(uint32(b)) }

func (p *GPIO_Periph) MODER0() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER0)}}
}

func (p *GPIO_Periph) MODER1() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER1)}}
}

func (p *GPIO_Periph) MODER2() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER2)}}
}

func (p *GPIO_Periph) MODER3() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER3)}}
}

func (p *GPIO_Periph) MODER4() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER4)}}
}

func (p *GPIO_Periph) MODER5() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER5)}}
}

func (p *GPIO_Periph) MODER6() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER6)}}
}

func (p *GPIO_Periph) MODER7() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER7)}}
}

func (p *GPIO_Periph) MODER8() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER8)}}
}

func (p *GPIO_Periph) MODER9() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER9)}}
}

func (p *GPIO_Periph) MODER10() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER10)}}
}

func (p *GPIO_Periph) MODER11() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER11)}}
}

func (p *GPIO_Periph) MODER12() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER12)}}
}

func (p *GPIO_Periph) MODER13() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER13)}}
}

func (p *GPIO_Periph) MODER14() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER14)}}
}

func (p *GPIO_Periph) MODER15() MODER_Mask {
	return MODER_Mask{mmio.UM32{&p.MODER.U32, uint32(MODER15)}}
}

type OTYPER_Bits uint16

func (b OTYPER_Bits) Field(mask OTYPER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask OTYPER_Bits) J(v int) OTYPER_Bits {
	return OTYPER_Bits(bits.Make32(v, uint32(mask)))
}

type OTYPER struct{ mmio.U16 }

func (r *OTYPER) Bits(mask OTYPER_Bits) OTYPER_Bits { return OTYPER_Bits(r.U16.Bits(uint16(mask))) }
func (r *OTYPER) StoreBits(mask, b OTYPER_Bits)     { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *OTYPER) SetBits(mask OTYPER_Bits)          { r.U16.SetBits(uint16(mask)) }
func (r *OTYPER) ClearBits(mask OTYPER_Bits)        { r.U16.ClearBits(uint16(mask)) }
func (r *OTYPER) Load() OTYPER_Bits                 { return OTYPER_Bits(r.U16.Load()) }
func (r *OTYPER) Store(b OTYPER_Bits)               { r.U16.Store(uint16(b)) }

type OTYPER_Mask struct{ mmio.UM16 }

func (rm OTYPER_Mask) Load() OTYPER_Bits   { return OTYPER_Bits(rm.UM16.Load()) }
func (rm OTYPER_Mask) Store(b OTYPER_Bits) { rm.UM16.Store(uint16(b)) }

func (p *GPIO_Periph) OT_0() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_0)}}
}

func (p *GPIO_Periph) OT_1() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_1)}}
}

func (p *GPIO_Periph) OT_2() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_2)}}
}

func (p *GPIO_Periph) OT_3() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_3)}}
}

func (p *GPIO_Periph) OT_4() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_4)}}
}

func (p *GPIO_Periph) OT_5() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_5)}}
}

func (p *GPIO_Periph) OT_6() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_6)}}
}

func (p *GPIO_Periph) OT_7() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_7)}}
}

func (p *GPIO_Periph) OT_8() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_8)}}
}

func (p *GPIO_Periph) OT_9() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_9)}}
}

func (p *GPIO_Periph) OT_10() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_10)}}
}

func (p *GPIO_Periph) OT_11() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_11)}}
}

func (p *GPIO_Periph) OT_12() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_12)}}
}

func (p *GPIO_Periph) OT_13() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_13)}}
}

func (p *GPIO_Periph) OT_14() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_14)}}
}

func (p *GPIO_Periph) OT_15() OTYPER_Mask {
	return OTYPER_Mask{mmio.UM16{&p.OTYPER.U16, uint16(OT_15)}}
}

type OSPEEDR_Bits uint32

func (b OSPEEDR_Bits) Field(mask OSPEEDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask OSPEEDR_Bits) J(v int) OSPEEDR_Bits {
	return OSPEEDR_Bits(bits.Make32(v, uint32(mask)))
}

type OSPEEDR struct{ mmio.U32 }

func (r *OSPEEDR) Bits(mask OSPEEDR_Bits) OSPEEDR_Bits { return OSPEEDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *OSPEEDR) StoreBits(mask, b OSPEEDR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *OSPEEDR) SetBits(mask OSPEEDR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *OSPEEDR) ClearBits(mask OSPEEDR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *OSPEEDR) Load() OSPEEDR_Bits                  { return OSPEEDR_Bits(r.U32.Load()) }
func (r *OSPEEDR) Store(b OSPEEDR_Bits)                { r.U32.Store(uint32(b)) }

type OSPEEDR_Mask struct{ mmio.UM32 }

func (rm OSPEEDR_Mask) Load() OSPEEDR_Bits   { return OSPEEDR_Bits(rm.UM32.Load()) }
func (rm OSPEEDR_Mask) Store(b OSPEEDR_Bits) { rm.UM32.Store(uint32(b)) }

type PUPDR_Bits uint32

func (b PUPDR_Bits) Field(mask PUPDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PUPDR_Bits) J(v int) PUPDR_Bits {
	return PUPDR_Bits(bits.Make32(v, uint32(mask)))
}

type PUPDR struct{ mmio.U32 }

func (r *PUPDR) Bits(mask PUPDR_Bits) PUPDR_Bits { return PUPDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *PUPDR) StoreBits(mask, b PUPDR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *PUPDR) SetBits(mask PUPDR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *PUPDR) ClearBits(mask PUPDR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *PUPDR) Load() PUPDR_Bits                { return PUPDR_Bits(r.U32.Load()) }
func (r *PUPDR) Store(b PUPDR_Bits)              { r.U32.Store(uint32(b)) }

type PUPDR_Mask struct{ mmio.UM32 }

func (rm PUPDR_Mask) Load() PUPDR_Bits   { return PUPDR_Bits(rm.UM32.Load()) }
func (rm PUPDR_Mask) Store(b PUPDR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *GPIO_Periph) PUPDR0() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR0)}}
}

func (p *GPIO_Periph) PUPDR1() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR1)}}
}

func (p *GPIO_Periph) PUPDR2() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR2)}}
}

func (p *GPIO_Periph) PUPDR3() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR3)}}
}

func (p *GPIO_Periph) PUPDR4() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR4)}}
}

func (p *GPIO_Periph) PUPDR5() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR5)}}
}

func (p *GPIO_Periph) PUPDR6() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR6)}}
}

func (p *GPIO_Periph) PUPDR7() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR7)}}
}

func (p *GPIO_Periph) PUPDR8() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR8)}}
}

func (p *GPIO_Periph) PUPDR9() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR9)}}
}

func (p *GPIO_Periph) PUPDR10() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR10)}}
}

func (p *GPIO_Periph) PUPDR11() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR11)}}
}

func (p *GPIO_Periph) PUPDR12() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR12)}}
}

func (p *GPIO_Periph) PUPDR13() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR13)}}
}

func (p *GPIO_Periph) PUPDR14() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR14)}}
}

func (p *GPIO_Periph) PUPDR15() PUPDR_Mask {
	return PUPDR_Mask{mmio.UM32{&p.PUPDR.U32, uint32(PUPDR15)}}
}

type IDR_Bits uint16

func (b IDR_Bits) Field(mask IDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IDR_Bits) J(v int) IDR_Bits {
	return IDR_Bits(bits.Make32(v, uint32(mask)))
}

type IDR struct{ mmio.U16 }

func (r *IDR) Bits(mask IDR_Bits) IDR_Bits { return IDR_Bits(r.U16.Bits(uint16(mask))) }
func (r *IDR) StoreBits(mask, b IDR_Bits)  { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *IDR) SetBits(mask IDR_Bits)       { r.U16.SetBits(uint16(mask)) }
func (r *IDR) ClearBits(mask IDR_Bits)     { r.U16.ClearBits(uint16(mask)) }
func (r *IDR) Load() IDR_Bits              { return IDR_Bits(r.U16.Load()) }
func (r *IDR) Store(b IDR_Bits)            { r.U16.Store(uint16(b)) }

type IDR_Mask struct{ mmio.UM16 }

func (rm IDR_Mask) Load() IDR_Bits   { return IDR_Bits(rm.UM16.Load()) }
func (rm IDR_Mask) Store(b IDR_Bits) { rm.UM16.Store(uint16(b)) }

func (p *GPIO_Periph) V0() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V0)}}
}

func (p *GPIO_Periph) V1() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V1)}}
}

func (p *GPIO_Periph) V2() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V2)}}
}

func (p *GPIO_Periph) V3() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V3)}}
}

func (p *GPIO_Periph) V4() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V4)}}
}

func (p *GPIO_Periph) V5() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V5)}}
}

func (p *GPIO_Periph) V6() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V6)}}
}

func (p *GPIO_Periph) V7() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V7)}}
}

func (p *GPIO_Periph) V8() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V8)}}
}

func (p *GPIO_Periph) V9() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V9)}}
}

func (p *GPIO_Periph) V10() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V10)}}
}

func (p *GPIO_Periph) V11() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V11)}}
}

func (p *GPIO_Periph) V12() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V12)}}
}

func (p *GPIO_Periph) V13() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V13)}}
}

func (p *GPIO_Periph) V14() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V14)}}
}

func (p *GPIO_Periph) V15() IDR_Mask {
	return IDR_Mask{mmio.UM16{&p.IDR.U16, uint16(V15)}}
}

type ODR_Bits uint16

func (b ODR_Bits) Field(mask ODR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ODR_Bits) J(v int) ODR_Bits {
	return ODR_Bits(bits.Make32(v, uint32(mask)))
}

type ODR struct{ mmio.U16 }

func (r *ODR) Bits(mask ODR_Bits) ODR_Bits { return ODR_Bits(r.U16.Bits(uint16(mask))) }
func (r *ODR) StoreBits(mask, b ODR_Bits)  { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *ODR) SetBits(mask ODR_Bits)       { r.U16.SetBits(uint16(mask)) }
func (r *ODR) ClearBits(mask ODR_Bits)     { r.U16.ClearBits(uint16(mask)) }
func (r *ODR) Load() ODR_Bits              { return ODR_Bits(r.U16.Load()) }
func (r *ODR) Store(b ODR_Bits)            { r.U16.Store(uint16(b)) }

type ODR_Mask struct{ mmio.UM16 }

func (rm ODR_Mask) Load() ODR_Bits   { return ODR_Bits(rm.UM16.Load()) }
func (rm ODR_Mask) Store(b ODR_Bits) { rm.UM16.Store(uint16(b)) }

func (p *GPIO_Periph) V0() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V0)}}
}

func (p *GPIO_Periph) V1() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V1)}}
}

func (p *GPIO_Periph) V2() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V2)}}
}

func (p *GPIO_Periph) V3() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V3)}}
}

func (p *GPIO_Periph) V4() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V4)}}
}

func (p *GPIO_Periph) V5() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V5)}}
}

func (p *GPIO_Periph) V6() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V6)}}
}

func (p *GPIO_Periph) V7() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V7)}}
}

func (p *GPIO_Periph) V8() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V8)}}
}

func (p *GPIO_Periph) V9() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V9)}}
}

func (p *GPIO_Periph) V10() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V10)}}
}

func (p *GPIO_Periph) V11() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V11)}}
}

func (p *GPIO_Periph) V12() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V12)}}
}

func (p *GPIO_Periph) V13() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V13)}}
}

func (p *GPIO_Periph) V14() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V14)}}
}

func (p *GPIO_Periph) V15() ODR_Mask {
	return ODR_Mask{mmio.UM16{&p.ODR.U16, uint16(V15)}}
}

type BSRR_Bits uint32

func (b BSRR_Bits) Field(mask BSRR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BSRR_Bits) J(v int) BSRR_Bits {
	return BSRR_Bits(bits.Make32(v, uint32(mask)))
}

type BSRR struct{ mmio.U32 }

func (r *BSRR) Bits(mask BSRR_Bits) BSRR_Bits { return BSRR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BSRR) StoreBits(mask, b BSRR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BSRR) SetBits(mask BSRR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *BSRR) ClearBits(mask BSRR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *BSRR) Load() BSRR_Bits               { return BSRR_Bits(r.U32.Load()) }
func (r *BSRR) Store(b BSRR_Bits)             { r.U32.Store(uint32(b)) }

type BSRR_Mask struct{ mmio.UM32 }

func (rm BSRR_Mask) Load() BSRR_Bits   { return BSRR_Bits(rm.UM32.Load()) }
func (rm BSRR_Mask) Store(b BSRR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *GPIO_Periph) BS_0() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_0)}}
}

func (p *GPIO_Periph) BS_1() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_1)}}
}

func (p *GPIO_Periph) BS_2() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_2)}}
}

func (p *GPIO_Periph) BS_3() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_3)}}
}

func (p *GPIO_Periph) BS_4() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_4)}}
}

func (p *GPIO_Periph) BS_5() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_5)}}
}

func (p *GPIO_Periph) BS_6() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_6)}}
}

func (p *GPIO_Periph) BS_7() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_7)}}
}

func (p *GPIO_Periph) BS_8() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_8)}}
}

func (p *GPIO_Periph) BS_9() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_9)}}
}

func (p *GPIO_Periph) BS_10() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_10)}}
}

func (p *GPIO_Periph) BS_11() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_11)}}
}

func (p *GPIO_Periph) BS_12() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_12)}}
}

func (p *GPIO_Periph) BS_13() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_13)}}
}

func (p *GPIO_Periph) BS_14() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_14)}}
}

func (p *GPIO_Periph) BS_15() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BS_15)}}
}

func (p *GPIO_Periph) BR_0() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_0)}}
}

func (p *GPIO_Periph) BR_1() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_1)}}
}

func (p *GPIO_Periph) BR_2() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_2)}}
}

func (p *GPIO_Periph) BR_3() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_3)}}
}

func (p *GPIO_Periph) BR_4() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_4)}}
}

func (p *GPIO_Periph) BR_5() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_5)}}
}

func (p *GPIO_Periph) BR_6() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_6)}}
}

func (p *GPIO_Periph) BR_7() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_7)}}
}

func (p *GPIO_Periph) BR_8() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_8)}}
}

func (p *GPIO_Periph) BR_9() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_9)}}
}

func (p *GPIO_Periph) BR_10() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_10)}}
}

func (p *GPIO_Periph) BR_11() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_11)}}
}

func (p *GPIO_Periph) BR_12() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_12)}}
}

func (p *GPIO_Periph) BR_13() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_13)}}
}

func (p *GPIO_Periph) BR_14() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_14)}}
}

func (p *GPIO_Periph) BR_15() BSRR_Mask {
	return BSRR_Mask{mmio.UM32{&p.BSRR.U32, uint32(BR_15)}}
}

type LCKR_Bits uint32

func (b LCKR_Bits) Field(mask LCKR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LCKR_Bits) J(v int) LCKR_Bits {
	return LCKR_Bits(bits.Make32(v, uint32(mask)))
}

type LCKR struct{ mmio.U32 }

func (r *LCKR) Bits(mask LCKR_Bits) LCKR_Bits { return LCKR_Bits(r.U32.Bits(uint32(mask))) }
func (r *LCKR) StoreBits(mask, b LCKR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *LCKR) SetBits(mask LCKR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *LCKR) ClearBits(mask LCKR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *LCKR) Load() LCKR_Bits               { return LCKR_Bits(r.U32.Load()) }
func (r *LCKR) Store(b LCKR_Bits)             { r.U32.Store(uint32(b)) }

type LCKR_Mask struct{ mmio.UM32 }

func (rm LCKR_Mask) Load() LCKR_Bits   { return LCKR_Bits(rm.UM32.Load()) }
func (rm LCKR_Mask) Store(b LCKR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *GPIO_Periph) LCK0() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK0)}}
}

func (p *GPIO_Periph) LCK1() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK1)}}
}

func (p *GPIO_Periph) LCK2() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK2)}}
}

func (p *GPIO_Periph) LCK3() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK3)}}
}

func (p *GPIO_Periph) LCK4() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK4)}}
}

func (p *GPIO_Periph) LCK5() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK5)}}
}

func (p *GPIO_Periph) LCK6() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK6)}}
}

func (p *GPIO_Periph) LCK7() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK7)}}
}

func (p *GPIO_Periph) LCK8() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK8)}}
}

func (p *GPIO_Periph) LCK9() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK9)}}
}

func (p *GPIO_Periph) LCK10() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK10)}}
}

func (p *GPIO_Periph) LCK11() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK11)}}
}

func (p *GPIO_Periph) LCK12() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK12)}}
}

func (p *GPIO_Periph) LCK13() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK13)}}
}

func (p *GPIO_Periph) LCK14() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK14)}}
}

func (p *GPIO_Periph) LCK15() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCK15)}}
}

func (p *GPIO_Periph) LCKK() LCKR_Mask {
	return LCKR_Mask{mmio.UM32{&p.LCKR.U32, uint32(LCKK)}}
}

type AFR_Bits uint32

func (b AFR_Bits) Field(mask AFR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AFR_Bits) J(v int) AFR_Bits {
	return AFR_Bits(bits.Make32(v, uint32(mask)))
}

type AFR struct{ mmio.U32 }

func (r *AFR) Bits(mask AFR_Bits) AFR_Bits { return AFR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AFR) StoreBits(mask, b AFR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AFR) SetBits(mask AFR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *AFR) ClearBits(mask AFR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *AFR) Load() AFR_Bits              { return AFR_Bits(r.U32.Load()) }
func (r *AFR) Store(b AFR_Bits)            { r.U32.Store(uint32(b)) }

type AFR_Mask struct{ mmio.UM32 }

func (rm AFR_Mask) Load() AFR_Bits   { return AFR_Bits(rm.UM32.Load()) }
func (rm AFR_Mask) Store(b AFR_Bits) { rm.UM32.Store(uint32(b)) }

type BRR_Bits uint16

func (b BRR_Bits) Field(mask BRR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BRR_Bits) J(v int) BRR_Bits {
	return BRR_Bits(bits.Make32(v, uint32(mask)))
}

type BRR struct{ mmio.U16 }

func (r *BRR) Bits(mask BRR_Bits) BRR_Bits { return BRR_Bits(r.U16.Bits(uint16(mask))) }
func (r *BRR) StoreBits(mask, b BRR_Bits)  { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *BRR) SetBits(mask BRR_Bits)       { r.U16.SetBits(uint16(mask)) }
func (r *BRR) ClearBits(mask BRR_Bits)     { r.U16.ClearBits(uint16(mask)) }
func (r *BRR) Load() BRR_Bits              { return BRR_Bits(r.U16.Load()) }
func (r *BRR) Store(b BRR_Bits)            { r.U16.Store(uint16(b)) }

type BRR_Mask struct{ mmio.UM16 }

func (rm BRR_Mask) Load() BRR_Bits   { return BRR_Bits(rm.UM16.Load()) }
func (rm BRR_Mask) Store(b BRR_Bits) { rm.UM16.Store(uint16(b)) }

func (p *GPIO_Periph) BR_0() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_0)}}
}

func (p *GPIO_Periph) BR_1() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_1)}}
}

func (p *GPIO_Periph) BR_2() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_2)}}
}

func (p *GPIO_Periph) BR_3() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_3)}}
}

func (p *GPIO_Periph) BR_4() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_4)}}
}

func (p *GPIO_Periph) BR_5() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_5)}}
}

func (p *GPIO_Periph) BR_6() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_6)}}
}

func (p *GPIO_Periph) BR_7() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_7)}}
}

func (p *GPIO_Periph) BR_8() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_8)}}
}

func (p *GPIO_Periph) BR_9() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_9)}}
}

func (p *GPIO_Periph) BR_10() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_10)}}
}

func (p *GPIO_Periph) BR_11() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_11)}}
}

func (p *GPIO_Periph) BR_12() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_12)}}
}

func (p *GPIO_Periph) BR_13() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_13)}}
}

func (p *GPIO_Periph) BR_14() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_14)}}
}

func (p *GPIO_Periph) BR_15() BRR_Mask {
	return BRR_Mask{mmio.UM16{&p.BRR.U16, uint16(BR_15)}}
}
