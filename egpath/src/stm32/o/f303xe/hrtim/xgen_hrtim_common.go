package hrtim

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f303xe/mmap"
)

type HRTIM_Common_Periph struct {
	CR1      CR1
	CR2      CR2
	ISR      ISR
	ICR      ICR
	IER      IER
	OENR     OENR
	DISR     DISR
	ODSR     ODSR
	BMCR     BMCR
	BMTRGR   BMTRGR
	BMCMPR   BMCMPR
	BMPER    BMPER
	EECR1    EECR1
	EECR2    EECR2
	EECR3    EECR3
	ADC1R    ADC1R
	ADC2R    ADC2R
	ADC3R    ADC3R
	ADC4R    ADC4R
	DLLCR    DLLCR
	FLTINxR1 FLTINxR1
	FLTINxR2 FLTINxR2
	BDMUPDR  BDMUPDR
	BDTAUPR  BDTAUPR
	BDTBUPR  BDTBUPR
	BDTCUPR  BDTCUPR
	BDTDUPR  BDTDUPR
	BDTEUPR  BDTEUPR
	BDMADR   BDMADR
}

func (p *HRTIM_Common_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var HRTIM1_COMMON = (*HRTIM_Common_Periph)(unsafe.Pointer(uintptr(mmap.HRTIM1_COMMON_BASE)))

type CR1_Bits uint32

func (b CR1_Bits) Field(mask CR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR1_Bits) J(v int) CR1_Bits {
	return CR1_Bits(bits.Make32(v, uint32(mask)))
}

type CR1 struct{ mmio.U32 }

func (r *CR1) Bits(mask CR1_Bits) CR1_Bits { return CR1_Bits(r.U32.Bits(uint32(mask))) }
func (r *CR1) StoreBits(mask, b CR1_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CR1) SetBits(mask CR1_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *CR1) ClearBits(mask CR1_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *CR1) Load() CR1_Bits              { return CR1_Bits(r.U32.Load()) }
func (r *CR1) Store(b CR1_Bits)            { r.U32.Store(uint32(b)) }

func (r *CR1) AtomicStoreBits(mask, b CR1_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *CR1) AtomicSetBits(mask CR1_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CR1) AtomicClearBits(mask CR1_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type CR1_Mask struct{ mmio.UM32 }

func (rm CR1_Mask) Load() CR1_Bits   { return CR1_Bits(rm.UM32.Load()) }
func (rm CR1_Mask) Store(b CR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) MUDIS() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(MUDIS)}}
}

func (p *HRTIM_Common_Periph) TAUDIS() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(TAUDIS)}}
}

func (p *HRTIM_Common_Periph) TBUDIS() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(TBUDIS)}}
}

func (p *HRTIM_Common_Periph) TCUDIS() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(TCUDIS)}}
}

func (p *HRTIM_Common_Periph) TDUDIS() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(TDUDIS)}}
}

func (p *HRTIM_Common_Periph) TEUDIS() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(TEUDIS)}}
}

func (p *HRTIM_Common_Periph) ADC1USRC() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(ADC1USRC)}}
}

func (p *HRTIM_Common_Periph) ADC2USRC() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(ADC2USRC)}}
}

func (p *HRTIM_Common_Periph) ADC3USRC() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(ADC3USRC)}}
}

func (p *HRTIM_Common_Periph) ADC4USRC() CR1_Mask {
	return CR1_Mask{mmio.UM32{&p.CR1.U32, uint32(ADC4USRC)}}
}

type CR2_Bits uint32

func (b CR2_Bits) Field(mask CR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR2_Bits) J(v int) CR2_Bits {
	return CR2_Bits(bits.Make32(v, uint32(mask)))
}

type CR2 struct{ mmio.U32 }

func (r *CR2) Bits(mask CR2_Bits) CR2_Bits { return CR2_Bits(r.U32.Bits(uint32(mask))) }
func (r *CR2) StoreBits(mask, b CR2_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CR2) SetBits(mask CR2_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *CR2) ClearBits(mask CR2_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *CR2) Load() CR2_Bits              { return CR2_Bits(r.U32.Load()) }
func (r *CR2) Store(b CR2_Bits)            { r.U32.Store(uint32(b)) }

func (r *CR2) AtomicStoreBits(mask, b CR2_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *CR2) AtomicSetBits(mask CR2_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CR2) AtomicClearBits(mask CR2_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type CR2_Mask struct{ mmio.UM32 }

func (rm CR2_Mask) Load() CR2_Bits   { return CR2_Bits(rm.UM32.Load()) }
func (rm CR2_Mask) Store(b CR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) MSWU() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(MSWU)}}
}

func (p *HRTIM_Common_Periph) TASWU() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TASWU)}}
}

func (p *HRTIM_Common_Periph) TBSWU() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TBSWU)}}
}

func (p *HRTIM_Common_Periph) TCSWU() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TCSWU)}}
}

func (p *HRTIM_Common_Periph) TDSWU() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TDSWU)}}
}

func (p *HRTIM_Common_Periph) TESWU() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TESWU)}}
}

func (p *HRTIM_Common_Periph) MRST() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(MRST)}}
}

func (p *HRTIM_Common_Periph) TARST() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TARST)}}
}

func (p *HRTIM_Common_Periph) TBRST() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TBRST)}}
}

func (p *HRTIM_Common_Periph) TCRST() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TCRST)}}
}

func (p *HRTIM_Common_Periph) TDRST() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TDRST)}}
}

func (p *HRTIM_Common_Periph) TERST() CR2_Mask {
	return CR2_Mask{mmio.UM32{&p.CR2.U32, uint32(TERST)}}
}

type ISR_Bits uint32

func (b ISR_Bits) Field(mask ISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISR_Bits) J(v int) ISR_Bits {
	return ISR_Bits(bits.Make32(v, uint32(mask)))
}

type ISR struct{ mmio.U32 }

func (r *ISR) Bits(mask ISR_Bits) ISR_Bits { return ISR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ISR) StoreBits(mask, b ISR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ISR) SetBits(mask ISR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *ISR) ClearBits(mask ISR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *ISR) Load() ISR_Bits              { return ISR_Bits(r.U32.Load()) }
func (r *ISR) Store(b ISR_Bits)            { r.U32.Store(uint32(b)) }

func (r *ISR) AtomicStoreBits(mask, b ISR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ISR) AtomicSetBits(mask ISR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ISR) AtomicClearBits(mask ISR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type ISR_Mask struct{ mmio.UM32 }

func (rm ISR_Mask) Load() ISR_Bits   { return ISR_Bits(rm.UM32.Load()) }
func (rm ISR_Mask) Store(b ISR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) FLT1() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(FLT1)}}
}

func (p *HRTIM_Common_Periph) FLT2() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(FLT2)}}
}

func (p *HRTIM_Common_Periph) FLT3() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(FLT3)}}
}

func (p *HRTIM_Common_Periph) FLT4() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(FLT4)}}
}

func (p *HRTIM_Common_Periph) FLT5() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(FLT5)}}
}

func (p *HRTIM_Common_Periph) SYSFLT() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(SYSFLT)}}
}

func (p *HRTIM_Common_Periph) DLLRDY() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(DLLRDY)}}
}

func (p *HRTIM_Common_Periph) BMPER() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(BMPER)}}
}

type ICR_Bits uint32

func (b ICR_Bits) Field(mask ICR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICR_Bits) J(v int) ICR_Bits {
	return ICR_Bits(bits.Make32(v, uint32(mask)))
}

type ICR struct{ mmio.U32 }

func (r *ICR) Bits(mask ICR_Bits) ICR_Bits { return ICR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ICR) StoreBits(mask, b ICR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ICR) SetBits(mask ICR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *ICR) ClearBits(mask ICR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *ICR) Load() ICR_Bits              { return ICR_Bits(r.U32.Load()) }
func (r *ICR) Store(b ICR_Bits)            { r.U32.Store(uint32(b)) }

func (r *ICR) AtomicStoreBits(mask, b ICR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ICR) AtomicSetBits(mask ICR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ICR) AtomicClearBits(mask ICR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type ICR_Mask struct{ mmio.UM32 }

func (rm ICR_Mask) Load() ICR_Bits   { return ICR_Bits(rm.UM32.Load()) }
func (rm ICR_Mask) Store(b ICR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) FLT1C() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(FLT1C)}}
}

func (p *HRTIM_Common_Periph) FLT2C() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(FLT2C)}}
}

func (p *HRTIM_Common_Periph) FLT3C() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(FLT3C)}}
}

func (p *HRTIM_Common_Periph) FLT4C() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(FLT4C)}}
}

func (p *HRTIM_Common_Periph) FLT5C() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(FLT5C)}}
}

func (p *HRTIM_Common_Periph) SYSFLTC() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(SYSFLTC)}}
}

func (p *HRTIM_Common_Periph) DLLRDYC() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(DLLRDYC)}}
}

func (p *HRTIM_Common_Periph) BMPERC() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(BMPERC)}}
}

type IER_Bits uint32

func (b IER_Bits) Field(mask IER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IER_Bits) J(v int) IER_Bits {
	return IER_Bits(bits.Make32(v, uint32(mask)))
}

type IER struct{ mmio.U32 }

func (r *IER) Bits(mask IER_Bits) IER_Bits { return IER_Bits(r.U32.Bits(uint32(mask))) }
func (r *IER) StoreBits(mask, b IER_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *IER) SetBits(mask IER_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *IER) ClearBits(mask IER_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *IER) Load() IER_Bits              { return IER_Bits(r.U32.Load()) }
func (r *IER) Store(b IER_Bits)            { r.U32.Store(uint32(b)) }

func (r *IER) AtomicStoreBits(mask, b IER_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *IER) AtomicSetBits(mask IER_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *IER) AtomicClearBits(mask IER_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type IER_Mask struct{ mmio.UM32 }

func (rm IER_Mask) Load() IER_Bits   { return IER_Bits(rm.UM32.Load()) }
func (rm IER_Mask) Store(b IER_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) FLT1() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(FLT1)}}
}

func (p *HRTIM_Common_Periph) FLT2() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(FLT2)}}
}

func (p *HRTIM_Common_Periph) FLT3() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(FLT3)}}
}

func (p *HRTIM_Common_Periph) FLT4() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(FLT4)}}
}

func (p *HRTIM_Common_Periph) FLT5() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(FLT5)}}
}

func (p *HRTIM_Common_Periph) SYSFLT() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(SYSFLT)}}
}

func (p *HRTIM_Common_Periph) DLLRDY() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(DLLRDY)}}
}

func (p *HRTIM_Common_Periph) BMPER() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(BMPER)}}
}

type OENR_Bits uint32

func (b OENR_Bits) Field(mask OENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask OENR_Bits) J(v int) OENR_Bits {
	return OENR_Bits(bits.Make32(v, uint32(mask)))
}

type OENR struct{ mmio.U32 }

func (r *OENR) Bits(mask OENR_Bits) OENR_Bits { return OENR_Bits(r.U32.Bits(uint32(mask))) }
func (r *OENR) StoreBits(mask, b OENR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *OENR) SetBits(mask OENR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *OENR) ClearBits(mask OENR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *OENR) Load() OENR_Bits               { return OENR_Bits(r.U32.Load()) }
func (r *OENR) Store(b OENR_Bits)             { r.U32.Store(uint32(b)) }

func (r *OENR) AtomicStoreBits(mask, b OENR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *OENR) AtomicSetBits(mask OENR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *OENR) AtomicClearBits(mask OENR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type OENR_Mask struct{ mmio.UM32 }

func (rm OENR_Mask) Load() OENR_Bits   { return OENR_Bits(rm.UM32.Load()) }
func (rm OENR_Mask) Store(b OENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) TA1OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TA1OEN)}}
}

func (p *HRTIM_Common_Periph) TA2OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TA2OEN)}}
}

func (p *HRTIM_Common_Periph) TB1OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TB1OEN)}}
}

func (p *HRTIM_Common_Periph) TB2OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TB2OEN)}}
}

func (p *HRTIM_Common_Periph) TC1OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TC1OEN)}}
}

func (p *HRTIM_Common_Periph) TC2OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TC2OEN)}}
}

func (p *HRTIM_Common_Periph) TD1OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TD1OEN)}}
}

func (p *HRTIM_Common_Periph) TD2OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TD2OEN)}}
}

func (p *HRTIM_Common_Periph) TE1OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TE1OEN)}}
}

func (p *HRTIM_Common_Periph) TE2OEN() OENR_Mask {
	return OENR_Mask{mmio.UM32{&p.OENR.U32, uint32(TE2OEN)}}
}

type DISR_Bits uint32

func (b DISR_Bits) Field(mask DISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DISR_Bits) J(v int) DISR_Bits {
	return DISR_Bits(bits.Make32(v, uint32(mask)))
}

type DISR struct{ mmio.U32 }

func (r *DISR) Bits(mask DISR_Bits) DISR_Bits { return DISR_Bits(r.U32.Bits(uint32(mask))) }
func (r *DISR) StoreBits(mask, b DISR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DISR) SetBits(mask DISR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *DISR) ClearBits(mask DISR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *DISR) Load() DISR_Bits               { return DISR_Bits(r.U32.Load()) }
func (r *DISR) Store(b DISR_Bits)             { r.U32.Store(uint32(b)) }

func (r *DISR) AtomicStoreBits(mask, b DISR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *DISR) AtomicSetBits(mask DISR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *DISR) AtomicClearBits(mask DISR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type DISR_Mask struct{ mmio.UM32 }

func (rm DISR_Mask) Load() DISR_Bits   { return DISR_Bits(rm.UM32.Load()) }
func (rm DISR_Mask) Store(b DISR_Bits) { rm.UM32.Store(uint32(b)) }

type ODSR_Bits uint32

func (b ODSR_Bits) Field(mask ODSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ODSR_Bits) J(v int) ODSR_Bits {
	return ODSR_Bits(bits.Make32(v, uint32(mask)))
}

type ODSR struct{ mmio.U32 }

func (r *ODSR) Bits(mask ODSR_Bits) ODSR_Bits { return ODSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ODSR) StoreBits(mask, b ODSR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ODSR) SetBits(mask ODSR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *ODSR) ClearBits(mask ODSR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *ODSR) Load() ODSR_Bits               { return ODSR_Bits(r.U32.Load()) }
func (r *ODSR) Store(b ODSR_Bits)             { r.U32.Store(uint32(b)) }

func (r *ODSR) AtomicStoreBits(mask, b ODSR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ODSR) AtomicSetBits(mask ODSR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ODSR) AtomicClearBits(mask ODSR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type ODSR_Mask struct{ mmio.UM32 }

func (rm ODSR_Mask) Load() ODSR_Bits   { return ODSR_Bits(rm.UM32.Load()) }
func (rm ODSR_Mask) Store(b ODSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) TA1ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TA1ODS)}}
}

func (p *HRTIM_Common_Periph) TA2ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TA2ODS)}}
}

func (p *HRTIM_Common_Periph) TB1ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TB1ODS)}}
}

func (p *HRTIM_Common_Periph) TB2ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TB2ODS)}}
}

func (p *HRTIM_Common_Periph) TC1ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TC1ODS)}}
}

func (p *HRTIM_Common_Periph) TC2ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TC2ODS)}}
}

func (p *HRTIM_Common_Periph) TD1ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TD1ODS)}}
}

func (p *HRTIM_Common_Periph) TD2ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TD2ODS)}}
}

func (p *HRTIM_Common_Periph) TE1ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TE1ODS)}}
}

func (p *HRTIM_Common_Periph) TE2ODS() ODSR_Mask {
	return ODSR_Mask{mmio.UM32{&p.ODSR.U32, uint32(TE2ODS)}}
}

type BMCR_Bits uint32

func (b BMCR_Bits) Field(mask BMCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BMCR_Bits) J(v int) BMCR_Bits {
	return BMCR_Bits(bits.Make32(v, uint32(mask)))
}

type BMCR struct{ mmio.U32 }

func (r *BMCR) Bits(mask BMCR_Bits) BMCR_Bits { return BMCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BMCR) StoreBits(mask, b BMCR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BMCR) SetBits(mask BMCR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *BMCR) ClearBits(mask BMCR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *BMCR) Load() BMCR_Bits               { return BMCR_Bits(r.U32.Load()) }
func (r *BMCR) Store(b BMCR_Bits)             { r.U32.Store(uint32(b)) }

func (r *BMCR) AtomicStoreBits(mask, b BMCR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *BMCR) AtomicSetBits(mask BMCR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BMCR) AtomicClearBits(mask BMCR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type BMCR_Mask struct{ mmio.UM32 }

func (rm BMCR_Mask) Load() BMCR_Bits   { return BMCR_Bits(rm.UM32.Load()) }
func (rm BMCR_Mask) Store(b BMCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) BME() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(BME)}}
}

func (p *HRTIM_Common_Periph) BMOM() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(BMOM)}}
}

func (p *HRTIM_Common_Periph) BMCLK() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(BMCLK)}}
}

func (p *HRTIM_Common_Periph) BMPSC() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(BMPSC)}}
}

func (p *HRTIM_Common_Periph) BMPREN() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(BMPREN)}}
}

func (p *HRTIM_Common_Periph) MTBM() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(MTBM)}}
}

func (p *HRTIM_Common_Periph) TABM() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(TABM)}}
}

func (p *HRTIM_Common_Periph) TBBM() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(TBBM)}}
}

func (p *HRTIM_Common_Periph) TCBM() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(TCBM)}}
}

func (p *HRTIM_Common_Periph) TDBM() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(TDBM)}}
}

func (p *HRTIM_Common_Periph) TEBM() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(TEBM)}}
}

func (p *HRTIM_Common_Periph) BMSTAT() BMCR_Mask {
	return BMCR_Mask{mmio.UM32{&p.BMCR.U32, uint32(BMSTAT)}}
}

type BMTRGR_Bits uint32

func (b BMTRGR_Bits) Field(mask BMTRGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BMTRGR_Bits) J(v int) BMTRGR_Bits {
	return BMTRGR_Bits(bits.Make32(v, uint32(mask)))
}

type BMTRGR struct{ mmio.U32 }

func (r *BMTRGR) Bits(mask BMTRGR_Bits) BMTRGR_Bits { return BMTRGR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BMTRGR) StoreBits(mask, b BMTRGR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BMTRGR) SetBits(mask BMTRGR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *BMTRGR) ClearBits(mask BMTRGR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *BMTRGR) Load() BMTRGR_Bits                 { return BMTRGR_Bits(r.U32.Load()) }
func (r *BMTRGR) Store(b BMTRGR_Bits)               { r.U32.Store(uint32(b)) }

func (r *BMTRGR) AtomicStoreBits(mask, b BMTRGR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *BMTRGR) AtomicSetBits(mask BMTRGR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BMTRGR) AtomicClearBits(mask BMTRGR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type BMTRGR_Mask struct{ mmio.UM32 }

func (rm BMTRGR_Mask) Load() BMTRGR_Bits   { return BMTRGR_Bits(rm.UM32.Load()) }
func (rm BMTRGR_Mask) Store(b BMTRGR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) SW() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(SW)}}
}

func (p *HRTIM_Common_Periph) MSTRST() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(MSTRST)}}
}

func (p *HRTIM_Common_Periph) MSTREP() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(MSTREP)}}
}

func (p *HRTIM_Common_Periph) MSTCMP1() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(MSTCMP1)}}
}

func (p *HRTIM_Common_Periph) MSTCMP2() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(MSTCMP2)}}
}

func (p *HRTIM_Common_Periph) MSTCMP3() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(MSTCMP3)}}
}

func (p *HRTIM_Common_Periph) MSTCMP4() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(MSTCMP4)}}
}

func (p *HRTIM_Common_Periph) TARST() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TARST)}}
}

func (p *HRTIM_Common_Periph) TAREP() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TAREP)}}
}

func (p *HRTIM_Common_Periph) TACMP1() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TACMP1)}}
}

func (p *HRTIM_Common_Periph) TACMP2() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TACMP2)}}
}

func (p *HRTIM_Common_Periph) TBRST() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TBRST)}}
}

func (p *HRTIM_Common_Periph) TBREP() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TBREP)}}
}

func (p *HRTIM_Common_Periph) TBCMP1() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TBCMP1)}}
}

func (p *HRTIM_Common_Periph) TBCMP2() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TBCMP2)}}
}

func (p *HRTIM_Common_Periph) TCRST() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TCRST)}}
}

func (p *HRTIM_Common_Periph) TCREP() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TCREP)}}
}

func (p *HRTIM_Common_Periph) TCCMP1() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TCCMP1)}}
}

func (p *HRTIM_Common_Periph) TCCMP2() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TCCMP2)}}
}

func (p *HRTIM_Common_Periph) TDRST() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TDRST)}}
}

func (p *HRTIM_Common_Periph) TDREP() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TDREP)}}
}

func (p *HRTIM_Common_Periph) TDCMP1() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TDCMP1)}}
}

func (p *HRTIM_Common_Periph) TDCMP2() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TDCMP2)}}
}

func (p *HRTIM_Common_Periph) TERST() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TERST)}}
}

func (p *HRTIM_Common_Periph) TEREP() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TEREP)}}
}

func (p *HRTIM_Common_Periph) TECMP1() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TECMP1)}}
}

func (p *HRTIM_Common_Periph) TECMP2() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TECMP2)}}
}

func (p *HRTIM_Common_Periph) TAEEV7() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TAEEV7)}}
}

func (p *HRTIM_Common_Periph) TDEEV8() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(TDEEV8)}}
}

func (p *HRTIM_Common_Periph) EEV7() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(EEV7)}}
}

func (p *HRTIM_Common_Periph) EEV8() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(EEV8)}}
}

func (p *HRTIM_Common_Periph) OCHPEV() BMTRGR_Mask {
	return BMTRGR_Mask{mmio.UM32{&p.BMTRGR.U32, uint32(OCHPEV)}}
}

type BMCMPR_Bits uint32

func (b BMCMPR_Bits) Field(mask BMCMPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BMCMPR_Bits) J(v int) BMCMPR_Bits {
	return BMCMPR_Bits(bits.Make32(v, uint32(mask)))
}

type BMCMPR struct{ mmio.U32 }

func (r *BMCMPR) Bits(mask BMCMPR_Bits) BMCMPR_Bits { return BMCMPR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BMCMPR) StoreBits(mask, b BMCMPR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BMCMPR) SetBits(mask BMCMPR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *BMCMPR) ClearBits(mask BMCMPR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *BMCMPR) Load() BMCMPR_Bits                 { return BMCMPR_Bits(r.U32.Load()) }
func (r *BMCMPR) Store(b BMCMPR_Bits)               { r.U32.Store(uint32(b)) }

func (r *BMCMPR) AtomicStoreBits(mask, b BMCMPR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *BMCMPR) AtomicSetBits(mask BMCMPR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BMCMPR) AtomicClearBits(mask BMCMPR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type BMCMPR_Mask struct{ mmio.UM32 }

func (rm BMCMPR_Mask) Load() BMCMPR_Bits   { return BMCMPR_Bits(rm.UM32.Load()) }
func (rm BMCMPR_Mask) Store(b BMCMPR_Bits) { rm.UM32.Store(uint32(b)) }

type BMPER_Bits uint32

func (b BMPER_Bits) Field(mask BMPER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BMPER_Bits) J(v int) BMPER_Bits {
	return BMPER_Bits(bits.Make32(v, uint32(mask)))
}

type BMPER struct{ mmio.U32 }

func (r *BMPER) Bits(mask BMPER_Bits) BMPER_Bits { return BMPER_Bits(r.U32.Bits(uint32(mask))) }
func (r *BMPER) StoreBits(mask, b BMPER_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BMPER) SetBits(mask BMPER_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *BMPER) ClearBits(mask BMPER_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *BMPER) Load() BMPER_Bits                { return BMPER_Bits(r.U32.Load()) }
func (r *BMPER) Store(b BMPER_Bits)              { r.U32.Store(uint32(b)) }

func (r *BMPER) AtomicStoreBits(mask, b BMPER_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *BMPER) AtomicSetBits(mask BMPER_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BMPER) AtomicClearBits(mask BMPER_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type BMPER_Mask struct{ mmio.UM32 }

func (rm BMPER_Mask) Load() BMPER_Bits   { return BMPER_Bits(rm.UM32.Load()) }
func (rm BMPER_Mask) Store(b BMPER_Bits) { rm.UM32.Store(uint32(b)) }

type EECR1_Bits uint32

func (b EECR1_Bits) Field(mask EECR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EECR1_Bits) J(v int) EECR1_Bits {
	return EECR1_Bits(bits.Make32(v, uint32(mask)))
}

type EECR1 struct{ mmio.U32 }

func (r *EECR1) Bits(mask EECR1_Bits) EECR1_Bits { return EECR1_Bits(r.U32.Bits(uint32(mask))) }
func (r *EECR1) StoreBits(mask, b EECR1_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *EECR1) SetBits(mask EECR1_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *EECR1) ClearBits(mask EECR1_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *EECR1) Load() EECR1_Bits                { return EECR1_Bits(r.U32.Load()) }
func (r *EECR1) Store(b EECR1_Bits)              { r.U32.Store(uint32(b)) }

func (r *EECR1) AtomicStoreBits(mask, b EECR1_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *EECR1) AtomicSetBits(mask EECR1_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *EECR1) AtomicClearBits(mask EECR1_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type EECR1_Mask struct{ mmio.UM32 }

func (rm EECR1_Mask) Load() EECR1_Bits   { return EECR1_Bits(rm.UM32.Load()) }
func (rm EECR1_Mask) Store(b EECR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) EE1SRC() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE1SRC)}}
}

func (p *HRTIM_Common_Periph) EE1POL() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE1POL)}}
}

func (p *HRTIM_Common_Periph) EE1SNS() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE1SNS)}}
}

func (p *HRTIM_Common_Periph) EE1FAST() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE1FAST)}}
}

func (p *HRTIM_Common_Periph) EE2SRC() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE2SRC)}}
}

func (p *HRTIM_Common_Periph) EE2POL() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE2POL)}}
}

func (p *HRTIM_Common_Periph) EE2SNS() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE2SNS)}}
}

func (p *HRTIM_Common_Periph) EE2FAST() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE2FAST)}}
}

func (p *HRTIM_Common_Periph) EE3SRC() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE3SRC)}}
}

func (p *HRTIM_Common_Periph) EE3POL() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE3POL)}}
}

func (p *HRTIM_Common_Periph) EE3SNS() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE3SNS)}}
}

func (p *HRTIM_Common_Periph) EE3FAST() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE3FAST)}}
}

func (p *HRTIM_Common_Periph) EE4SRC() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE4SRC)}}
}

func (p *HRTIM_Common_Periph) EE4POL() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE4POL)}}
}

func (p *HRTIM_Common_Periph) EE4SNS() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE4SNS)}}
}

func (p *HRTIM_Common_Periph) EE4FAST() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE4FAST)}}
}

func (p *HRTIM_Common_Periph) EE5SRC() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE5SRC)}}
}

func (p *HRTIM_Common_Periph) EE5POL() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE5POL)}}
}

func (p *HRTIM_Common_Periph) EE5SNS() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE5SNS)}}
}

func (p *HRTIM_Common_Periph) EE5FAST() EECR1_Mask {
	return EECR1_Mask{mmio.UM32{&p.EECR1.U32, uint32(EE5FAST)}}
}

type EECR2_Bits uint32

func (b EECR2_Bits) Field(mask EECR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EECR2_Bits) J(v int) EECR2_Bits {
	return EECR2_Bits(bits.Make32(v, uint32(mask)))
}

type EECR2 struct{ mmio.U32 }

func (r *EECR2) Bits(mask EECR2_Bits) EECR2_Bits { return EECR2_Bits(r.U32.Bits(uint32(mask))) }
func (r *EECR2) StoreBits(mask, b EECR2_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *EECR2) SetBits(mask EECR2_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *EECR2) ClearBits(mask EECR2_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *EECR2) Load() EECR2_Bits                { return EECR2_Bits(r.U32.Load()) }
func (r *EECR2) Store(b EECR2_Bits)              { r.U32.Store(uint32(b)) }

func (r *EECR2) AtomicStoreBits(mask, b EECR2_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *EECR2) AtomicSetBits(mask EECR2_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *EECR2) AtomicClearBits(mask EECR2_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type EECR2_Mask struct{ mmio.UM32 }

func (rm EECR2_Mask) Load() EECR2_Bits   { return EECR2_Bits(rm.UM32.Load()) }
func (rm EECR2_Mask) Store(b EECR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) EE6SRC() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE6SRC)}}
}

func (p *HRTIM_Common_Periph) EE6POL() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE6POL)}}
}

func (p *HRTIM_Common_Periph) EE6SNS() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE6SNS)}}
}

func (p *HRTIM_Common_Periph) EE7SRC() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE7SRC)}}
}

func (p *HRTIM_Common_Periph) EE7POL() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE7POL)}}
}

func (p *HRTIM_Common_Periph) EE7SNS() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE7SNS)}}
}

func (p *HRTIM_Common_Periph) EE8SRC() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE8SRC)}}
}

func (p *HRTIM_Common_Periph) EE8POL() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE8POL)}}
}

func (p *HRTIM_Common_Periph) EE8SNS() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE8SNS)}}
}

func (p *HRTIM_Common_Periph) EE9SRC() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE9SRC)}}
}

func (p *HRTIM_Common_Periph) EE9POL() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE9POL)}}
}

func (p *HRTIM_Common_Periph) EE9SNS() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE9SNS)}}
}

func (p *HRTIM_Common_Periph) EE10SRC() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE10SRC)}}
}

func (p *HRTIM_Common_Periph) EE10POL() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE10POL)}}
}

func (p *HRTIM_Common_Periph) EE10SNS() EECR2_Mask {
	return EECR2_Mask{mmio.UM32{&p.EECR2.U32, uint32(EE10SNS)}}
}

type EECR3_Bits uint32

func (b EECR3_Bits) Field(mask EECR3_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EECR3_Bits) J(v int) EECR3_Bits {
	return EECR3_Bits(bits.Make32(v, uint32(mask)))
}

type EECR3 struct{ mmio.U32 }

func (r *EECR3) Bits(mask EECR3_Bits) EECR3_Bits { return EECR3_Bits(r.U32.Bits(uint32(mask))) }
func (r *EECR3) StoreBits(mask, b EECR3_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *EECR3) SetBits(mask EECR3_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *EECR3) ClearBits(mask EECR3_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *EECR3) Load() EECR3_Bits                { return EECR3_Bits(r.U32.Load()) }
func (r *EECR3) Store(b EECR3_Bits)              { r.U32.Store(uint32(b)) }

func (r *EECR3) AtomicStoreBits(mask, b EECR3_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *EECR3) AtomicSetBits(mask EECR3_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *EECR3) AtomicClearBits(mask EECR3_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type EECR3_Mask struct{ mmio.UM32 }

func (rm EECR3_Mask) Load() EECR3_Bits   { return EECR3_Bits(rm.UM32.Load()) }
func (rm EECR3_Mask) Store(b EECR3_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) EE6F() EECR3_Mask {
	return EECR3_Mask{mmio.UM32{&p.EECR3.U32, uint32(EE6F)}}
}

func (p *HRTIM_Common_Periph) EE7F() EECR3_Mask {
	return EECR3_Mask{mmio.UM32{&p.EECR3.U32, uint32(EE7F)}}
}

func (p *HRTIM_Common_Periph) EE8F() EECR3_Mask {
	return EECR3_Mask{mmio.UM32{&p.EECR3.U32, uint32(EE8F)}}
}

func (p *HRTIM_Common_Periph) EE9F() EECR3_Mask {
	return EECR3_Mask{mmio.UM32{&p.EECR3.U32, uint32(EE9F)}}
}

func (p *HRTIM_Common_Periph) EE10F() EECR3_Mask {
	return EECR3_Mask{mmio.UM32{&p.EECR3.U32, uint32(EE10F)}}
}

func (p *HRTIM_Common_Periph) EEVSD() EECR3_Mask {
	return EECR3_Mask{mmio.UM32{&p.EECR3.U32, uint32(EEVSD)}}
}

type ADC1R_Bits uint32

func (b ADC1R_Bits) Field(mask ADC1R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ADC1R_Bits) J(v int) ADC1R_Bits {
	return ADC1R_Bits(bits.Make32(v, uint32(mask)))
}

type ADC1R struct{ mmio.U32 }

func (r *ADC1R) Bits(mask ADC1R_Bits) ADC1R_Bits { return ADC1R_Bits(r.U32.Bits(uint32(mask))) }
func (r *ADC1R) StoreBits(mask, b ADC1R_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ADC1R) SetBits(mask ADC1R_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *ADC1R) ClearBits(mask ADC1R_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *ADC1R) Load() ADC1R_Bits                { return ADC1R_Bits(r.U32.Load()) }
func (r *ADC1R) Store(b ADC1R_Bits)              { r.U32.Store(uint32(b)) }

func (r *ADC1R) AtomicStoreBits(mask, b ADC1R_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ADC1R) AtomicSetBits(mask ADC1R_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ADC1R) AtomicClearBits(mask ADC1R_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type ADC1R_Mask struct{ mmio.UM32 }

func (rm ADC1R_Mask) Load() ADC1R_Bits   { return ADC1R_Bits(rm.UM32.Load()) }
func (rm ADC1R_Mask) Store(b ADC1R_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) AD1MC1() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1MC1)}}
}

func (p *HRTIM_Common_Periph) AD1MC2() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1MC2)}}
}

func (p *HRTIM_Common_Periph) AD1MC3() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1MC3)}}
}

func (p *HRTIM_Common_Periph) AD1MC4() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1MC4)}}
}

func (p *HRTIM_Common_Periph) AD1MPER() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1MPER)}}
}

func (p *HRTIM_Common_Periph) AD1EEV1() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1EEV1)}}
}

func (p *HRTIM_Common_Periph) AD1EEV2() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1EEV2)}}
}

func (p *HRTIM_Common_Periph) AD1EEV3() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1EEV3)}}
}

func (p *HRTIM_Common_Periph) AD1EEV4() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1EEV4)}}
}

func (p *HRTIM_Common_Periph) AD1EEV5() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1EEV5)}}
}

func (p *HRTIM_Common_Periph) AD1TAC2() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TAC2)}}
}

func (p *HRTIM_Common_Periph) AD1TAC3() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TAC3)}}
}

func (p *HRTIM_Common_Periph) AD1TAC4() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TAC4)}}
}

func (p *HRTIM_Common_Periph) AD1TAPER() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TAPER)}}
}

func (p *HRTIM_Common_Periph) AD1TARST() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TARST)}}
}

func (p *HRTIM_Common_Periph) AD1TBC2() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TBC2)}}
}

func (p *HRTIM_Common_Periph) AD1TBC3() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TBC3)}}
}

func (p *HRTIM_Common_Periph) AD1TBC4() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TBC4)}}
}

func (p *HRTIM_Common_Periph) AD1TBPER() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TBPER)}}
}

func (p *HRTIM_Common_Periph) AD1TBRST() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TBRST)}}
}

func (p *HRTIM_Common_Periph) AD1TCC2() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TCC2)}}
}

func (p *HRTIM_Common_Periph) AD1TCC3() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TCC3)}}
}

func (p *HRTIM_Common_Periph) AD1TCC4() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TCC4)}}
}

func (p *HRTIM_Common_Periph) AD1TCPER() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TCPER)}}
}

func (p *HRTIM_Common_Periph) AD1TDC2() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TDC2)}}
}

func (p *HRTIM_Common_Periph) AD1TDC3() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TDC3)}}
}

func (p *HRTIM_Common_Periph) AD1TDC4() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TDC4)}}
}

func (p *HRTIM_Common_Periph) AD1TDPER() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TDPER)}}
}

func (p *HRTIM_Common_Periph) AD1TEC2() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TEC2)}}
}

func (p *HRTIM_Common_Periph) AD1TEC3() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TEC3)}}
}

func (p *HRTIM_Common_Periph) AD1TEC4() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TEC4)}}
}

func (p *HRTIM_Common_Periph) AD1TEPER() ADC1R_Mask {
	return ADC1R_Mask{mmio.UM32{&p.ADC1R.U32, uint32(AD1TEPER)}}
}

type ADC2R_Bits uint32

func (b ADC2R_Bits) Field(mask ADC2R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ADC2R_Bits) J(v int) ADC2R_Bits {
	return ADC2R_Bits(bits.Make32(v, uint32(mask)))
}

type ADC2R struct{ mmio.U32 }

func (r *ADC2R) Bits(mask ADC2R_Bits) ADC2R_Bits { return ADC2R_Bits(r.U32.Bits(uint32(mask))) }
func (r *ADC2R) StoreBits(mask, b ADC2R_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ADC2R) SetBits(mask ADC2R_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *ADC2R) ClearBits(mask ADC2R_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *ADC2R) Load() ADC2R_Bits                { return ADC2R_Bits(r.U32.Load()) }
func (r *ADC2R) Store(b ADC2R_Bits)              { r.U32.Store(uint32(b)) }

func (r *ADC2R) AtomicStoreBits(mask, b ADC2R_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ADC2R) AtomicSetBits(mask ADC2R_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ADC2R) AtomicClearBits(mask ADC2R_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type ADC2R_Mask struct{ mmio.UM32 }

func (rm ADC2R_Mask) Load() ADC2R_Bits   { return ADC2R_Bits(rm.UM32.Load()) }
func (rm ADC2R_Mask) Store(b ADC2R_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) AD2MC1() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2MC1)}}
}

func (p *HRTIM_Common_Periph) AD2MC2() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2MC2)}}
}

func (p *HRTIM_Common_Periph) AD2MC3() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2MC3)}}
}

func (p *HRTIM_Common_Periph) AD2MC4() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2MC4)}}
}

func (p *HRTIM_Common_Periph) AD2MPER() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2MPER)}}
}

func (p *HRTIM_Common_Periph) AD2EEV6() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2EEV6)}}
}

func (p *HRTIM_Common_Periph) AD2EEV7() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2EEV7)}}
}

func (p *HRTIM_Common_Periph) AD2EEV8() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2EEV8)}}
}

func (p *HRTIM_Common_Periph) AD2EEV9() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2EEV9)}}
}

func (p *HRTIM_Common_Periph) AD2EEV10() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2EEV10)}}
}

func (p *HRTIM_Common_Periph) AD2TAC2() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TAC2)}}
}

func (p *HRTIM_Common_Periph) AD2TAC3() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TAC3)}}
}

func (p *HRTIM_Common_Periph) AD2TAC4() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TAC4)}}
}

func (p *HRTIM_Common_Periph) AD2TAPER() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TAPER)}}
}

func (p *HRTIM_Common_Periph) AD2TBC2() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TBC2)}}
}

func (p *HRTIM_Common_Periph) AD2TBC3() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TBC3)}}
}

func (p *HRTIM_Common_Periph) AD2TBC4() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TBC4)}}
}

func (p *HRTIM_Common_Periph) AD2TBPER() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TBPER)}}
}

func (p *HRTIM_Common_Periph) AD2TCC2() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TCC2)}}
}

func (p *HRTIM_Common_Periph) AD2TCC3() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TCC3)}}
}

func (p *HRTIM_Common_Periph) AD2TCC4() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TCC4)}}
}

func (p *HRTIM_Common_Periph) AD2TCPER() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TCPER)}}
}

func (p *HRTIM_Common_Periph) AD2TCRST() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TCRST)}}
}

func (p *HRTIM_Common_Periph) AD2TDC2() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TDC2)}}
}

func (p *HRTIM_Common_Periph) AD2TDC3() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TDC3)}}
}

func (p *HRTIM_Common_Periph) AD2TDC4() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TDC4)}}
}

func (p *HRTIM_Common_Periph) AD2TDPER() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TDPER)}}
}

func (p *HRTIM_Common_Periph) AD2TDRST() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TDRST)}}
}

func (p *HRTIM_Common_Periph) AD2TEC2() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TEC2)}}
}

func (p *HRTIM_Common_Periph) AD2TEC3() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TEC3)}}
}

func (p *HRTIM_Common_Periph) AD2TEC4() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TEC4)}}
}

func (p *HRTIM_Common_Periph) AD2TERST() ADC2R_Mask {
	return ADC2R_Mask{mmio.UM32{&p.ADC2R.U32, uint32(AD2TERST)}}
}

type ADC3R_Bits uint32

func (b ADC3R_Bits) Field(mask ADC3R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ADC3R_Bits) J(v int) ADC3R_Bits {
	return ADC3R_Bits(bits.Make32(v, uint32(mask)))
}

type ADC3R struct{ mmio.U32 }

func (r *ADC3R) Bits(mask ADC3R_Bits) ADC3R_Bits { return ADC3R_Bits(r.U32.Bits(uint32(mask))) }
func (r *ADC3R) StoreBits(mask, b ADC3R_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ADC3R) SetBits(mask ADC3R_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *ADC3R) ClearBits(mask ADC3R_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *ADC3R) Load() ADC3R_Bits                { return ADC3R_Bits(r.U32.Load()) }
func (r *ADC3R) Store(b ADC3R_Bits)              { r.U32.Store(uint32(b)) }

func (r *ADC3R) AtomicStoreBits(mask, b ADC3R_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ADC3R) AtomicSetBits(mask ADC3R_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ADC3R) AtomicClearBits(mask ADC3R_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type ADC3R_Mask struct{ mmio.UM32 }

func (rm ADC3R_Mask) Load() ADC3R_Bits   { return ADC3R_Bits(rm.UM32.Load()) }
func (rm ADC3R_Mask) Store(b ADC3R_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) AD3MC1() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3MC1)}}
}

func (p *HRTIM_Common_Periph) AD3MC2() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3MC2)}}
}

func (p *HRTIM_Common_Periph) AD3MC3() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3MC3)}}
}

func (p *HRTIM_Common_Periph) AD3MC4() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3MC4)}}
}

func (p *HRTIM_Common_Periph) AD3MPER() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3MPER)}}
}

func (p *HRTIM_Common_Periph) AD3EEV1() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3EEV1)}}
}

func (p *HRTIM_Common_Periph) AD3EEV2() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3EEV2)}}
}

func (p *HRTIM_Common_Periph) AD3EEV3() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3EEV3)}}
}

func (p *HRTIM_Common_Periph) AD3EEV4() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3EEV4)}}
}

func (p *HRTIM_Common_Periph) AD3EEV5() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3EEV5)}}
}

func (p *HRTIM_Common_Periph) AD3TAC2() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TAC2)}}
}

func (p *HRTIM_Common_Periph) AD3TAC3() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TAC3)}}
}

func (p *HRTIM_Common_Periph) AD3TAC4() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TAC4)}}
}

func (p *HRTIM_Common_Periph) AD3TAPER() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TAPER)}}
}

func (p *HRTIM_Common_Periph) AD3TARST() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TARST)}}
}

func (p *HRTIM_Common_Periph) AD3TBC2() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TBC2)}}
}

func (p *HRTIM_Common_Periph) AD3TBC3() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TBC3)}}
}

func (p *HRTIM_Common_Periph) AD3TBC4() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TBC4)}}
}

func (p *HRTIM_Common_Periph) AD3TBPER() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TBPER)}}
}

func (p *HRTIM_Common_Periph) AD3TBRST() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TBRST)}}
}

func (p *HRTIM_Common_Periph) AD3TCC2() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TCC2)}}
}

func (p *HRTIM_Common_Periph) AD3TCC3() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TCC3)}}
}

func (p *HRTIM_Common_Periph) AD3TCC4() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TCC4)}}
}

func (p *HRTIM_Common_Periph) AD3TCPER() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TCPER)}}
}

func (p *HRTIM_Common_Periph) AD3TDC2() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TDC2)}}
}

func (p *HRTIM_Common_Periph) AD3TDC3() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TDC3)}}
}

func (p *HRTIM_Common_Periph) AD3TDC4() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TDC4)}}
}

func (p *HRTIM_Common_Periph) AD3TDPER() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TDPER)}}
}

func (p *HRTIM_Common_Periph) AD3TEC2() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TEC2)}}
}

func (p *HRTIM_Common_Periph) AD3TEC3() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TEC3)}}
}

func (p *HRTIM_Common_Periph) AD3TEC4() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TEC4)}}
}

func (p *HRTIM_Common_Periph) AD3TEPER() ADC3R_Mask {
	return ADC3R_Mask{mmio.UM32{&p.ADC3R.U32, uint32(AD3TEPER)}}
}

type ADC4R_Bits uint32

func (b ADC4R_Bits) Field(mask ADC4R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ADC4R_Bits) J(v int) ADC4R_Bits {
	return ADC4R_Bits(bits.Make32(v, uint32(mask)))
}

type ADC4R struct{ mmio.U32 }

func (r *ADC4R) Bits(mask ADC4R_Bits) ADC4R_Bits { return ADC4R_Bits(r.U32.Bits(uint32(mask))) }
func (r *ADC4R) StoreBits(mask, b ADC4R_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ADC4R) SetBits(mask ADC4R_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *ADC4R) ClearBits(mask ADC4R_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *ADC4R) Load() ADC4R_Bits                { return ADC4R_Bits(r.U32.Load()) }
func (r *ADC4R) Store(b ADC4R_Bits)              { r.U32.Store(uint32(b)) }

func (r *ADC4R) AtomicStoreBits(mask, b ADC4R_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ADC4R) AtomicSetBits(mask ADC4R_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ADC4R) AtomicClearBits(mask ADC4R_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type ADC4R_Mask struct{ mmio.UM32 }

func (rm ADC4R_Mask) Load() ADC4R_Bits   { return ADC4R_Bits(rm.UM32.Load()) }
func (rm ADC4R_Mask) Store(b ADC4R_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) AD4MC1() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4MC1)}}
}

func (p *HRTIM_Common_Periph) AD4MC2() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4MC2)}}
}

func (p *HRTIM_Common_Periph) AD4MC3() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4MC3)}}
}

func (p *HRTIM_Common_Periph) AD4MC4() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4MC4)}}
}

func (p *HRTIM_Common_Periph) AD4MPER() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4MPER)}}
}

func (p *HRTIM_Common_Periph) AD4EEV6() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4EEV6)}}
}

func (p *HRTIM_Common_Periph) AD4EEV7() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4EEV7)}}
}

func (p *HRTIM_Common_Periph) AD4EEV8() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4EEV8)}}
}

func (p *HRTIM_Common_Periph) AD4EEV9() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4EEV9)}}
}

func (p *HRTIM_Common_Periph) AD4EEV10() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4EEV10)}}
}

func (p *HRTIM_Common_Periph) AD4TAC2() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TAC2)}}
}

func (p *HRTIM_Common_Periph) AD4TAC3() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TAC3)}}
}

func (p *HRTIM_Common_Periph) AD4TAC4() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TAC4)}}
}

func (p *HRTIM_Common_Periph) AD4TAPER() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TAPER)}}
}

func (p *HRTIM_Common_Periph) AD4TBC2() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TBC2)}}
}

func (p *HRTIM_Common_Periph) AD4TBC3() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TBC3)}}
}

func (p *HRTIM_Common_Periph) AD4TBC4() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TBC4)}}
}

func (p *HRTIM_Common_Periph) AD4TBPER() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TBPER)}}
}

func (p *HRTIM_Common_Periph) AD4TCC2() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TCC2)}}
}

func (p *HRTIM_Common_Periph) AD4TCC3() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TCC3)}}
}

func (p *HRTIM_Common_Periph) AD4TCC4() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TCC4)}}
}

func (p *HRTIM_Common_Periph) AD4TCPER() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TCPER)}}
}

func (p *HRTIM_Common_Periph) AD4TCRST() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TCRST)}}
}

func (p *HRTIM_Common_Periph) AD4TDC2() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TDC2)}}
}

func (p *HRTIM_Common_Periph) AD4TDC3() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TDC3)}}
}

func (p *HRTIM_Common_Periph) AD4TDC4() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TDC4)}}
}

func (p *HRTIM_Common_Periph) AD4TDPER() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TDPER)}}
}

func (p *HRTIM_Common_Periph) AD4TDRST() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TDRST)}}
}

func (p *HRTIM_Common_Periph) AD4TEC2() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TEC2)}}
}

func (p *HRTIM_Common_Periph) AD4TEC3() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TEC3)}}
}

func (p *HRTIM_Common_Periph) AD4TEC4() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TEC4)}}
}

func (p *HRTIM_Common_Periph) AD4TERST() ADC4R_Mask {
	return ADC4R_Mask{mmio.UM32{&p.ADC4R.U32, uint32(AD4TERST)}}
}

type DLLCR_Bits uint32

func (b DLLCR_Bits) Field(mask DLLCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DLLCR_Bits) J(v int) DLLCR_Bits {
	return DLLCR_Bits(bits.Make32(v, uint32(mask)))
}

type DLLCR struct{ mmio.U32 }

func (r *DLLCR) Bits(mask DLLCR_Bits) DLLCR_Bits { return DLLCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *DLLCR) StoreBits(mask, b DLLCR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DLLCR) SetBits(mask DLLCR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *DLLCR) ClearBits(mask DLLCR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *DLLCR) Load() DLLCR_Bits                { return DLLCR_Bits(r.U32.Load()) }
func (r *DLLCR) Store(b DLLCR_Bits)              { r.U32.Store(uint32(b)) }

func (r *DLLCR) AtomicStoreBits(mask, b DLLCR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *DLLCR) AtomicSetBits(mask DLLCR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *DLLCR) AtomicClearBits(mask DLLCR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type DLLCR_Mask struct{ mmio.UM32 }

func (rm DLLCR_Mask) Load() DLLCR_Bits   { return DLLCR_Bits(rm.UM32.Load()) }
func (rm DLLCR_Mask) Store(b DLLCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Common_Periph) CAL() DLLCR_Mask {
	return DLLCR_Mask{mmio.UM32{&p.DLLCR.U32, uint32(CAL)}}
}

func (p *HRTIM_Common_Periph) CALEN() DLLCR_Mask {
	return DLLCR_Mask{mmio.UM32{&p.DLLCR.U32, uint32(CALEN)}}
}

func (p *HRTIM_Common_Periph) CALRTE() DLLCR_Mask {
	return DLLCR_Mask{mmio.UM32{&p.DLLCR.U32, uint32(CALRTE)}}
}

type FLTINxR1_Bits uint32

func (b FLTINxR1_Bits) Field(mask FLTINxR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTINxR1_Bits) J(v int) FLTINxR1_Bits {
	return FLTINxR1_Bits(bits.Make32(v, uint32(mask)))
}

type FLTINxR1 struct{ mmio.U32 }

func (r *FLTINxR1) Bits(mask FLTINxR1_Bits) FLTINxR1_Bits {
	return FLTINxR1_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTINxR1) StoreBits(mask, b FLTINxR1_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTINxR1) SetBits(mask FLTINxR1_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTINxR1) ClearBits(mask FLTINxR1_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTINxR1) Load() FLTINxR1_Bits             { return FLTINxR1_Bits(r.U32.Load()) }
func (r *FLTINxR1) Store(b FLTINxR1_Bits)           { r.U32.Store(uint32(b)) }

func (r *FLTINxR1) AtomicStoreBits(mask, b FLTINxR1_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *FLTINxR1) AtomicSetBits(mask FLTINxR1_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *FLTINxR1) AtomicClearBits(mask FLTINxR1_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type FLTINxR1_Mask struct{ mmio.UM32 }

func (rm FLTINxR1_Mask) Load() FLTINxR1_Bits   { return FLTINxR1_Bits(rm.UM32.Load()) }
func (rm FLTINxR1_Mask) Store(b FLTINxR1_Bits) { rm.UM32.Store(uint32(b)) }

type FLTINxR2_Bits uint32

func (b FLTINxR2_Bits) Field(mask FLTINxR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTINxR2_Bits) J(v int) FLTINxR2_Bits {
	return FLTINxR2_Bits(bits.Make32(v, uint32(mask)))
}

type FLTINxR2 struct{ mmio.U32 }

func (r *FLTINxR2) Bits(mask FLTINxR2_Bits) FLTINxR2_Bits {
	return FLTINxR2_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTINxR2) StoreBits(mask, b FLTINxR2_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTINxR2) SetBits(mask FLTINxR2_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTINxR2) ClearBits(mask FLTINxR2_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTINxR2) Load() FLTINxR2_Bits             { return FLTINxR2_Bits(r.U32.Load()) }
func (r *FLTINxR2) Store(b FLTINxR2_Bits)           { r.U32.Store(uint32(b)) }

func (r *FLTINxR2) AtomicStoreBits(mask, b FLTINxR2_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *FLTINxR2) AtomicSetBits(mask FLTINxR2_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *FLTINxR2) AtomicClearBits(mask FLTINxR2_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type FLTINxR2_Mask struct{ mmio.UM32 }

func (rm FLTINxR2_Mask) Load() FLTINxR2_Bits   { return FLTINxR2_Bits(rm.UM32.Load()) }
func (rm FLTINxR2_Mask) Store(b FLTINxR2_Bits) { rm.UM32.Store(uint32(b)) }

type BDMUPDR_Bits uint32

func (b BDMUPDR_Bits) Field(mask BDMUPDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDMUPDR_Bits) J(v int) BDMUPDR_Bits {
	return BDMUPDR_Bits(bits.Make32(v, uint32(mask)))
}

type BDMUPDR struct{ mmio.U32 }

func (r *BDMUPDR) Bits(mask BDMUPDR_Bits) BDMUPDR_Bits { return BDMUPDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDMUPDR) StoreBits(mask, b BDMUPDR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDMUPDR) SetBits(mask BDMUPDR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *BDMUPDR) ClearBits(mask BDMUPDR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *BDMUPDR) Load() BDMUPDR_Bits                  { return BDMUPDR_Bits(r.U32.Load()) }
func (r *BDMUPDR) Store(b BDMUPDR_Bits)                { r.U32.Store(uint32(b)) }

func (r *BDMUPDR) AtomicStoreBits(mask, b BDMUPDR_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *BDMUPDR) AtomicSetBits(mask BDMUPDR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDMUPDR) AtomicClearBits(mask BDMUPDR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BDMUPDR_Mask struct{ mmio.UM32 }

func (rm BDMUPDR_Mask) Load() BDMUPDR_Bits   { return BDMUPDR_Bits(rm.UM32.Load()) }
func (rm BDMUPDR_Mask) Store(b BDMUPDR_Bits) { rm.UM32.Store(uint32(b)) }

type BDTAUPR_Bits uint32

func (b BDTAUPR_Bits) Field(mask BDTAUPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDTAUPR_Bits) J(v int) BDTAUPR_Bits {
	return BDTAUPR_Bits(bits.Make32(v, uint32(mask)))
}

type BDTAUPR struct{ mmio.U32 }

func (r *BDTAUPR) Bits(mask BDTAUPR_Bits) BDTAUPR_Bits { return BDTAUPR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDTAUPR) StoreBits(mask, b BDTAUPR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDTAUPR) SetBits(mask BDTAUPR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *BDTAUPR) ClearBits(mask BDTAUPR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *BDTAUPR) Load() BDTAUPR_Bits                  { return BDTAUPR_Bits(r.U32.Load()) }
func (r *BDTAUPR) Store(b BDTAUPR_Bits)                { r.U32.Store(uint32(b)) }

func (r *BDTAUPR) AtomicStoreBits(mask, b BDTAUPR_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *BDTAUPR) AtomicSetBits(mask BDTAUPR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDTAUPR) AtomicClearBits(mask BDTAUPR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BDTAUPR_Mask struct{ mmio.UM32 }

func (rm BDTAUPR_Mask) Load() BDTAUPR_Bits   { return BDTAUPR_Bits(rm.UM32.Load()) }
func (rm BDTAUPR_Mask) Store(b BDTAUPR_Bits) { rm.UM32.Store(uint32(b)) }

type BDTBUPR_Bits uint32

func (b BDTBUPR_Bits) Field(mask BDTBUPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDTBUPR_Bits) J(v int) BDTBUPR_Bits {
	return BDTBUPR_Bits(bits.Make32(v, uint32(mask)))
}

type BDTBUPR struct{ mmio.U32 }

func (r *BDTBUPR) Bits(mask BDTBUPR_Bits) BDTBUPR_Bits { return BDTBUPR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDTBUPR) StoreBits(mask, b BDTBUPR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDTBUPR) SetBits(mask BDTBUPR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *BDTBUPR) ClearBits(mask BDTBUPR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *BDTBUPR) Load() BDTBUPR_Bits                  { return BDTBUPR_Bits(r.U32.Load()) }
func (r *BDTBUPR) Store(b BDTBUPR_Bits)                { r.U32.Store(uint32(b)) }

func (r *BDTBUPR) AtomicStoreBits(mask, b BDTBUPR_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *BDTBUPR) AtomicSetBits(mask BDTBUPR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDTBUPR) AtomicClearBits(mask BDTBUPR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BDTBUPR_Mask struct{ mmio.UM32 }

func (rm BDTBUPR_Mask) Load() BDTBUPR_Bits   { return BDTBUPR_Bits(rm.UM32.Load()) }
func (rm BDTBUPR_Mask) Store(b BDTBUPR_Bits) { rm.UM32.Store(uint32(b)) }

type BDTCUPR_Bits uint32

func (b BDTCUPR_Bits) Field(mask BDTCUPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDTCUPR_Bits) J(v int) BDTCUPR_Bits {
	return BDTCUPR_Bits(bits.Make32(v, uint32(mask)))
}

type BDTCUPR struct{ mmio.U32 }

func (r *BDTCUPR) Bits(mask BDTCUPR_Bits) BDTCUPR_Bits { return BDTCUPR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDTCUPR) StoreBits(mask, b BDTCUPR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDTCUPR) SetBits(mask BDTCUPR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *BDTCUPR) ClearBits(mask BDTCUPR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *BDTCUPR) Load() BDTCUPR_Bits                  { return BDTCUPR_Bits(r.U32.Load()) }
func (r *BDTCUPR) Store(b BDTCUPR_Bits)                { r.U32.Store(uint32(b)) }

func (r *BDTCUPR) AtomicStoreBits(mask, b BDTCUPR_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *BDTCUPR) AtomicSetBits(mask BDTCUPR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDTCUPR) AtomicClearBits(mask BDTCUPR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BDTCUPR_Mask struct{ mmio.UM32 }

func (rm BDTCUPR_Mask) Load() BDTCUPR_Bits   { return BDTCUPR_Bits(rm.UM32.Load()) }
func (rm BDTCUPR_Mask) Store(b BDTCUPR_Bits) { rm.UM32.Store(uint32(b)) }

type BDTDUPR_Bits uint32

func (b BDTDUPR_Bits) Field(mask BDTDUPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDTDUPR_Bits) J(v int) BDTDUPR_Bits {
	return BDTDUPR_Bits(bits.Make32(v, uint32(mask)))
}

type BDTDUPR struct{ mmio.U32 }

func (r *BDTDUPR) Bits(mask BDTDUPR_Bits) BDTDUPR_Bits { return BDTDUPR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDTDUPR) StoreBits(mask, b BDTDUPR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDTDUPR) SetBits(mask BDTDUPR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *BDTDUPR) ClearBits(mask BDTDUPR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *BDTDUPR) Load() BDTDUPR_Bits                  { return BDTDUPR_Bits(r.U32.Load()) }
func (r *BDTDUPR) Store(b BDTDUPR_Bits)                { r.U32.Store(uint32(b)) }

func (r *BDTDUPR) AtomicStoreBits(mask, b BDTDUPR_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *BDTDUPR) AtomicSetBits(mask BDTDUPR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDTDUPR) AtomicClearBits(mask BDTDUPR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BDTDUPR_Mask struct{ mmio.UM32 }

func (rm BDTDUPR_Mask) Load() BDTDUPR_Bits   { return BDTDUPR_Bits(rm.UM32.Load()) }
func (rm BDTDUPR_Mask) Store(b BDTDUPR_Bits) { rm.UM32.Store(uint32(b)) }

type BDTEUPR_Bits uint32

func (b BDTEUPR_Bits) Field(mask BDTEUPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDTEUPR_Bits) J(v int) BDTEUPR_Bits {
	return BDTEUPR_Bits(bits.Make32(v, uint32(mask)))
}

type BDTEUPR struct{ mmio.U32 }

func (r *BDTEUPR) Bits(mask BDTEUPR_Bits) BDTEUPR_Bits { return BDTEUPR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDTEUPR) StoreBits(mask, b BDTEUPR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDTEUPR) SetBits(mask BDTEUPR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *BDTEUPR) ClearBits(mask BDTEUPR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *BDTEUPR) Load() BDTEUPR_Bits                  { return BDTEUPR_Bits(r.U32.Load()) }
func (r *BDTEUPR) Store(b BDTEUPR_Bits)                { r.U32.Store(uint32(b)) }

func (r *BDTEUPR) AtomicStoreBits(mask, b BDTEUPR_Bits) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *BDTEUPR) AtomicSetBits(mask BDTEUPR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDTEUPR) AtomicClearBits(mask BDTEUPR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BDTEUPR_Mask struct{ mmio.UM32 }

func (rm BDTEUPR_Mask) Load() BDTEUPR_Bits   { return BDTEUPR_Bits(rm.UM32.Load()) }
func (rm BDTEUPR_Mask) Store(b BDTEUPR_Bits) { rm.UM32.Store(uint32(b)) }

type BDMADR_Bits uint32

func (b BDMADR_Bits) Field(mask BDMADR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDMADR_Bits) J(v int) BDMADR_Bits {
	return BDMADR_Bits(bits.Make32(v, uint32(mask)))
}

type BDMADR struct{ mmio.U32 }

func (r *BDMADR) Bits(mask BDMADR_Bits) BDMADR_Bits { return BDMADR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDMADR) StoreBits(mask, b BDMADR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDMADR) SetBits(mask BDMADR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *BDMADR) ClearBits(mask BDMADR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *BDMADR) Load() BDMADR_Bits                 { return BDMADR_Bits(r.U32.Load()) }
func (r *BDMADR) Store(b BDMADR_Bits)               { r.U32.Store(uint32(b)) }

func (r *BDMADR) AtomicStoreBits(mask, b BDMADR_Bits) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *BDMADR) AtomicSetBits(mask BDMADR_Bits)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDMADR) AtomicClearBits(mask BDMADR_Bits)    { r.U32.AtomicClearBits(uint32(mask)) }

type BDMADR_Mask struct{ mmio.UM32 }

func (rm BDMADR_Mask) Load() BDMADR_Bits   { return BDMADR_Bits(rm.UM32.Load()) }
func (rm BDMADR_Mask) Store(b BDMADR_Bits) { rm.UM32.Store(uint32(b)) }
