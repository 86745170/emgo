package opamp

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f303xe/mmap"
)

type OPAMP_Periph struct {
	CSR RCSR
}

func (p *OPAMP_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var OPAMP1 = (*OPAMP_Periph)(unsafe.Pointer(uintptr(mmap.OPAMP1_BASE)))

//emgo:const
var OPAMP = (*OPAMP_Periph)(unsafe.Pointer(uintptr(mmap.OPAMP_BASE)))

//emgo:const
var OPAMP2 = (*OPAMP_Periph)(unsafe.Pointer(uintptr(mmap.OPAMP2_BASE)))

//emgo:const
var OPAMP3 = (*OPAMP_Periph)(unsafe.Pointer(uintptr(mmap.OPAMP3_BASE)))

//emgo:const
var OPAMP4 = (*OPAMP_Periph)(unsafe.Pointer(uintptr(mmap.OPAMP4_BASE)))

type CSR uint32

func (b CSR) Field(mask CSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR) J(v int) CSR {
	return CSR(bits.MakeField32(v, uint32(mask)))
}

type RCSR struct{ mmio.U32 }

func (r *RCSR) Bits(mask CSR) CSR     { return CSR(r.U32.Bits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

func (r *RCSR) AtomicStoreBits(mask, b CSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) AtomicSetBits(mask CSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR) AtomicClearBits(mask CSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *OPAMP_Periph) OPAMPxEN() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(OPAMPxEN)}}
}

func (p *OPAMP_Periph) FORCEVP() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(FORCEVP)}}
}

func (p *OPAMP_Periph) VPSEL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(VPSEL)}}
}

func (p *OPAMP_Periph) VMSEL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(VMSEL)}}
}

func (p *OPAMP_Periph) TCMEN() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TCMEN)}}
}

func (p *OPAMP_Periph) VMSSEL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(VMSSEL)}}
}

func (p *OPAMP_Periph) VPSSEL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(VPSSEL)}}
}

func (p *OPAMP_Periph) CALON() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CALON)}}
}

func (p *OPAMP_Periph) CALSEL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CALSEL)}}
}

func (p *OPAMP_Periph) PGGAIN() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(PGGAIN)}}
}

func (p *OPAMP_Periph) USERTRIM() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(USERTRIM)}}
}

func (p *OPAMP_Periph) TRIMOFFSETP() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TRIMOFFSETP)}}
}

func (p *OPAMP_Periph) TRIMOFFSETN() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TRIMOFFSETN)}}
}

func (p *OPAMP_Periph) TSTREF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TSTREF)}}
}

func (p *OPAMP_Periph) OUTCAL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(OUTCAL)}}
}

func (p *OPAMP_Periph) LOCK() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LOCK)}}
}
