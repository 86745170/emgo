package usb

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f303xe/mmap"
)

type USB_Periph struct {
	EP0R      REP0R
	RESERVED0 RRESERVED0
	EP1R      REP1R
	RESERVED1 RRESERVED1
	EP2R      REP2R
	RESERVED2 RRESERVED2
	EP3R      REP3R
	RESERVED3 RRESERVED3
	EP4R      REP4R
	RESERVED4 RRESERVED4
	EP5R      REP5R
	RESERVED5 RRESERVED5
	EP6R      REP6R
	RESERVED6 RRESERVED6
	EP7R      REP7R
	RESERVED7 [17]RRESERVED7
	CNTR      RCNTR
	RESERVED8 RRESERVED8
	ISTR      RISTR
	RESERVED9 RRESERVED9
	FNR       RFNR
	RESERVEDA RRESERVEDA
	DADDR     RDADDR
	RESERVEDB RRESERVEDB
	BTABLE    RBTABLE
	RESERVEDC RRESERVEDC
	LPMCSR    RLPMCSR
	RESERVEDD RRESERVEDD
}

func (p *USB_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var USB = (*USB_Periph)(unsafe.Pointer(uintptr(mmap.USB_BASE)))

type EP0R uint16

func (b EP0R) Field(mask EP0R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP0R) J(v int) EP0R {
	return EP0R(bits.MakeField32(v, uint32(mask)))
}

type REP0R struct{ mmio.U16 }

func (r *REP0R) Bits(mask EP0R) EP0R    { return EP0R(r.U16.Bits(uint16(mask))) }
func (r *REP0R) StoreBits(mask, b EP0R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP0R) SetBits(mask EP0R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP0R) ClearBits(mask EP0R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP0R) Load() EP0R             { return EP0R(r.U16.Load()) }
func (r *REP0R) Store(b EP0R)           { r.U16.Store(uint16(b)) }

type RMEP0R struct{ mmio.UM16 }

func (rm RMEP0R) Load() EP0R   { return EP0R(rm.UM16.Load()) }
func (rm RMEP0R) Store(b EP0R) { rm.UM16.Store(uint16(b)) }

type RESERVED0 uint16

func (b RESERVED0) Field(mask RESERVED0) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED0) J(v int) RESERVED0 {
	return RESERVED0(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED0 struct{ mmio.U16 }

func (r *RRESERVED0) Bits(mask RESERVED0) RESERVED0 { return RESERVED0(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED0) StoreBits(mask, b RESERVED0)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED0) SetBits(mask RESERVED0)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED0) ClearBits(mask RESERVED0)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED0) Load() RESERVED0               { return RESERVED0(r.U16.Load()) }
func (r *RRESERVED0) Store(b RESERVED0)             { r.U16.Store(uint16(b)) }

type RMRESERVED0 struct{ mmio.UM16 }

func (rm RMRESERVED0) Load() RESERVED0   { return RESERVED0(rm.UM16.Load()) }
func (rm RMRESERVED0) Store(b RESERVED0) { rm.UM16.Store(uint16(b)) }

type EP1R uint16

func (b EP1R) Field(mask EP1R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP1R) J(v int) EP1R {
	return EP1R(bits.MakeField32(v, uint32(mask)))
}

type REP1R struct{ mmio.U16 }

func (r *REP1R) Bits(mask EP1R) EP1R    { return EP1R(r.U16.Bits(uint16(mask))) }
func (r *REP1R) StoreBits(mask, b EP1R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP1R) SetBits(mask EP1R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP1R) ClearBits(mask EP1R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP1R) Load() EP1R             { return EP1R(r.U16.Load()) }
func (r *REP1R) Store(b EP1R)           { r.U16.Store(uint16(b)) }

type RMEP1R struct{ mmio.UM16 }

func (rm RMEP1R) Load() EP1R   { return EP1R(rm.UM16.Load()) }
func (rm RMEP1R) Store(b EP1R) { rm.UM16.Store(uint16(b)) }

type RESERVED1 uint16

func (b RESERVED1) Field(mask RESERVED1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED1) J(v int) RESERVED1 {
	return RESERVED1(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED1 struct{ mmio.U16 }

func (r *RRESERVED1) Bits(mask RESERVED1) RESERVED1 { return RESERVED1(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED1) StoreBits(mask, b RESERVED1)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED1) SetBits(mask RESERVED1)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED1) ClearBits(mask RESERVED1)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED1) Load() RESERVED1               { return RESERVED1(r.U16.Load()) }
func (r *RRESERVED1) Store(b RESERVED1)             { r.U16.Store(uint16(b)) }

type RMRESERVED1 struct{ mmio.UM16 }

func (rm RMRESERVED1) Load() RESERVED1   { return RESERVED1(rm.UM16.Load()) }
func (rm RMRESERVED1) Store(b RESERVED1) { rm.UM16.Store(uint16(b)) }

type EP2R uint16

func (b EP2R) Field(mask EP2R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP2R) J(v int) EP2R {
	return EP2R(bits.MakeField32(v, uint32(mask)))
}

type REP2R struct{ mmio.U16 }

func (r *REP2R) Bits(mask EP2R) EP2R    { return EP2R(r.U16.Bits(uint16(mask))) }
func (r *REP2R) StoreBits(mask, b EP2R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP2R) SetBits(mask EP2R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP2R) ClearBits(mask EP2R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP2R) Load() EP2R             { return EP2R(r.U16.Load()) }
func (r *REP2R) Store(b EP2R)           { r.U16.Store(uint16(b)) }

type RMEP2R struct{ mmio.UM16 }

func (rm RMEP2R) Load() EP2R   { return EP2R(rm.UM16.Load()) }
func (rm RMEP2R) Store(b EP2R) { rm.UM16.Store(uint16(b)) }

type RESERVED2 uint16

func (b RESERVED2) Field(mask RESERVED2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED2) J(v int) RESERVED2 {
	return RESERVED2(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED2 struct{ mmio.U16 }

func (r *RRESERVED2) Bits(mask RESERVED2) RESERVED2 { return RESERVED2(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED2) StoreBits(mask, b RESERVED2)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED2) SetBits(mask RESERVED2)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED2) ClearBits(mask RESERVED2)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED2) Load() RESERVED2               { return RESERVED2(r.U16.Load()) }
func (r *RRESERVED2) Store(b RESERVED2)             { r.U16.Store(uint16(b)) }

type RMRESERVED2 struct{ mmio.UM16 }

func (rm RMRESERVED2) Load() RESERVED2   { return RESERVED2(rm.UM16.Load()) }
func (rm RMRESERVED2) Store(b RESERVED2) { rm.UM16.Store(uint16(b)) }

type EP3R uint16

func (b EP3R) Field(mask EP3R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP3R) J(v int) EP3R {
	return EP3R(bits.MakeField32(v, uint32(mask)))
}

type REP3R struct{ mmio.U16 }

func (r *REP3R) Bits(mask EP3R) EP3R    { return EP3R(r.U16.Bits(uint16(mask))) }
func (r *REP3R) StoreBits(mask, b EP3R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP3R) SetBits(mask EP3R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP3R) ClearBits(mask EP3R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP3R) Load() EP3R             { return EP3R(r.U16.Load()) }
func (r *REP3R) Store(b EP3R)           { r.U16.Store(uint16(b)) }

type RMEP3R struct{ mmio.UM16 }

func (rm RMEP3R) Load() EP3R   { return EP3R(rm.UM16.Load()) }
func (rm RMEP3R) Store(b EP3R) { rm.UM16.Store(uint16(b)) }

type RESERVED3 uint16

func (b RESERVED3) Field(mask RESERVED3) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED3) J(v int) RESERVED3 {
	return RESERVED3(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED3 struct{ mmio.U16 }

func (r *RRESERVED3) Bits(mask RESERVED3) RESERVED3 { return RESERVED3(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED3) StoreBits(mask, b RESERVED3)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED3) SetBits(mask RESERVED3)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED3) ClearBits(mask RESERVED3)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED3) Load() RESERVED3               { return RESERVED3(r.U16.Load()) }
func (r *RRESERVED3) Store(b RESERVED3)             { r.U16.Store(uint16(b)) }

type RMRESERVED3 struct{ mmio.UM16 }

func (rm RMRESERVED3) Load() RESERVED3   { return RESERVED3(rm.UM16.Load()) }
func (rm RMRESERVED3) Store(b RESERVED3) { rm.UM16.Store(uint16(b)) }

type EP4R uint16

func (b EP4R) Field(mask EP4R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP4R) J(v int) EP4R {
	return EP4R(bits.MakeField32(v, uint32(mask)))
}

type REP4R struct{ mmio.U16 }

func (r *REP4R) Bits(mask EP4R) EP4R    { return EP4R(r.U16.Bits(uint16(mask))) }
func (r *REP4R) StoreBits(mask, b EP4R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP4R) SetBits(mask EP4R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP4R) ClearBits(mask EP4R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP4R) Load() EP4R             { return EP4R(r.U16.Load()) }
func (r *REP4R) Store(b EP4R)           { r.U16.Store(uint16(b)) }

type RMEP4R struct{ mmio.UM16 }

func (rm RMEP4R) Load() EP4R   { return EP4R(rm.UM16.Load()) }
func (rm RMEP4R) Store(b EP4R) { rm.UM16.Store(uint16(b)) }

type RESERVED4 uint16

func (b RESERVED4) Field(mask RESERVED4) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED4) J(v int) RESERVED4 {
	return RESERVED4(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED4 struct{ mmio.U16 }

func (r *RRESERVED4) Bits(mask RESERVED4) RESERVED4 { return RESERVED4(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED4) StoreBits(mask, b RESERVED4)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED4) SetBits(mask RESERVED4)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED4) ClearBits(mask RESERVED4)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED4) Load() RESERVED4               { return RESERVED4(r.U16.Load()) }
func (r *RRESERVED4) Store(b RESERVED4)             { r.U16.Store(uint16(b)) }

type RMRESERVED4 struct{ mmio.UM16 }

func (rm RMRESERVED4) Load() RESERVED4   { return RESERVED4(rm.UM16.Load()) }
func (rm RMRESERVED4) Store(b RESERVED4) { rm.UM16.Store(uint16(b)) }

type EP5R uint16

func (b EP5R) Field(mask EP5R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP5R) J(v int) EP5R {
	return EP5R(bits.MakeField32(v, uint32(mask)))
}

type REP5R struct{ mmio.U16 }

func (r *REP5R) Bits(mask EP5R) EP5R    { return EP5R(r.U16.Bits(uint16(mask))) }
func (r *REP5R) StoreBits(mask, b EP5R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP5R) SetBits(mask EP5R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP5R) ClearBits(mask EP5R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP5R) Load() EP5R             { return EP5R(r.U16.Load()) }
func (r *REP5R) Store(b EP5R)           { r.U16.Store(uint16(b)) }

type RMEP5R struct{ mmio.UM16 }

func (rm RMEP5R) Load() EP5R   { return EP5R(rm.UM16.Load()) }
func (rm RMEP5R) Store(b EP5R) { rm.UM16.Store(uint16(b)) }

type RESERVED5 uint16

func (b RESERVED5) Field(mask RESERVED5) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED5) J(v int) RESERVED5 {
	return RESERVED5(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED5 struct{ mmio.U16 }

func (r *RRESERVED5) Bits(mask RESERVED5) RESERVED5 { return RESERVED5(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED5) StoreBits(mask, b RESERVED5)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED5) SetBits(mask RESERVED5)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED5) ClearBits(mask RESERVED5)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED5) Load() RESERVED5               { return RESERVED5(r.U16.Load()) }
func (r *RRESERVED5) Store(b RESERVED5)             { r.U16.Store(uint16(b)) }

type RMRESERVED5 struct{ mmio.UM16 }

func (rm RMRESERVED5) Load() RESERVED5   { return RESERVED5(rm.UM16.Load()) }
func (rm RMRESERVED5) Store(b RESERVED5) { rm.UM16.Store(uint16(b)) }

type EP6R uint16

func (b EP6R) Field(mask EP6R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP6R) J(v int) EP6R {
	return EP6R(bits.MakeField32(v, uint32(mask)))
}

type REP6R struct{ mmio.U16 }

func (r *REP6R) Bits(mask EP6R) EP6R    { return EP6R(r.U16.Bits(uint16(mask))) }
func (r *REP6R) StoreBits(mask, b EP6R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP6R) SetBits(mask EP6R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP6R) ClearBits(mask EP6R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP6R) Load() EP6R             { return EP6R(r.U16.Load()) }
func (r *REP6R) Store(b EP6R)           { r.U16.Store(uint16(b)) }

type RMEP6R struct{ mmio.UM16 }

func (rm RMEP6R) Load() EP6R   { return EP6R(rm.UM16.Load()) }
func (rm RMEP6R) Store(b EP6R) { rm.UM16.Store(uint16(b)) }

type RESERVED6 uint16

func (b RESERVED6) Field(mask RESERVED6) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED6) J(v int) RESERVED6 {
	return RESERVED6(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED6 struct{ mmio.U16 }

func (r *RRESERVED6) Bits(mask RESERVED6) RESERVED6 { return RESERVED6(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED6) StoreBits(mask, b RESERVED6)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED6) SetBits(mask RESERVED6)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED6) ClearBits(mask RESERVED6)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED6) Load() RESERVED6               { return RESERVED6(r.U16.Load()) }
func (r *RRESERVED6) Store(b RESERVED6)             { r.U16.Store(uint16(b)) }

type RMRESERVED6 struct{ mmio.UM16 }

func (rm RMRESERVED6) Load() RESERVED6   { return RESERVED6(rm.UM16.Load()) }
func (rm RMRESERVED6) Store(b RESERVED6) { rm.UM16.Store(uint16(b)) }

type EP7R uint16

func (b EP7R) Field(mask EP7R) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask EP7R) J(v int) EP7R {
	return EP7R(bits.MakeField32(v, uint32(mask)))
}

type REP7R struct{ mmio.U16 }

func (r *REP7R) Bits(mask EP7R) EP7R    { return EP7R(r.U16.Bits(uint16(mask))) }
func (r *REP7R) StoreBits(mask, b EP7R) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *REP7R) SetBits(mask EP7R)      { r.U16.SetBits(uint16(mask)) }
func (r *REP7R) ClearBits(mask EP7R)    { r.U16.ClearBits(uint16(mask)) }
func (r *REP7R) Load() EP7R             { return EP7R(r.U16.Load()) }
func (r *REP7R) Store(b EP7R)           { r.U16.Store(uint16(b)) }

type RMEP7R struct{ mmio.UM16 }

func (rm RMEP7R) Load() EP7R   { return EP7R(rm.UM16.Load()) }
func (rm RMEP7R) Store(b EP7R) { rm.UM16.Store(uint16(b)) }

type RESERVED7 uint16

func (b RESERVED7) Field(mask RESERVED7) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED7) J(v int) RESERVED7 {
	return RESERVED7(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED7 struct{ mmio.U16 }

func (r *RRESERVED7) Bits(mask RESERVED7) RESERVED7 { return RESERVED7(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED7) StoreBits(mask, b RESERVED7)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED7) SetBits(mask RESERVED7)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED7) ClearBits(mask RESERVED7)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED7) Load() RESERVED7               { return RESERVED7(r.U16.Load()) }
func (r *RRESERVED7) Store(b RESERVED7)             { r.U16.Store(uint16(b)) }

type RMRESERVED7 struct{ mmio.UM16 }

func (rm RMRESERVED7) Load() RESERVED7   { return RESERVED7(rm.UM16.Load()) }
func (rm RMRESERVED7) Store(b RESERVED7) { rm.UM16.Store(uint16(b)) }

type CNTR uint16

func (b CNTR) Field(mask CNTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CNTR) J(v int) CNTR {
	return CNTR(bits.MakeField32(v, uint32(mask)))
}

type RCNTR struct{ mmio.U16 }

func (r *RCNTR) Bits(mask CNTR) CNTR    { return CNTR(r.U16.Bits(uint16(mask))) }
func (r *RCNTR) StoreBits(mask, b CNTR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RCNTR) SetBits(mask CNTR)      { r.U16.SetBits(uint16(mask)) }
func (r *RCNTR) ClearBits(mask CNTR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RCNTR) Load() CNTR             { return CNTR(r.U16.Load()) }
func (r *RCNTR) Store(b CNTR)           { r.U16.Store(uint16(b)) }

type RMCNTR struct{ mmio.UM16 }

func (rm RMCNTR) Load() CNTR   { return CNTR(rm.UM16.Load()) }
func (rm RMCNTR) Store(b CNTR) { rm.UM16.Store(uint16(b)) }

func (p *USB_Periph) CTRM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(CTRM)}}
}

func (p *USB_Periph) PMAOVR() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(PMAOVR)}}
}

func (p *USB_Periph) ERRM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(ERRM)}}
}

func (p *USB_Periph) WKUPM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(WKUPM)}}
}

func (p *USB_Periph) SUSPM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(SUSPM)}}
}

func (p *USB_Periph) RESETM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(RESETM)}}
}

func (p *USB_Periph) SOFM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(SOFM)}}
}

func (p *USB_Periph) ESOFM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(ESOFM)}}
}

func (p *USB_Periph) L1REQM() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(L1REQM)}}
}

func (p *USB_Periph) L1RESUME() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(L1RESUME)}}
}

func (p *USB_Periph) RESUME() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(RESUME)}}
}

func (p *USB_Periph) FSUSP() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(FSUSP)}}
}

func (p *USB_Periph) LPMODE() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(LPMODE)}}
}

func (p *USB_Periph) PDWN() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(PDWN)}}
}

func (p *USB_Periph) FRES() RMCNTR {
	return RMCNTR{mmio.UM16{&p.CNTR.U16, uint16(FRES)}}
}

type RESERVED8 uint16

func (b RESERVED8) Field(mask RESERVED8) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED8) J(v int) RESERVED8 {
	return RESERVED8(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED8 struct{ mmio.U16 }

func (r *RRESERVED8) Bits(mask RESERVED8) RESERVED8 { return RESERVED8(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED8) StoreBits(mask, b RESERVED8)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED8) SetBits(mask RESERVED8)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED8) ClearBits(mask RESERVED8)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED8) Load() RESERVED8               { return RESERVED8(r.U16.Load()) }
func (r *RRESERVED8) Store(b RESERVED8)             { r.U16.Store(uint16(b)) }

type RMRESERVED8 struct{ mmio.UM16 }

func (rm RMRESERVED8) Load() RESERVED8   { return RESERVED8(rm.UM16.Load()) }
func (rm RMRESERVED8) Store(b RESERVED8) { rm.UM16.Store(uint16(b)) }

type ISTR uint16

func (b ISTR) Field(mask ISTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISTR) J(v int) ISTR {
	return ISTR(bits.MakeField32(v, uint32(mask)))
}

type RISTR struct{ mmio.U16 }

func (r *RISTR) Bits(mask ISTR) ISTR    { return ISTR(r.U16.Bits(uint16(mask))) }
func (r *RISTR) StoreBits(mask, b ISTR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RISTR) SetBits(mask ISTR)      { r.U16.SetBits(uint16(mask)) }
func (r *RISTR) ClearBits(mask ISTR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RISTR) Load() ISTR             { return ISTR(r.U16.Load()) }
func (r *RISTR) Store(b ISTR)           { r.U16.Store(uint16(b)) }

type RMISTR struct{ mmio.UM16 }

func (rm RMISTR) Load() ISTR   { return ISTR(rm.UM16.Load()) }
func (rm RMISTR) Store(b ISTR) { rm.UM16.Store(uint16(b)) }

func (p *USB_Periph) CTR() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(CTR)}}
}

func (p *USB_Periph) PMAOVR() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(PMAOVR)}}
}

func (p *USB_Periph) ERR() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(ERR)}}
}

func (p *USB_Periph) WKUP() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(WKUP)}}
}

func (p *USB_Periph) SUSP() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(SUSP)}}
}

func (p *USB_Periph) RESET() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(RESET)}}
}

func (p *USB_Periph) SOF() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(SOF)}}
}

func (p *USB_Periph) ESOF() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(ESOF)}}
}

func (p *USB_Periph) L1REQ() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(L1REQ)}}
}

func (p *USB_Periph) DIR() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(DIR)}}
}

func (p *USB_Periph) EP_ID() RMISTR {
	return RMISTR{mmio.UM16{&p.ISTR.U16, uint16(EP_ID)}}
}

type RESERVED9 uint16

func (b RESERVED9) Field(mask RESERVED9) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVED9) J(v int) RESERVED9 {
	return RESERVED9(bits.MakeField32(v, uint32(mask)))
}

type RRESERVED9 struct{ mmio.U16 }

func (r *RRESERVED9) Bits(mask RESERVED9) RESERVED9 { return RESERVED9(r.U16.Bits(uint16(mask))) }
func (r *RRESERVED9) StoreBits(mask, b RESERVED9)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVED9) SetBits(mask RESERVED9)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVED9) ClearBits(mask RESERVED9)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVED9) Load() RESERVED9               { return RESERVED9(r.U16.Load()) }
func (r *RRESERVED9) Store(b RESERVED9)             { r.U16.Store(uint16(b)) }

type RMRESERVED9 struct{ mmio.UM16 }

func (rm RMRESERVED9) Load() RESERVED9   { return RESERVED9(rm.UM16.Load()) }
func (rm RMRESERVED9) Store(b RESERVED9) { rm.UM16.Store(uint16(b)) }

type FNR uint16

func (b FNR) Field(mask FNR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FNR) J(v int) FNR {
	return FNR(bits.MakeField32(v, uint32(mask)))
}

type RFNR struct{ mmio.U16 }

func (r *RFNR) Bits(mask FNR) FNR     { return FNR(r.U16.Bits(uint16(mask))) }
func (r *RFNR) StoreBits(mask, b FNR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RFNR) SetBits(mask FNR)      { r.U16.SetBits(uint16(mask)) }
func (r *RFNR) ClearBits(mask FNR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RFNR) Load() FNR             { return FNR(r.U16.Load()) }
func (r *RFNR) Store(b FNR)           { r.U16.Store(uint16(b)) }

type RMFNR struct{ mmio.UM16 }

func (rm RMFNR) Load() FNR   { return FNR(rm.UM16.Load()) }
func (rm RMFNR) Store(b FNR) { rm.UM16.Store(uint16(b)) }

func (p *USB_Periph) RXDP() RMFNR {
	return RMFNR{mmio.UM16{&p.FNR.U16, uint16(RXDP)}}
}

func (p *USB_Periph) RXDM() RMFNR {
	return RMFNR{mmio.UM16{&p.FNR.U16, uint16(RXDM)}}
}

func (p *USB_Periph) LCK() RMFNR {
	return RMFNR{mmio.UM16{&p.FNR.U16, uint16(LCK)}}
}

func (p *USB_Periph) LSOF() RMFNR {
	return RMFNR{mmio.UM16{&p.FNR.U16, uint16(LSOF)}}
}

func (p *USB_Periph) FN() RMFNR {
	return RMFNR{mmio.UM16{&p.FNR.U16, uint16(FN)}}
}

type RESERVEDA uint16

func (b RESERVEDA) Field(mask RESERVEDA) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVEDA) J(v int) RESERVEDA {
	return RESERVEDA(bits.MakeField32(v, uint32(mask)))
}

type RRESERVEDA struct{ mmio.U16 }

func (r *RRESERVEDA) Bits(mask RESERVEDA) RESERVEDA { return RESERVEDA(r.U16.Bits(uint16(mask))) }
func (r *RRESERVEDA) StoreBits(mask, b RESERVEDA)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVEDA) SetBits(mask RESERVEDA)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVEDA) ClearBits(mask RESERVEDA)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVEDA) Load() RESERVEDA               { return RESERVEDA(r.U16.Load()) }
func (r *RRESERVEDA) Store(b RESERVEDA)             { r.U16.Store(uint16(b)) }

type RMRESERVEDA struct{ mmio.UM16 }

func (rm RMRESERVEDA) Load() RESERVEDA   { return RESERVEDA(rm.UM16.Load()) }
func (rm RMRESERVEDA) Store(b RESERVEDA) { rm.UM16.Store(uint16(b)) }

type DADDR uint16

func (b DADDR) Field(mask DADDR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DADDR) J(v int) DADDR {
	return DADDR(bits.MakeField32(v, uint32(mask)))
}

type RDADDR struct{ mmio.U16 }

func (r *RDADDR) Bits(mask DADDR) DADDR   { return DADDR(r.U16.Bits(uint16(mask))) }
func (r *RDADDR) StoreBits(mask, b DADDR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDADDR) SetBits(mask DADDR)      { r.U16.SetBits(uint16(mask)) }
func (r *RDADDR) ClearBits(mask DADDR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDADDR) Load() DADDR             { return DADDR(r.U16.Load()) }
func (r *RDADDR) Store(b DADDR)           { r.U16.Store(uint16(b)) }

type RMDADDR struct{ mmio.UM16 }

func (rm RMDADDR) Load() DADDR   { return DADDR(rm.UM16.Load()) }
func (rm RMDADDR) Store(b DADDR) { rm.UM16.Store(uint16(b)) }

func (p *USB_Periph) EF() RMDADDR {
	return RMDADDR{mmio.UM16{&p.DADDR.U16, uint16(EF)}}
}

func (p *USB_Periph) ADD() RMDADDR {
	return RMDADDR{mmio.UM16{&p.DADDR.U16, uint16(ADD)}}
}

type RESERVEDB uint16

func (b RESERVEDB) Field(mask RESERVEDB) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVEDB) J(v int) RESERVEDB {
	return RESERVEDB(bits.MakeField32(v, uint32(mask)))
}

type RRESERVEDB struct{ mmio.U16 }

func (r *RRESERVEDB) Bits(mask RESERVEDB) RESERVEDB { return RESERVEDB(r.U16.Bits(uint16(mask))) }
func (r *RRESERVEDB) StoreBits(mask, b RESERVEDB)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVEDB) SetBits(mask RESERVEDB)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVEDB) ClearBits(mask RESERVEDB)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVEDB) Load() RESERVEDB               { return RESERVEDB(r.U16.Load()) }
func (r *RRESERVEDB) Store(b RESERVEDB)             { r.U16.Store(uint16(b)) }

type RMRESERVEDB struct{ mmio.UM16 }

func (rm RMRESERVEDB) Load() RESERVEDB   { return RESERVEDB(rm.UM16.Load()) }
func (rm RMRESERVEDB) Store(b RESERVEDB) { rm.UM16.Store(uint16(b)) }

type BTABLE uint16

func (b BTABLE) Field(mask BTABLE) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BTABLE) J(v int) BTABLE {
	return BTABLE(bits.MakeField32(v, uint32(mask)))
}

type RBTABLE struct{ mmio.U16 }

func (r *RBTABLE) Bits(mask BTABLE) BTABLE  { return BTABLE(r.U16.Bits(uint16(mask))) }
func (r *RBTABLE) StoreBits(mask, b BTABLE) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RBTABLE) SetBits(mask BTABLE)      { r.U16.SetBits(uint16(mask)) }
func (r *RBTABLE) ClearBits(mask BTABLE)    { r.U16.ClearBits(uint16(mask)) }
func (r *RBTABLE) Load() BTABLE             { return BTABLE(r.U16.Load()) }
func (r *RBTABLE) Store(b BTABLE)           { r.U16.Store(uint16(b)) }

type RMBTABLE struct{ mmio.UM16 }

func (rm RMBTABLE) Load() BTABLE   { return BTABLE(rm.UM16.Load()) }
func (rm RMBTABLE) Store(b BTABLE) { rm.UM16.Store(uint16(b)) }

type RESERVEDC uint16

func (b RESERVEDC) Field(mask RESERVEDC) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVEDC) J(v int) RESERVEDC {
	return RESERVEDC(bits.MakeField32(v, uint32(mask)))
}

type RRESERVEDC struct{ mmio.U16 }

func (r *RRESERVEDC) Bits(mask RESERVEDC) RESERVEDC { return RESERVEDC(r.U16.Bits(uint16(mask))) }
func (r *RRESERVEDC) StoreBits(mask, b RESERVEDC)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVEDC) SetBits(mask RESERVEDC)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVEDC) ClearBits(mask RESERVEDC)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVEDC) Load() RESERVEDC               { return RESERVEDC(r.U16.Load()) }
func (r *RRESERVEDC) Store(b RESERVEDC)             { r.U16.Store(uint16(b)) }

type RMRESERVEDC struct{ mmio.UM16 }

func (rm RMRESERVEDC) Load() RESERVEDC   { return RESERVEDC(rm.UM16.Load()) }
func (rm RMRESERVEDC) Store(b RESERVEDC) { rm.UM16.Store(uint16(b)) }

type LPMCSR uint16

func (b LPMCSR) Field(mask LPMCSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask LPMCSR) J(v int) LPMCSR {
	return LPMCSR(bits.MakeField32(v, uint32(mask)))
}

type RLPMCSR struct{ mmio.U16 }

func (r *RLPMCSR) Bits(mask LPMCSR) LPMCSR  { return LPMCSR(r.U16.Bits(uint16(mask))) }
func (r *RLPMCSR) StoreBits(mask, b LPMCSR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RLPMCSR) SetBits(mask LPMCSR)      { r.U16.SetBits(uint16(mask)) }
func (r *RLPMCSR) ClearBits(mask LPMCSR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RLPMCSR) Load() LPMCSR             { return LPMCSR(r.U16.Load()) }
func (r *RLPMCSR) Store(b LPMCSR)           { r.U16.Store(uint16(b)) }

type RMLPMCSR struct{ mmio.UM16 }

func (rm RMLPMCSR) Load() LPMCSR   { return LPMCSR(rm.UM16.Load()) }
func (rm RMLPMCSR) Store(b LPMCSR) { rm.UM16.Store(uint16(b)) }

func (p *USB_Periph) BESL() RMLPMCSR {
	return RMLPMCSR{mmio.UM16{&p.LPMCSR.U16, uint16(BESL)}}
}

func (p *USB_Periph) REMWAKE() RMLPMCSR {
	return RMLPMCSR{mmio.UM16{&p.LPMCSR.U16, uint16(REMWAKE)}}
}

func (p *USB_Periph) LPMACK() RMLPMCSR {
	return RMLPMCSR{mmio.UM16{&p.LPMCSR.U16, uint16(LPMACK)}}
}

func (p *USB_Periph) LMPEN() RMLPMCSR {
	return RMLPMCSR{mmio.UM16{&p.LPMCSR.U16, uint16(LMPEN)}}
}

type RESERVEDD uint16

func (b RESERVEDD) Field(mask RESERVEDD) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RESERVEDD) J(v int) RESERVEDD {
	return RESERVEDD(bits.MakeField32(v, uint32(mask)))
}

type RRESERVEDD struct{ mmio.U16 }

func (r *RRESERVEDD) Bits(mask RESERVEDD) RESERVEDD { return RESERVEDD(r.U16.Bits(uint16(mask))) }
func (r *RRESERVEDD) StoreBits(mask, b RESERVEDD)   { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRESERVEDD) SetBits(mask RESERVEDD)        { r.U16.SetBits(uint16(mask)) }
func (r *RRESERVEDD) ClearBits(mask RESERVEDD)      { r.U16.ClearBits(uint16(mask)) }
func (r *RRESERVEDD) Load() RESERVEDD               { return RESERVEDD(r.U16.Load()) }
func (r *RRESERVEDD) Store(b RESERVEDD)             { r.U16.Store(uint16(b)) }

type RMRESERVEDD struct{ mmio.UM16 }

func (rm RMRESERVEDD) Load() RESERVEDD   { return RESERVEDD(rm.UM16.Load()) }
func (rm RMRESERVEDD) Store(b RESERVEDD) { rm.UM16.Store(uint16(b)) }
