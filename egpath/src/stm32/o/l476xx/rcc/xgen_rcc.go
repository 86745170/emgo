package rcc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type RCC_Periph struct {
	CR          RCR
	ICSCR       RICSCR
	CFGR        RCFGR
	PLLCFGR     RPLLCFGR
	PLLSAI1CFGR RPLLSAI1CFGR
	PLLSAI2CFGR RPLLSAI2CFGR
	CIER        RCIER
	CIFR        RCIFR
	CICR        RCICR
	_           uint32
	AHB1RSTR    RAHB1RSTR
	AHB2RSTR    RAHB2RSTR
	AHB3RSTR    RAHB3RSTR
	_           uint32
	APB1RSTR1   RAPB1RSTR1
	APB1RSTR2   RAPB1RSTR2
	APB2RSTR    RAPB2RSTR
	_           uint32
	AHB1ENR     RAHB1ENR
	AHB2ENR     RAHB2ENR
	AHB3ENR     RAHB3ENR
	_           uint32
	APB1ENR1    RAPB1ENR1
	APB1ENR2    RAPB1ENR2
	APB2ENR     RAPB2ENR
	_           uint32
	AHB1SMENR   RAHB1SMENR
	AHB2SMENR   RAHB2SMENR
	AHB3SMENR   RAHB3SMENR
	_           uint32
	APB1SMENR1  RAPB1SMENR1
	APB1SMENR2  RAPB1SMENR2
	APB2SMENR   RAPB2SMENR
	_           uint32
	CCIPR       RCCIPR
	_           uint32
	BDCR        RBDCR
	CSR         RCSR
}

func (p *RCC_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var RCC = (*RCC_Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE)))

type CR uint32

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.MakeField32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicStoreBits(mask, b CR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR) AtomicSetBits(mask CR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask CR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) MSION() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(MSION)}}
}

func (p *RCC_Periph) MSIRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(MSIRDY)}}
}

func (p *RCC_Periph) MSIPLLEN() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(MSIPLLEN)}}
}

func (p *RCC_Periph) MSIRGSEL() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(MSIRGSEL)}}
}

func (p *RCC_Periph) MSIRANGE() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(MSIRANGE)}}
}

func (p *RCC_Periph) HSION() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSION)}}
}

func (p *RCC_Periph) HSIKERON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIKERON)}}
}

func (p *RCC_Periph) HSIRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIRDY)}}
}

func (p *RCC_Periph) HSIASFS() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSIASFS)}}
}

func (p *RCC_Periph) HSEON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSEON)}}
}

func (p *RCC_Periph) HSERDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSERDY)}}
}

func (p *RCC_Periph) HSEBYP() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(HSEBYP)}}
}

func (p *RCC_Periph) CSSON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CSSON)}}
}

func (p *RCC_Periph) PLLON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLON)}}
}

func (p *RCC_Periph) PLLRDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLRDY)}}
}

func (p *RCC_Periph) PLLSAI1ON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLSAI1ON)}}
}

func (p *RCC_Periph) PLLSAI1RDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLSAI1RDY)}}
}

func (p *RCC_Periph) PLLSAI2ON() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLSAI2ON)}}
}

func (p *RCC_Periph) PLLSAI2RDY() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PLLSAI2RDY)}}
}

type ICSCR uint32

func (b ICSCR) Field(mask ICSCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICSCR) J(v int) ICSCR {
	return ICSCR(bits.MakeField32(v, uint32(mask)))
}

type RICSCR struct{ mmio.U32 }

func (r *RICSCR) Bits(mask ICSCR) ICSCR   { return ICSCR(r.U32.Bits(uint32(mask))) }
func (r *RICSCR) StoreBits(mask, b ICSCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICSCR) SetBits(mask ICSCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RICSCR) ClearBits(mask ICSCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RICSCR) Load() ICSCR             { return ICSCR(r.U32.Load()) }
func (r *RICSCR) Store(b ICSCR)           { r.U32.Store(uint32(b)) }

func (r *RICSCR) AtomicStoreBits(mask, b ICSCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RICSCR) AtomicSetBits(mask ICSCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RICSCR) AtomicClearBits(mask ICSCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMICSCR struct{ mmio.UM32 }

func (rm RMICSCR) Load() ICSCR   { return ICSCR(rm.UM32.Load()) }
func (rm RMICSCR) Store(b ICSCR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) MSICAL() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(MSICAL)}}
}

func (p *RCC_Periph) MSITRIM() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(MSITRIM)}}
}

func (p *RCC_Periph) HSICAL() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(HSICAL)}}
}

func (p *RCC_Periph) HSITRIM() RMICSCR {
	return RMICSCR{mmio.UM32{&p.ICSCR.U32, uint32(HSITRIM)}}
}

type CFGR uint32

func (b CFGR) Field(mask CFGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR) J(v int) CFGR {
	return CFGR(bits.MakeField32(v, uint32(mask)))
}

type RCFGR struct{ mmio.U32 }

func (r *RCFGR) Bits(mask CFGR) CFGR    { return CFGR(r.U32.Bits(uint32(mask))) }
func (r *RCFGR) StoreBits(mask, b CFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) SetBits(mask CFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR) ClearBits(mask CFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR) Load() CFGR             { return CFGR(r.U32.Load()) }
func (r *RCFGR) Store(b CFGR)           { r.U32.Store(uint32(b)) }

func (r *RCFGR) AtomicStoreBits(mask, b CFGR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) AtomicSetBits(mask CFGR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCFGR) AtomicClearBits(mask CFGR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCFGR struct{ mmio.UM32 }

func (rm RMCFGR) Load() CFGR   { return CFGR(rm.UM32.Load()) }
func (rm RMCFGR) Store(b CFGR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SW() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(SW)}}
}

func (p *RCC_Periph) SWS() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(SWS)}}
}

func (p *RCC_Periph) HPRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(HPRE)}}
}

func (p *RCC_Periph) PPRE1() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(PPRE1)}}
}

func (p *RCC_Periph) PPRE2() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(PPRE2)}}
}

func (p *RCC_Periph) STOPWUCK() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(STOPWUCK)}}
}

func (p *RCC_Periph) MCOSEL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCOSEL)}}
}

func (p *RCC_Periph) MCOPRE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(MCOPRE)}}
}

type PLLCFGR uint32

func (b PLLCFGR) Field(mask PLLCFGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLCFGR) J(v int) PLLCFGR {
	return PLLCFGR(bits.MakeField32(v, uint32(mask)))
}

type RPLLCFGR struct{ mmio.U32 }

func (r *RPLLCFGR) Bits(mask PLLCFGR) PLLCFGR { return PLLCFGR(r.U32.Bits(uint32(mask))) }
func (r *RPLLCFGR) StoreBits(mask, b PLLCFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLLCFGR) SetBits(mask PLLCFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLLCFGR) ClearBits(mask PLLCFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLLCFGR) Load() PLLCFGR             { return PLLCFGR(r.U32.Load()) }
func (r *RPLLCFGR) Store(b PLLCFGR)           { r.U32.Store(uint32(b)) }

func (r *RPLLCFGR) AtomicStoreBits(mask, b PLLCFGR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPLLCFGR) AtomicSetBits(mask PLLCFGR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPLLCFGR) AtomicClearBits(mask PLLCFGR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPLLCFGR struct{ mmio.UM32 }

func (rm RMPLLCFGR) Load() PLLCFGR   { return PLLCFGR(rm.UM32.Load()) }
func (rm RMPLLCFGR) Store(b PLLCFGR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) PLLSRC() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLSRC)}}
}

func (p *RCC_Periph) PLLM() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLM)}}
}

func (p *RCC_Periph) PLLN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLN)}}
}

func (p *RCC_Periph) PLLPEN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLPEN)}}
}

func (p *RCC_Periph) PLLP() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLP)}}
}

func (p *RCC_Periph) PLLQEN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLQEN)}}
}

func (p *RCC_Periph) PLLQ() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLQ)}}
}

func (p *RCC_Periph) PLLREN() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLREN)}}
}

func (p *RCC_Periph) PLLR() RMPLLCFGR {
	return RMPLLCFGR{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLR)}}
}

type PLLSAI1CFGR uint32

func (b PLLSAI1CFGR) Field(mask PLLSAI1CFGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLSAI1CFGR) J(v int) PLLSAI1CFGR {
	return PLLSAI1CFGR(bits.MakeField32(v, uint32(mask)))
}

type RPLLSAI1CFGR struct{ mmio.U32 }

func (r *RPLLSAI1CFGR) Bits(mask PLLSAI1CFGR) PLLSAI1CFGR {
	return PLLSAI1CFGR(r.U32.Bits(uint32(mask)))
}
func (r *RPLLSAI1CFGR) StoreBits(mask, b PLLSAI1CFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLLSAI1CFGR) SetBits(mask PLLSAI1CFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLLSAI1CFGR) ClearBits(mask PLLSAI1CFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLLSAI1CFGR) Load() PLLSAI1CFGR             { return PLLSAI1CFGR(r.U32.Load()) }
func (r *RPLLSAI1CFGR) Store(b PLLSAI1CFGR)           { r.U32.Store(uint32(b)) }

func (r *RPLLSAI1CFGR) AtomicStoreBits(mask, b PLLSAI1CFGR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RPLLSAI1CFGR) AtomicSetBits(mask PLLSAI1CFGR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPLLSAI1CFGR) AtomicClearBits(mask PLLSAI1CFGR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMPLLSAI1CFGR struct{ mmio.UM32 }

func (rm RMPLLSAI1CFGR) Load() PLLSAI1CFGR   { return PLLSAI1CFGR(rm.UM32.Load()) }
func (rm RMPLLSAI1CFGR) Store(b PLLSAI1CFGR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) PLLSAI1N() RMPLLSAI1CFGR {
	return RMPLLSAI1CFGR{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1N)}}
}

func (p *RCC_Periph) PLLSAI1PEN() RMPLLSAI1CFGR {
	return RMPLLSAI1CFGR{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1PEN)}}
}

func (p *RCC_Periph) PLLSAI1P() RMPLLSAI1CFGR {
	return RMPLLSAI1CFGR{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1P)}}
}

func (p *RCC_Periph) PLLSAI1QEN() RMPLLSAI1CFGR {
	return RMPLLSAI1CFGR{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1QEN)}}
}

func (p *RCC_Periph) PLLSAI1Q() RMPLLSAI1CFGR {
	return RMPLLSAI1CFGR{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1Q)}}
}

func (p *RCC_Periph) PLLSAI1REN() RMPLLSAI1CFGR {
	return RMPLLSAI1CFGR{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1REN)}}
}

func (p *RCC_Periph) PLLSAI1R() RMPLLSAI1CFGR {
	return RMPLLSAI1CFGR{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1R)}}
}

type PLLSAI2CFGR uint32

func (b PLLSAI2CFGR) Field(mask PLLSAI2CFGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLSAI2CFGR) J(v int) PLLSAI2CFGR {
	return PLLSAI2CFGR(bits.MakeField32(v, uint32(mask)))
}

type RPLLSAI2CFGR struct{ mmio.U32 }

func (r *RPLLSAI2CFGR) Bits(mask PLLSAI2CFGR) PLLSAI2CFGR {
	return PLLSAI2CFGR(r.U32.Bits(uint32(mask)))
}
func (r *RPLLSAI2CFGR) StoreBits(mask, b PLLSAI2CFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPLLSAI2CFGR) SetBits(mask PLLSAI2CFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RPLLSAI2CFGR) ClearBits(mask PLLSAI2CFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPLLSAI2CFGR) Load() PLLSAI2CFGR             { return PLLSAI2CFGR(r.U32.Load()) }
func (r *RPLLSAI2CFGR) Store(b PLLSAI2CFGR)           { r.U32.Store(uint32(b)) }

func (r *RPLLSAI2CFGR) AtomicStoreBits(mask, b PLLSAI2CFGR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RPLLSAI2CFGR) AtomicSetBits(mask PLLSAI2CFGR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPLLSAI2CFGR) AtomicClearBits(mask PLLSAI2CFGR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMPLLSAI2CFGR struct{ mmio.UM32 }

func (rm RMPLLSAI2CFGR) Load() PLLSAI2CFGR   { return PLLSAI2CFGR(rm.UM32.Load()) }
func (rm RMPLLSAI2CFGR) Store(b PLLSAI2CFGR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) PLLSAI2N() RMPLLSAI2CFGR {
	return RMPLLSAI2CFGR{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2N)}}
}

func (p *RCC_Periph) PLLSAI2PEN() RMPLLSAI2CFGR {
	return RMPLLSAI2CFGR{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2PEN)}}
}

func (p *RCC_Periph) PLLSAI2P() RMPLLSAI2CFGR {
	return RMPLLSAI2CFGR{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2P)}}
}

func (p *RCC_Periph) PLLSAI2REN() RMPLLSAI2CFGR {
	return RMPLLSAI2CFGR{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2REN)}}
}

func (p *RCC_Periph) PLLSAI2R() RMPLLSAI2CFGR {
	return RMPLLSAI2CFGR{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2R)}}
}

type CIER uint32

func (b CIER) Field(mask CIER) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CIER) J(v int) CIER {
	return CIER(bits.MakeField32(v, uint32(mask)))
}

type RCIER struct{ mmio.U32 }

func (r *RCIER) Bits(mask CIER) CIER    { return CIER(r.U32.Bits(uint32(mask))) }
func (r *RCIER) StoreBits(mask, b CIER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCIER) SetBits(mask CIER)      { r.U32.SetBits(uint32(mask)) }
func (r *RCIER) ClearBits(mask CIER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCIER) Load() CIER             { return CIER(r.U32.Load()) }
func (r *RCIER) Store(b CIER)           { r.U32.Store(uint32(b)) }

func (r *RCIER) AtomicStoreBits(mask, b CIER) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCIER) AtomicSetBits(mask CIER)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCIER) AtomicClearBits(mask CIER)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCIER struct{ mmio.UM32 }

func (rm RMCIER) Load() CIER   { return CIER(rm.UM32.Load()) }
func (rm RMCIER) Store(b CIER) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSIRDYIE)}}
}

func (p *RCC_Periph) LSERDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSERDYIE)}}
}

func (p *RCC_Periph) MSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(MSIRDYIE)}}
}

func (p *RCC_Periph) HSIRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(HSIRDYIE)}}
}

func (p *RCC_Periph) HSERDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(HSERDYIE)}}
}

func (p *RCC_Periph) PLLRDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(PLLRDYIE)}}
}

func (p *RCC_Periph) PLLSAI1RDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(PLLSAI1RDYIE)}}
}

func (p *RCC_Periph) PLLSAI2RDYIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(PLLSAI2RDYIE)}}
}

func (p *RCC_Periph) LSECSSIE() RMCIER {
	return RMCIER{mmio.UM32{&p.CIER.U32, uint32(LSECSSIE)}}
}

type CIFR uint32

func (b CIFR) Field(mask CIFR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CIFR) J(v int) CIFR {
	return CIFR(bits.MakeField32(v, uint32(mask)))
}

type RCIFR struct{ mmio.U32 }

func (r *RCIFR) Bits(mask CIFR) CIFR    { return CIFR(r.U32.Bits(uint32(mask))) }
func (r *RCIFR) StoreBits(mask, b CIFR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCIFR) SetBits(mask CIFR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCIFR) ClearBits(mask CIFR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCIFR) Load() CIFR             { return CIFR(r.U32.Load()) }
func (r *RCIFR) Store(b CIFR)           { r.U32.Store(uint32(b)) }

func (r *RCIFR) AtomicStoreBits(mask, b CIFR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCIFR) AtomicSetBits(mask CIFR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCIFR) AtomicClearBits(mask CIFR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCIFR struct{ mmio.UM32 }

func (rm RMCIFR) Load() CIFR   { return CIFR(rm.UM32.Load()) }
func (rm RMCIFR) Store(b CIFR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSIRDYF)}}
}

func (p *RCC_Periph) LSERDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSERDYF)}}
}

func (p *RCC_Periph) MSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(MSIRDYF)}}
}

func (p *RCC_Periph) HSIRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSIRDYF)}}
}

func (p *RCC_Periph) HSERDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(HSERDYF)}}
}

func (p *RCC_Periph) PLLRDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(PLLRDYF)}}
}

func (p *RCC_Periph) PLLSAI1RDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(PLLSAI1RDYF)}}
}

func (p *RCC_Periph) PLLSAI2RDYF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(PLLSAI2RDYF)}}
}

func (p *RCC_Periph) CSSF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(CSSF)}}
}

func (p *RCC_Periph) LSECSSF() RMCIFR {
	return RMCIFR{mmio.UM32{&p.CIFR.U32, uint32(LSECSSF)}}
}

type CICR uint32

func (b CICR) Field(mask CICR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CICR) J(v int) CICR {
	return CICR(bits.MakeField32(v, uint32(mask)))
}

type RCICR struct{ mmio.U32 }

func (r *RCICR) Bits(mask CICR) CICR    { return CICR(r.U32.Bits(uint32(mask))) }
func (r *RCICR) StoreBits(mask, b CICR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCICR) SetBits(mask CICR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCICR) ClearBits(mask CICR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCICR) Load() CICR             { return CICR(r.U32.Load()) }
func (r *RCICR) Store(b CICR)           { r.U32.Store(uint32(b)) }

func (r *RCICR) AtomicStoreBits(mask, b CICR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCICR) AtomicSetBits(mask CICR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCICR) AtomicClearBits(mask CICR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCICR struct{ mmio.UM32 }

func (rm RMCICR) Load() CICR   { return CICR(rm.UM32.Load()) }
func (rm RMCICR) Store(b CICR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSIRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSIRDYC)}}
}

func (p *RCC_Periph) LSERDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSERDYC)}}
}

func (p *RCC_Periph) MSIRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(MSIRDYC)}}
}

func (p *RCC_Periph) HSIRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSIRDYC)}}
}

func (p *RCC_Periph) HSERDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(HSERDYC)}}
}

func (p *RCC_Periph) PLLRDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(PLLRDYC)}}
}

func (p *RCC_Periph) PLLSAI1RDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(PLLSAI1RDYC)}}
}

func (p *RCC_Periph) PLLSAI2RDYC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(PLLSAI2RDYC)}}
}

func (p *RCC_Periph) CSSC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(CSSC)}}
}

func (p *RCC_Periph) LSECSSC() RMCICR {
	return RMCICR{mmio.UM32{&p.CICR.U32, uint32(LSECSSC)}}
}

type AHB1RSTR uint32

func (b AHB1RSTR) Field(mask AHB1RSTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1RSTR) J(v int) AHB1RSTR {
	return AHB1RSTR(bits.MakeField32(v, uint32(mask)))
}

type RAHB1RSTR struct{ mmio.U32 }

func (r *RAHB1RSTR) Bits(mask AHB1RSTR) AHB1RSTR { return AHB1RSTR(r.U32.Bits(uint32(mask))) }
func (r *RAHB1RSTR) StoreBits(mask, b AHB1RSTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1RSTR) SetBits(mask AHB1RSTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1RSTR) ClearBits(mask AHB1RSTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1RSTR) Load() AHB1RSTR              { return AHB1RSTR(r.U32.Load()) }
func (r *RAHB1RSTR) Store(b AHB1RSTR)            { r.U32.Store(uint32(b)) }

func (r *RAHB1RSTR) AtomicStoreBits(mask, b AHB1RSTR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1RSTR) AtomicSetBits(mask AHB1RSTR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB1RSTR) AtomicClearBits(mask AHB1RSTR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB1RSTR struct{ mmio.UM32 }

func (rm RMAHB1RSTR) Load() AHB1RSTR   { return AHB1RSTR(rm.UM32.Load()) }
func (rm RMAHB1RSTR) Store(b AHB1RSTR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) DMA1RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA1RST)}}
}

func (p *RCC_Periph) DMA2RST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA2RST)}}
}

func (p *RCC_Periph) FLASHRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(FLASHRST)}}
}

func (p *RCC_Periph) CRCRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(CRCRST)}}
}

func (p *RCC_Periph) TSCRST() RMAHB1RSTR {
	return RMAHB1RSTR{mmio.UM32{&p.AHB1RSTR.U32, uint32(TSCRST)}}
}

type AHB2RSTR uint32

func (b AHB2RSTR) Field(mask AHB2RSTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2RSTR) J(v int) AHB2RSTR {
	return AHB2RSTR(bits.MakeField32(v, uint32(mask)))
}

type RAHB2RSTR struct{ mmio.U32 }

func (r *RAHB2RSTR) Bits(mask AHB2RSTR) AHB2RSTR { return AHB2RSTR(r.U32.Bits(uint32(mask))) }
func (r *RAHB2RSTR) StoreBits(mask, b AHB2RSTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2RSTR) SetBits(mask AHB2RSTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2RSTR) ClearBits(mask AHB2RSTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2RSTR) Load() AHB2RSTR              { return AHB2RSTR(r.U32.Load()) }
func (r *RAHB2RSTR) Store(b AHB2RSTR)            { r.U32.Store(uint32(b)) }

func (r *RAHB2RSTR) AtomicStoreBits(mask, b AHB2RSTR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2RSTR) AtomicSetBits(mask AHB2RSTR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB2RSTR) AtomicClearBits(mask AHB2RSTR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB2RSTR struct{ mmio.UM32 }

func (rm RMAHB2RSTR) Load() AHB2RSTR   { return AHB2RSTR(rm.UM32.Load()) }
func (rm RMAHB2RSTR) Store(b AHB2RSTR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) GPIOARST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOARST)}}
}

func (p *RCC_Periph) GPIOBRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOBRST)}}
}

func (p *RCC_Periph) GPIOCRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOCRST)}}
}

func (p *RCC_Periph) GPIODRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIODRST)}}
}

func (p *RCC_Periph) GPIOERST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOERST)}}
}

func (p *RCC_Periph) GPIOFRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOFRST)}}
}

func (p *RCC_Periph) GPIOGRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOGRST)}}
}

func (p *RCC_Periph) GPIOHRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOHRST)}}
}

func (p *RCC_Periph) OTGFSRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(OTGFSRST)}}
}

func (p *RCC_Periph) ADCRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(ADCRST)}}
}

func (p *RCC_Periph) RNGRST() RMAHB2RSTR {
	return RMAHB2RSTR{mmio.UM32{&p.AHB2RSTR.U32, uint32(RNGRST)}}
}

type AHB3RSTR uint32

func (b AHB3RSTR) Field(mask AHB3RSTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB3RSTR) J(v int) AHB3RSTR {
	return AHB3RSTR(bits.MakeField32(v, uint32(mask)))
}

type RAHB3RSTR struct{ mmio.U32 }

func (r *RAHB3RSTR) Bits(mask AHB3RSTR) AHB3RSTR { return AHB3RSTR(r.U32.Bits(uint32(mask))) }
func (r *RAHB3RSTR) StoreBits(mask, b AHB3RSTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3RSTR) SetBits(mask AHB3RSTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3RSTR) ClearBits(mask AHB3RSTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3RSTR) Load() AHB3RSTR              { return AHB3RSTR(r.U32.Load()) }
func (r *RAHB3RSTR) Store(b AHB3RSTR)            { r.U32.Store(uint32(b)) }

func (r *RAHB3RSTR) AtomicStoreBits(mask, b AHB3RSTR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3RSTR) AtomicSetBits(mask AHB3RSTR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB3RSTR) AtomicClearBits(mask AHB3RSTR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB3RSTR struct{ mmio.UM32 }

func (rm RMAHB3RSTR) Load() AHB3RSTR   { return AHB3RSTR(rm.UM32.Load()) }
func (rm RMAHB3RSTR) Store(b AHB3RSTR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) FMCRST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(FMCRST)}}
}

func (p *RCC_Periph) QSPIRST() RMAHB3RSTR {
	return RMAHB3RSTR{mmio.UM32{&p.AHB3RSTR.U32, uint32(QSPIRST)}}
}

type APB1RSTR1 uint32

func (b APB1RSTR1) Field(mask APB1RSTR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1RSTR1) J(v int) APB1RSTR1 {
	return APB1RSTR1(bits.MakeField32(v, uint32(mask)))
}

type RAPB1RSTR1 struct{ mmio.U32 }

func (r *RAPB1RSTR1) Bits(mask APB1RSTR1) APB1RSTR1 { return APB1RSTR1(r.U32.Bits(uint32(mask))) }
func (r *RAPB1RSTR1) StoreBits(mask, b APB1RSTR1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1RSTR1) SetBits(mask APB1RSTR1)        { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1RSTR1) ClearBits(mask APB1RSTR1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1RSTR1) Load() APB1RSTR1               { return APB1RSTR1(r.U32.Load()) }
func (r *RAPB1RSTR1) Store(b APB1RSTR1)             { r.U32.Store(uint32(b)) }

func (r *RAPB1RSTR1) AtomicStoreBits(mask, b APB1RSTR1) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAPB1RSTR1) AtomicSetBits(mask APB1RSTR1)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB1RSTR1) AtomicClearBits(mask APB1RSTR1) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB1RSTR1 struct{ mmio.UM32 }

func (rm RMAPB1RSTR1) Load() APB1RSTR1   { return APB1RSTR1(rm.UM32.Load()) }
func (rm RMAPB1RSTR1) Store(b APB1RSTR1) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) TIM2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM2RST)}}
}

func (p *RCC_Periph) TIM3RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM3RST)}}
}

func (p *RCC_Periph) TIM4RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM4RST)}}
}

func (p *RCC_Periph) TIM5RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM5RST)}}
}

func (p *RCC_Periph) TIM6RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM6RST)}}
}

func (p *RCC_Periph) TIM7RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM7RST)}}
}

func (p *RCC_Periph) LCDRST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(LCDRST)}}
}

func (p *RCC_Periph) SPI2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(SPI2RST)}}
}

func (p *RCC_Periph) SPI3RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(SPI3RST)}}
}

func (p *RCC_Periph) USART2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(USART2RST)}}
}

func (p *RCC_Periph) USART3RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(USART3RST)}}
}

func (p *RCC_Periph) UART4RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(UART4RST)}}
}

func (p *RCC_Periph) UART5RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(UART5RST)}}
}

func (p *RCC_Periph) I2C1RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C1RST)}}
}

func (p *RCC_Periph) I2C2RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C2RST)}}
}

func (p *RCC_Periph) I2C3RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C3RST)}}
}

func (p *RCC_Periph) CAN1RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(CAN1RST)}}
}

func (p *RCC_Periph) PWRRST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(PWRRST)}}
}

func (p *RCC_Periph) DAC1RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(DAC1RST)}}
}

func (p *RCC_Periph) OPAMPRST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(OPAMPRST)}}
}

func (p *RCC_Periph) LPTIM1RST() RMAPB1RSTR1 {
	return RMAPB1RSTR1{mmio.UM32{&p.APB1RSTR1.U32, uint32(LPTIM1RST)}}
}

type APB1RSTR2 uint32

func (b APB1RSTR2) Field(mask APB1RSTR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1RSTR2) J(v int) APB1RSTR2 {
	return APB1RSTR2(bits.MakeField32(v, uint32(mask)))
}

type RAPB1RSTR2 struct{ mmio.U32 }

func (r *RAPB1RSTR2) Bits(mask APB1RSTR2) APB1RSTR2 { return APB1RSTR2(r.U32.Bits(uint32(mask))) }
func (r *RAPB1RSTR2) StoreBits(mask, b APB1RSTR2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1RSTR2) SetBits(mask APB1RSTR2)        { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1RSTR2) ClearBits(mask APB1RSTR2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1RSTR2) Load() APB1RSTR2               { return APB1RSTR2(r.U32.Load()) }
func (r *RAPB1RSTR2) Store(b APB1RSTR2)             { r.U32.Store(uint32(b)) }

func (r *RAPB1RSTR2) AtomicStoreBits(mask, b APB1RSTR2) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAPB1RSTR2) AtomicSetBits(mask APB1RSTR2)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB1RSTR2) AtomicClearBits(mask APB1RSTR2) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB1RSTR2 struct{ mmio.UM32 }

func (rm RMAPB1RSTR2) Load() APB1RSTR2   { return APB1RSTR2(rm.UM32.Load()) }
func (rm RMAPB1RSTR2) Store(b APB1RSTR2) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LPUART1RST() RMAPB1RSTR2 {
	return RMAPB1RSTR2{mmio.UM32{&p.APB1RSTR2.U32, uint32(LPUART1RST)}}
}

func (p *RCC_Periph) SWPMI1RST() RMAPB1RSTR2 {
	return RMAPB1RSTR2{mmio.UM32{&p.APB1RSTR2.U32, uint32(SWPMI1RST)}}
}

func (p *RCC_Periph) LPTIM2RST() RMAPB1RSTR2 {
	return RMAPB1RSTR2{mmio.UM32{&p.APB1RSTR2.U32, uint32(LPTIM2RST)}}
}

type APB2RSTR uint32

func (b APB2RSTR) Field(mask APB2RSTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2RSTR) J(v int) APB2RSTR {
	return APB2RSTR(bits.MakeField32(v, uint32(mask)))
}

type RAPB2RSTR struct{ mmio.U32 }

func (r *RAPB2RSTR) Bits(mask APB2RSTR) APB2RSTR { return APB2RSTR(r.U32.Bits(uint32(mask))) }
func (r *RAPB2RSTR) StoreBits(mask, b APB2RSTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2RSTR) SetBits(mask APB2RSTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2RSTR) ClearBits(mask APB2RSTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2RSTR) Load() APB2RSTR              { return APB2RSTR(r.U32.Load()) }
func (r *RAPB2RSTR) Store(b APB2RSTR)            { r.U32.Store(uint32(b)) }

func (r *RAPB2RSTR) AtomicStoreBits(mask, b APB2RSTR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2RSTR) AtomicSetBits(mask APB2RSTR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB2RSTR) AtomicClearBits(mask APB2RSTR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB2RSTR struct{ mmio.UM32 }

func (rm RMAPB2RSTR) Load() APB2RSTR   { return APB2RSTR(rm.UM32.Load()) }
func (rm RMAPB2RSTR) Store(b APB2RSTR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SYSCFGRST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SYSCFGRST)}}
}

func (p *RCC_Periph) SDMMC1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SDMMC1RST)}}
}

func (p *RCC_Periph) TIM1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM1RST)}}
}

func (p *RCC_Periph) SPI1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SPI1RST)}}
}

func (p *RCC_Periph) TIM8RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM8RST)}}
}

func (p *RCC_Periph) USART1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(USART1RST)}}
}

func (p *RCC_Periph) TIM15RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM15RST)}}
}

func (p *RCC_Periph) TIM16RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM16RST)}}
}

func (p *RCC_Periph) TIM17RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM17RST)}}
}

func (p *RCC_Periph) SAI1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI1RST)}}
}

func (p *RCC_Periph) SAI2RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI2RST)}}
}

func (p *RCC_Periph) DFSDM1RST() RMAPB2RSTR {
	return RMAPB2RSTR{mmio.UM32{&p.APB2RSTR.U32, uint32(DFSDM1RST)}}
}

type AHB1ENR uint32

func (b AHB1ENR) Field(mask AHB1ENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1ENR) J(v int) AHB1ENR {
	return AHB1ENR(bits.MakeField32(v, uint32(mask)))
}

type RAHB1ENR struct{ mmio.U32 }

func (r *RAHB1ENR) Bits(mask AHB1ENR) AHB1ENR { return AHB1ENR(r.U32.Bits(uint32(mask))) }
func (r *RAHB1ENR) StoreBits(mask, b AHB1ENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1ENR) SetBits(mask AHB1ENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1ENR) ClearBits(mask AHB1ENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1ENR) Load() AHB1ENR             { return AHB1ENR(r.U32.Load()) }
func (r *RAHB1ENR) Store(b AHB1ENR)           { r.U32.Store(uint32(b)) }

func (r *RAHB1ENR) AtomicStoreBits(mask, b AHB1ENR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1ENR) AtomicSetBits(mask AHB1ENR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB1ENR) AtomicClearBits(mask AHB1ENR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB1ENR struct{ mmio.UM32 }

func (rm RMAHB1ENR) Load() AHB1ENR   { return AHB1ENR(rm.UM32.Load()) }
func (rm RMAHB1ENR) Store(b AHB1ENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) DMA1EN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA1EN)}}
}

func (p *RCC_Periph) DMA2EN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA2EN)}}
}

func (p *RCC_Periph) FLASHEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(FLASHEN)}}
}

func (p *RCC_Periph) CRCEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(CRCEN)}}
}

func (p *RCC_Periph) TSCEN() RMAHB1ENR {
	return RMAHB1ENR{mmio.UM32{&p.AHB1ENR.U32, uint32(TSCEN)}}
}

type AHB2ENR uint32

func (b AHB2ENR) Field(mask AHB2ENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2ENR) J(v int) AHB2ENR {
	return AHB2ENR(bits.MakeField32(v, uint32(mask)))
}

type RAHB2ENR struct{ mmio.U32 }

func (r *RAHB2ENR) Bits(mask AHB2ENR) AHB2ENR { return AHB2ENR(r.U32.Bits(uint32(mask))) }
func (r *RAHB2ENR) StoreBits(mask, b AHB2ENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2ENR) SetBits(mask AHB2ENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2ENR) ClearBits(mask AHB2ENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2ENR) Load() AHB2ENR             { return AHB2ENR(r.U32.Load()) }
func (r *RAHB2ENR) Store(b AHB2ENR)           { r.U32.Store(uint32(b)) }

func (r *RAHB2ENR) AtomicStoreBits(mask, b AHB2ENR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2ENR) AtomicSetBits(mask AHB2ENR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB2ENR) AtomicClearBits(mask AHB2ENR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB2ENR struct{ mmio.UM32 }

func (rm RMAHB2ENR) Load() AHB2ENR   { return AHB2ENR(rm.UM32.Load()) }
func (rm RMAHB2ENR) Store(b AHB2ENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) GPIOAEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOAEN)}}
}

func (p *RCC_Periph) GPIOBEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOBEN)}}
}

func (p *RCC_Periph) GPIOCEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOCEN)}}
}

func (p *RCC_Periph) GPIODEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIODEN)}}
}

func (p *RCC_Periph) GPIOEEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOEEN)}}
}

func (p *RCC_Periph) GPIOFEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOFEN)}}
}

func (p *RCC_Periph) GPIOGEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOGEN)}}
}

func (p *RCC_Periph) GPIOHEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOHEN)}}
}

func (p *RCC_Periph) OTGFSEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(OTGFSEN)}}
}

func (p *RCC_Periph) ADCEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(ADCEN)}}
}

func (p *RCC_Periph) RNGEN() RMAHB2ENR {
	return RMAHB2ENR{mmio.UM32{&p.AHB2ENR.U32, uint32(RNGEN)}}
}

type AHB3ENR uint32

func (b AHB3ENR) Field(mask AHB3ENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB3ENR) J(v int) AHB3ENR {
	return AHB3ENR(bits.MakeField32(v, uint32(mask)))
}

type RAHB3ENR struct{ mmio.U32 }

func (r *RAHB3ENR) Bits(mask AHB3ENR) AHB3ENR { return AHB3ENR(r.U32.Bits(uint32(mask))) }
func (r *RAHB3ENR) StoreBits(mask, b AHB3ENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3ENR) SetBits(mask AHB3ENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3ENR) ClearBits(mask AHB3ENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3ENR) Load() AHB3ENR             { return AHB3ENR(r.U32.Load()) }
func (r *RAHB3ENR) Store(b AHB3ENR)           { r.U32.Store(uint32(b)) }

func (r *RAHB3ENR) AtomicStoreBits(mask, b AHB3ENR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3ENR) AtomicSetBits(mask AHB3ENR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB3ENR) AtomicClearBits(mask AHB3ENR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB3ENR struct{ mmio.UM32 }

func (rm RMAHB3ENR) Load() AHB3ENR   { return AHB3ENR(rm.UM32.Load()) }
func (rm RMAHB3ENR) Store(b AHB3ENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) FMCEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(FMCEN)}}
}

func (p *RCC_Periph) QSPIEN() RMAHB3ENR {
	return RMAHB3ENR{mmio.UM32{&p.AHB3ENR.U32, uint32(QSPIEN)}}
}

type APB1ENR1 uint32

func (b APB1ENR1) Field(mask APB1ENR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1ENR1) J(v int) APB1ENR1 {
	return APB1ENR1(bits.MakeField32(v, uint32(mask)))
}

type RAPB1ENR1 struct{ mmio.U32 }

func (r *RAPB1ENR1) Bits(mask APB1ENR1) APB1ENR1 { return APB1ENR1(r.U32.Bits(uint32(mask))) }
func (r *RAPB1ENR1) StoreBits(mask, b APB1ENR1)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1ENR1) SetBits(mask APB1ENR1)       { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1ENR1) ClearBits(mask APB1ENR1)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1ENR1) Load() APB1ENR1              { return APB1ENR1(r.U32.Load()) }
func (r *RAPB1ENR1) Store(b APB1ENR1)            { r.U32.Store(uint32(b)) }

func (r *RAPB1ENR1) AtomicStoreBits(mask, b APB1ENR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1ENR1) AtomicSetBits(mask APB1ENR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB1ENR1) AtomicClearBits(mask APB1ENR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB1ENR1 struct{ mmio.UM32 }

func (rm RMAPB1ENR1) Load() APB1ENR1   { return APB1ENR1(rm.UM32.Load()) }
func (rm RMAPB1ENR1) Store(b APB1ENR1) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) TIM2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM2EN)}}
}

func (p *RCC_Periph) TIM3EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM3EN)}}
}

func (p *RCC_Periph) TIM4EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM4EN)}}
}

func (p *RCC_Periph) TIM5EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM5EN)}}
}

func (p *RCC_Periph) TIM6EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM6EN)}}
}

func (p *RCC_Periph) TIM7EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM7EN)}}
}

func (p *RCC_Periph) LCDEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(LCDEN)}}
}

func (p *RCC_Periph) WWDGEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(WWDGEN)}}
}

func (p *RCC_Periph) SPI2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(SPI2EN)}}
}

func (p *RCC_Periph) SPI3EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(SPI3EN)}}
}

func (p *RCC_Periph) USART2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(USART2EN)}}
}

func (p *RCC_Periph) USART3EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(USART3EN)}}
}

func (p *RCC_Periph) UART4EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(UART4EN)}}
}

func (p *RCC_Periph) UART5EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(UART5EN)}}
}

func (p *RCC_Periph) I2C1EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C1EN)}}
}

func (p *RCC_Periph) I2C2EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C2EN)}}
}

func (p *RCC_Periph) I2C3EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C3EN)}}
}

func (p *RCC_Periph) CAN1EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(CAN1EN)}}
}

func (p *RCC_Periph) PWREN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(PWREN)}}
}

func (p *RCC_Periph) DAC1EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(DAC1EN)}}
}

func (p *RCC_Periph) OPAMPEN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(OPAMPEN)}}
}

func (p *RCC_Periph) LPTIM1EN() RMAPB1ENR1 {
	return RMAPB1ENR1{mmio.UM32{&p.APB1ENR1.U32, uint32(LPTIM1EN)}}
}

type APB1ENR2 uint32

func (b APB1ENR2) Field(mask APB1ENR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1ENR2) J(v int) APB1ENR2 {
	return APB1ENR2(bits.MakeField32(v, uint32(mask)))
}

type RAPB1ENR2 struct{ mmio.U32 }

func (r *RAPB1ENR2) Bits(mask APB1ENR2) APB1ENR2 { return APB1ENR2(r.U32.Bits(uint32(mask))) }
func (r *RAPB1ENR2) StoreBits(mask, b APB1ENR2)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1ENR2) SetBits(mask APB1ENR2)       { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1ENR2) ClearBits(mask APB1ENR2)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1ENR2) Load() APB1ENR2              { return APB1ENR2(r.U32.Load()) }
func (r *RAPB1ENR2) Store(b APB1ENR2)            { r.U32.Store(uint32(b)) }

func (r *RAPB1ENR2) AtomicStoreBits(mask, b APB1ENR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1ENR2) AtomicSetBits(mask APB1ENR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB1ENR2) AtomicClearBits(mask APB1ENR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB1ENR2 struct{ mmio.UM32 }

func (rm RMAPB1ENR2) Load() APB1ENR2   { return APB1ENR2(rm.UM32.Load()) }
func (rm RMAPB1ENR2) Store(b APB1ENR2) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LPUART1EN() RMAPB1ENR2 {
	return RMAPB1ENR2{mmio.UM32{&p.APB1ENR2.U32, uint32(LPUART1EN)}}
}

func (p *RCC_Periph) SWPMI1EN() RMAPB1ENR2 {
	return RMAPB1ENR2{mmio.UM32{&p.APB1ENR2.U32, uint32(SWPMI1EN)}}
}

func (p *RCC_Periph) LPTIM2EN() RMAPB1ENR2 {
	return RMAPB1ENR2{mmio.UM32{&p.APB1ENR2.U32, uint32(LPTIM2EN)}}
}

type APB2ENR uint32

func (b APB2ENR) Field(mask APB2ENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2ENR) J(v int) APB2ENR {
	return APB2ENR(bits.MakeField32(v, uint32(mask)))
}

type RAPB2ENR struct{ mmio.U32 }

func (r *RAPB2ENR) Bits(mask APB2ENR) APB2ENR { return APB2ENR(r.U32.Bits(uint32(mask))) }
func (r *RAPB2ENR) StoreBits(mask, b APB2ENR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2ENR) SetBits(mask APB2ENR)      { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2ENR) ClearBits(mask APB2ENR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2ENR) Load() APB2ENR             { return APB2ENR(r.U32.Load()) }
func (r *RAPB2ENR) Store(b APB2ENR)           { r.U32.Store(uint32(b)) }

func (r *RAPB2ENR) AtomicStoreBits(mask, b APB2ENR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2ENR) AtomicSetBits(mask APB2ENR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB2ENR) AtomicClearBits(mask APB2ENR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB2ENR struct{ mmio.UM32 }

func (rm RMAPB2ENR) Load() APB2ENR   { return APB2ENR(rm.UM32.Load()) }
func (rm RMAPB2ENR) Store(b APB2ENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SYSCFGEN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SYSCFGEN)}}
}

func (p *RCC_Periph) FWEN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(FWEN)}}
}

func (p *RCC_Periph) SDMMC1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SDMMC1EN)}}
}

func (p *RCC_Periph) TIM1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM1EN)}}
}

func (p *RCC_Periph) SPI1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SPI1EN)}}
}

func (p *RCC_Periph) TIM8EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM8EN)}}
}

func (p *RCC_Periph) USART1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(USART1EN)}}
}

func (p *RCC_Periph) TIM15EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM15EN)}}
}

func (p *RCC_Periph) TIM16EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM16EN)}}
}

func (p *RCC_Periph) TIM17EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(TIM17EN)}}
}

func (p *RCC_Periph) SAI1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SAI1EN)}}
}

func (p *RCC_Periph) SAI2EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(SAI2EN)}}
}

func (p *RCC_Periph) DFSDM1EN() RMAPB2ENR {
	return RMAPB2ENR{mmio.UM32{&p.APB2ENR.U32, uint32(DFSDM1EN)}}
}

type AHB1SMENR uint32

func (b AHB1SMENR) Field(mask AHB1SMENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1SMENR) J(v int) AHB1SMENR {
	return AHB1SMENR(bits.MakeField32(v, uint32(mask)))
}

type RAHB1SMENR struct{ mmio.U32 }

func (r *RAHB1SMENR) Bits(mask AHB1SMENR) AHB1SMENR { return AHB1SMENR(r.U32.Bits(uint32(mask))) }
func (r *RAHB1SMENR) StoreBits(mask, b AHB1SMENR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB1SMENR) SetBits(mask AHB1SMENR)        { r.U32.SetBits(uint32(mask)) }
func (r *RAHB1SMENR) ClearBits(mask AHB1SMENR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB1SMENR) Load() AHB1SMENR               { return AHB1SMENR(r.U32.Load()) }
func (r *RAHB1SMENR) Store(b AHB1SMENR)             { r.U32.Store(uint32(b)) }

func (r *RAHB1SMENR) AtomicStoreBits(mask, b AHB1SMENR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAHB1SMENR) AtomicSetBits(mask AHB1SMENR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB1SMENR) AtomicClearBits(mask AHB1SMENR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB1SMENR struct{ mmio.UM32 }

func (rm RMAHB1SMENR) Load() AHB1SMENR   { return AHB1SMENR(rm.UM32.Load()) }
func (rm RMAHB1SMENR) Store(b AHB1SMENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) DMA1SMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(DMA1SMEN)}}
}

func (p *RCC_Periph) DMA2SMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(DMA2SMEN)}}
}

func (p *RCC_Periph) FLASHSMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(FLASHSMEN)}}
}

func (p *RCC_Periph) SRAM1SMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(SRAM1SMEN)}}
}

func (p *RCC_Periph) CRCSMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(CRCSMEN)}}
}

func (p *RCC_Periph) TSCSMEN() RMAHB1SMENR {
	return RMAHB1SMENR{mmio.UM32{&p.AHB1SMENR.U32, uint32(TSCSMEN)}}
}

type AHB2SMENR uint32

func (b AHB2SMENR) Field(mask AHB2SMENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2SMENR) J(v int) AHB2SMENR {
	return AHB2SMENR(bits.MakeField32(v, uint32(mask)))
}

type RAHB2SMENR struct{ mmio.U32 }

func (r *RAHB2SMENR) Bits(mask AHB2SMENR) AHB2SMENR { return AHB2SMENR(r.U32.Bits(uint32(mask))) }
func (r *RAHB2SMENR) StoreBits(mask, b AHB2SMENR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB2SMENR) SetBits(mask AHB2SMENR)        { r.U32.SetBits(uint32(mask)) }
func (r *RAHB2SMENR) ClearBits(mask AHB2SMENR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB2SMENR) Load() AHB2SMENR               { return AHB2SMENR(r.U32.Load()) }
func (r *RAHB2SMENR) Store(b AHB2SMENR)             { r.U32.Store(uint32(b)) }

func (r *RAHB2SMENR) AtomicStoreBits(mask, b AHB2SMENR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAHB2SMENR) AtomicSetBits(mask AHB2SMENR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB2SMENR) AtomicClearBits(mask AHB2SMENR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB2SMENR struct{ mmio.UM32 }

func (rm RMAHB2SMENR) Load() AHB2SMENR   { return AHB2SMENR(rm.UM32.Load()) }
func (rm RMAHB2SMENR) Store(b AHB2SMENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) GPIOASMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOASMEN)}}
}

func (p *RCC_Periph) GPIOBSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOBSMEN)}}
}

func (p *RCC_Periph) GPIOCSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOCSMEN)}}
}

func (p *RCC_Periph) GPIODSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIODSMEN)}}
}

func (p *RCC_Periph) GPIOESMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOESMEN)}}
}

func (p *RCC_Periph) GPIOFSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOFSMEN)}}
}

func (p *RCC_Periph) GPIOGSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOGSMEN)}}
}

func (p *RCC_Periph) GPIOHSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOHSMEN)}}
}

func (p *RCC_Periph) SRAM2SMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(SRAM2SMEN)}}
}

func (p *RCC_Periph) OTGFSSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(OTGFSSMEN)}}
}

func (p *RCC_Periph) ADCSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(ADCSMEN)}}
}

func (p *RCC_Periph) RNGSMEN() RMAHB2SMENR {
	return RMAHB2SMENR{mmio.UM32{&p.AHB2SMENR.U32, uint32(RNGSMEN)}}
}

type AHB3SMENR uint32

func (b AHB3SMENR) Field(mask AHB3SMENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB3SMENR) J(v int) AHB3SMENR {
	return AHB3SMENR(bits.MakeField32(v, uint32(mask)))
}

type RAHB3SMENR struct{ mmio.U32 }

func (r *RAHB3SMENR) Bits(mask AHB3SMENR) AHB3SMENR { return AHB3SMENR(r.U32.Bits(uint32(mask))) }
func (r *RAHB3SMENR) StoreBits(mask, b AHB3SMENR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAHB3SMENR) SetBits(mask AHB3SMENR)        { r.U32.SetBits(uint32(mask)) }
func (r *RAHB3SMENR) ClearBits(mask AHB3SMENR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RAHB3SMENR) Load() AHB3SMENR               { return AHB3SMENR(r.U32.Load()) }
func (r *RAHB3SMENR) Store(b AHB3SMENR)             { r.U32.Store(uint32(b)) }

func (r *RAHB3SMENR) AtomicStoreBits(mask, b AHB3SMENR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAHB3SMENR) AtomicSetBits(mask AHB3SMENR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAHB3SMENR) AtomicClearBits(mask AHB3SMENR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAHB3SMENR struct{ mmio.UM32 }

func (rm RMAHB3SMENR) Load() AHB3SMENR   { return AHB3SMENR(rm.UM32.Load()) }
func (rm RMAHB3SMENR) Store(b AHB3SMENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) FMCSMEN() RMAHB3SMENR {
	return RMAHB3SMENR{mmio.UM32{&p.AHB3SMENR.U32, uint32(FMCSMEN)}}
}

func (p *RCC_Periph) QSPISMEN() RMAHB3SMENR {
	return RMAHB3SMENR{mmio.UM32{&p.AHB3SMENR.U32, uint32(QSPISMEN)}}
}

type APB1SMENR1 uint32

func (b APB1SMENR1) Field(mask APB1SMENR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1SMENR1) J(v int) APB1SMENR1 {
	return APB1SMENR1(bits.MakeField32(v, uint32(mask)))
}

type RAPB1SMENR1 struct{ mmio.U32 }

func (r *RAPB1SMENR1) Bits(mask APB1SMENR1) APB1SMENR1 { return APB1SMENR1(r.U32.Bits(uint32(mask))) }
func (r *RAPB1SMENR1) StoreBits(mask, b APB1SMENR1)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1SMENR1) SetBits(mask APB1SMENR1)         { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1SMENR1) ClearBits(mask APB1SMENR1)       { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1SMENR1) Load() APB1SMENR1                { return APB1SMENR1(r.U32.Load()) }
func (r *RAPB1SMENR1) Store(b APB1SMENR1)              { r.U32.Store(uint32(b)) }

func (r *RAPB1SMENR1) AtomicStoreBits(mask, b APB1SMENR1) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAPB1SMENR1) AtomicSetBits(mask APB1SMENR1)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB1SMENR1) AtomicClearBits(mask APB1SMENR1) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB1SMENR1 struct{ mmio.UM32 }

func (rm RMAPB1SMENR1) Load() APB1SMENR1   { return APB1SMENR1(rm.UM32.Load()) }
func (rm RMAPB1SMENR1) Store(b APB1SMENR1) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) TIM2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM2SMEN)}}
}

func (p *RCC_Periph) TIM3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM3SMEN)}}
}

func (p *RCC_Periph) TIM4SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM4SMEN)}}
}

func (p *RCC_Periph) TIM5SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM5SMEN)}}
}

func (p *RCC_Periph) TIM6SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM6SMEN)}}
}

func (p *RCC_Periph) TIM7SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM7SMEN)}}
}

func (p *RCC_Periph) LCDSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(LCDSMEN)}}
}

func (p *RCC_Periph) WWDGSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(WWDGSMEN)}}
}

func (p *RCC_Periph) SPI2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(SPI2SMEN)}}
}

func (p *RCC_Periph) SPI3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(SPI3SMEN)}}
}

func (p *RCC_Periph) USART2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(USART2SMEN)}}
}

func (p *RCC_Periph) USART3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(USART3SMEN)}}
}

func (p *RCC_Periph) UART4SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(UART4SMEN)}}
}

func (p *RCC_Periph) UART5SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(UART5SMEN)}}
}

func (p *RCC_Periph) I2C1SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C1SMEN)}}
}

func (p *RCC_Periph) I2C2SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C2SMEN)}}
}

func (p *RCC_Periph) I2C3SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C3SMEN)}}
}

func (p *RCC_Periph) CAN1SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(CAN1SMEN)}}
}

func (p *RCC_Periph) PWRSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(PWRSMEN)}}
}

func (p *RCC_Periph) DAC1SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(DAC1SMEN)}}
}

func (p *RCC_Periph) OPAMPSMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(OPAMPSMEN)}}
}

func (p *RCC_Periph) LPTIM1SMEN() RMAPB1SMENR1 {
	return RMAPB1SMENR1{mmio.UM32{&p.APB1SMENR1.U32, uint32(LPTIM1SMEN)}}
}

type APB1SMENR2 uint32

func (b APB1SMENR2) Field(mask APB1SMENR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1SMENR2) J(v int) APB1SMENR2 {
	return APB1SMENR2(bits.MakeField32(v, uint32(mask)))
}

type RAPB1SMENR2 struct{ mmio.U32 }

func (r *RAPB1SMENR2) Bits(mask APB1SMENR2) APB1SMENR2 { return APB1SMENR2(r.U32.Bits(uint32(mask))) }
func (r *RAPB1SMENR2) StoreBits(mask, b APB1SMENR2)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB1SMENR2) SetBits(mask APB1SMENR2)         { r.U32.SetBits(uint32(mask)) }
func (r *RAPB1SMENR2) ClearBits(mask APB1SMENR2)       { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB1SMENR2) Load() APB1SMENR2                { return APB1SMENR2(r.U32.Load()) }
func (r *RAPB1SMENR2) Store(b APB1SMENR2)              { r.U32.Store(uint32(b)) }

func (r *RAPB1SMENR2) AtomicStoreBits(mask, b APB1SMENR2) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAPB1SMENR2) AtomicSetBits(mask APB1SMENR2)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB1SMENR2) AtomicClearBits(mask APB1SMENR2) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB1SMENR2 struct{ mmio.UM32 }

func (rm RMAPB1SMENR2) Load() APB1SMENR2   { return APB1SMENR2(rm.UM32.Load()) }
func (rm RMAPB1SMENR2) Store(b APB1SMENR2) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LPUART1SMEN() RMAPB1SMENR2 {
	return RMAPB1SMENR2{mmio.UM32{&p.APB1SMENR2.U32, uint32(LPUART1SMEN)}}
}

func (p *RCC_Periph) SWPMI1SMEN() RMAPB1SMENR2 {
	return RMAPB1SMENR2{mmio.UM32{&p.APB1SMENR2.U32, uint32(SWPMI1SMEN)}}
}

func (p *RCC_Periph) LPTIM2SMEN() RMAPB1SMENR2 {
	return RMAPB1SMENR2{mmio.UM32{&p.APB1SMENR2.U32, uint32(LPTIM2SMEN)}}
}

type APB2SMENR uint32

func (b APB2SMENR) Field(mask APB2SMENR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2SMENR) J(v int) APB2SMENR {
	return APB2SMENR(bits.MakeField32(v, uint32(mask)))
}

type RAPB2SMENR struct{ mmio.U32 }

func (r *RAPB2SMENR) Bits(mask APB2SMENR) APB2SMENR { return APB2SMENR(r.U32.Bits(uint32(mask))) }
func (r *RAPB2SMENR) StoreBits(mask, b APB2SMENR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAPB2SMENR) SetBits(mask APB2SMENR)        { r.U32.SetBits(uint32(mask)) }
func (r *RAPB2SMENR) ClearBits(mask APB2SMENR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RAPB2SMENR) Load() APB2SMENR               { return APB2SMENR(r.U32.Load()) }
func (r *RAPB2SMENR) Store(b APB2SMENR)             { r.U32.Store(uint32(b)) }

func (r *RAPB2SMENR) AtomicStoreBits(mask, b APB2SMENR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RAPB2SMENR) AtomicSetBits(mask APB2SMENR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RAPB2SMENR) AtomicClearBits(mask APB2SMENR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMAPB2SMENR struct{ mmio.UM32 }

func (rm RMAPB2SMENR) Load() APB2SMENR   { return APB2SMENR(rm.UM32.Load()) }
func (rm RMAPB2SMENR) Store(b APB2SMENR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SYSCFGSMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SYSCFGSMEN)}}
}

func (p *RCC_Periph) SDMMC1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SDMMC1SMEN)}}
}

func (p *RCC_Periph) TIM1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM1SMEN)}}
}

func (p *RCC_Periph) SPI1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SPI1SMEN)}}
}

func (p *RCC_Periph) TIM8SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM8SMEN)}}
}

func (p *RCC_Periph) USART1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(USART1SMEN)}}
}

func (p *RCC_Periph) TIM15SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM15SMEN)}}
}

func (p *RCC_Periph) TIM16SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM16SMEN)}}
}

func (p *RCC_Periph) TIM17SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM17SMEN)}}
}

func (p *RCC_Periph) SAI1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SAI1SMEN)}}
}

func (p *RCC_Periph) SAI2SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(SAI2SMEN)}}
}

func (p *RCC_Periph) DFSDM1SMEN() RMAPB2SMENR {
	return RMAPB2SMENR{mmio.UM32{&p.APB2SMENR.U32, uint32(DFSDM1SMEN)}}
}

type CCIPR uint32

func (b CCIPR) Field(mask CCIPR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CCIPR) J(v int) CCIPR {
	return CCIPR(bits.MakeField32(v, uint32(mask)))
}

type RCCIPR struct{ mmio.U32 }

func (r *RCCIPR) Bits(mask CCIPR) CCIPR   { return CCIPR(r.U32.Bits(uint32(mask))) }
func (r *RCCIPR) StoreBits(mask, b CCIPR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCIPR) SetBits(mask CCIPR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCCIPR) ClearBits(mask CCIPR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCCIPR) Load() CCIPR             { return CCIPR(r.U32.Load()) }
func (r *RCCIPR) Store(b CCIPR)           { r.U32.Store(uint32(b)) }

func (r *RCCIPR) AtomicStoreBits(mask, b CCIPR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCCIPR) AtomicSetBits(mask CCIPR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCCIPR) AtomicClearBits(mask CCIPR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCCIPR struct{ mmio.UM32 }

func (rm RMCCIPR) Load() CCIPR   { return CCIPR(rm.UM32.Load()) }
func (rm RMCCIPR) Store(b CCIPR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) USART1SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(USART1SEL)}}
}

func (p *RCC_Periph) USART2SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(USART2SEL)}}
}

func (p *RCC_Periph) USART3SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(USART3SEL)}}
}

func (p *RCC_Periph) UART4SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(UART4SEL)}}
}

func (p *RCC_Periph) UART5SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(UART5SEL)}}
}

func (p *RCC_Periph) LPUART1SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(LPUART1SEL)}}
}

func (p *RCC_Periph) I2C1SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(I2C1SEL)}}
}

func (p *RCC_Periph) I2C2SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(I2C2SEL)}}
}

func (p *RCC_Periph) I2C3SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(I2C3SEL)}}
}

func (p *RCC_Periph) LPTIM1SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(LPTIM1SEL)}}
}

func (p *RCC_Periph) LPTIM2SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(LPTIM2SEL)}}
}

func (p *RCC_Periph) SAI1SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(SAI1SEL)}}
}

func (p *RCC_Periph) SAI2SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(SAI2SEL)}}
}

func (p *RCC_Periph) CLK48SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(CLK48SEL)}}
}

func (p *RCC_Periph) ADCSEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(ADCSEL)}}
}

func (p *RCC_Periph) SWPMI1SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(SWPMI1SEL)}}
}

func (p *RCC_Periph) DFSDM1SEL() RMCCIPR {
	return RMCCIPR{mmio.UM32{&p.CCIPR.U32, uint32(DFSDM1SEL)}}
}

type BDCR uint32

func (b BDCR) Field(mask BDCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDCR) J(v int) BDCR {
	return BDCR(bits.MakeField32(v, uint32(mask)))
}

type RBDCR struct{ mmio.U32 }

func (r *RBDCR) Bits(mask BDCR) BDCR    { return BDCR(r.U32.Bits(uint32(mask))) }
func (r *RBDCR) StoreBits(mask, b BDCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBDCR) SetBits(mask BDCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RBDCR) ClearBits(mask BDCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RBDCR) Load() BDCR             { return BDCR(r.U32.Load()) }
func (r *RBDCR) Store(b BDCR)           { r.U32.Store(uint32(b)) }

func (r *RBDCR) AtomicStoreBits(mask, b BDCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RBDCR) AtomicSetBits(mask BDCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RBDCR) AtomicClearBits(mask BDCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMBDCR struct{ mmio.UM32 }

func (rm RMBDCR) Load() BDCR   { return BDCR(rm.UM32.Load()) }
func (rm RMBDCR) Store(b BDCR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSEON() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEON)}}
}

func (p *RCC_Periph) LSERDY() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSERDY)}}
}

func (p *RCC_Periph) LSEBYP() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEBYP)}}
}

func (p *RCC_Periph) LSEDRV() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSEDRV)}}
}

func (p *RCC_Periph) LSECSSON() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSECSSON)}}
}

func (p *RCC_Periph) LSECSSD() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSECSSD)}}
}

func (p *RCC_Periph) RTCSEL() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(RTCSEL)}}
}

func (p *RCC_Periph) RTCEN() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(RTCEN)}}
}

func (p *RCC_Periph) BDRST() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(BDRST)}}
}

func (p *RCC_Periph) LSCOEN() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSCOEN)}}
}

func (p *RCC_Periph) LSCOSEL() RMBDCR {
	return RMBDCR{mmio.UM32{&p.BDCR.U32, uint32(LSCOSEL)}}
}

type CSR uint32

func (b CSR) Field(mask CSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR) J(v int) CSR {
	return CSR(bits.MakeField32(v, uint32(mask)))
}

type RCSR struct{ mmio.U32 }

func (r *RCSR) Bits(mask CSR) CSR     { return CSR(r.U32.Bits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

func (r *RCSR) AtomicStoreBits(mask, b CSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) AtomicSetBits(mask CSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR) AtomicClearBits(mask CSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSION() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LSION)}}
}

func (p *RCC_Periph) LSIRDY() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LSIRDY)}}
}

func (p *RCC_Periph) MSISRANGE() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(MSISRANGE)}}
}

func (p *RCC_Periph) RMVF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(RMVF)}}
}

func (p *RCC_Periph) FWRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(FWRSTF)}}
}

func (p *RCC_Periph) OBLRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(OBLRSTF)}}
}

func (p *RCC_Periph) PINRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(PINRSTF)}}
}

func (p *RCC_Periph) BORRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(BORRSTF)}}
}

func (p *RCC_Periph) SFTRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(SFTRSTF)}}
}

func (p *RCC_Periph) IWDGRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(IWDGRSTF)}}
}

func (p *RCC_Periph) WWDGRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(WWDGRSTF)}}
}

func (p *RCC_Periph) LPWRRSTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(LPWRRSTF)}}
}
