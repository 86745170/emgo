package dfsdm

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type DFSDM_Filter_Periph struct {
	FLTCR1     FLTCR1
	FLTCR2     FLTCR2
	FLTISR     FLTISR
	FLTICR     FLTICR
	FLTJCHGR   FLTJCHGR
	FLTFCR     FLTFCR
	FLTJDATAR  FLTJDATAR
	FLTRDATAR  FLTRDATAR
	FLTAWHTR   FLTAWHTR
	FLTAWLTR   FLTAWLTR
	FLTAWSR    FLTAWSR
	FLTAWCFR   FLTAWCFR
	FLTEXMAX   FLTEXMAX
	FLTEXMIN   FLTEXMIN
	FLTCNVTIMR FLTCNVTIMR
}

func (p *DFSDM_Filter_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var DFSDM1_Filter0 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter0_BASE)))

var DFSDM1_Filter1 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter1_BASE)))

var DFSDM1_Filter2 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter2_BASE)))

var DFSDM1_Filter3 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter3_BASE)))

type FLTCR1_Bits uint32

func (b FLTCR1_Bits) Field(mask FLTCR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTCR1_Bits) J(v int) FLTCR1_Bits {
	return FLTCR1_Bits(bits.Make32(v, uint32(mask)))
}

type FLTCR1 struct{ mmio.U32 }

func (r *FLTCR1) Bits(mask FLTCR1_Bits) FLTCR1_Bits { return FLTCR1_Bits(r.U32.Bits(uint32(mask))) }
func (r *FLTCR1) StoreBits(mask, b FLTCR1_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTCR1) SetBits(mask FLTCR1_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *FLTCR1) ClearBits(mask FLTCR1_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *FLTCR1) Load() FLTCR1_Bits                 { return FLTCR1_Bits(r.U32.Load()) }
func (r *FLTCR1) Store(b FLTCR1_Bits)               { r.U32.Store(uint32(b)) }

type FLTCR1_Mask struct{ mmio.UM32 }

func (rm FLTCR1_Mask) Load() FLTCR1_Bits   { return FLTCR1_Bits(rm.UM32.Load()) }
func (rm FLTCR1_Mask) Store(b FLTCR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWFSEL() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(AWFSEL)}}
}

func (p *DFSDM_Filter_Periph) FAST() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(FAST)}}
}

func (p *DFSDM_Filter_Periph) RCH() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(RCH)}}
}

func (p *DFSDM_Filter_Periph) RDMAEN() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(RDMAEN)}}
}

func (p *DFSDM_Filter_Periph) RSYNC() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(RSYNC)}}
}

func (p *DFSDM_Filter_Periph) RCONT() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(RCONT)}}
}

func (p *DFSDM_Filter_Periph) RSWSTART() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(RSWSTART)}}
}

func (p *DFSDM_Filter_Periph) JEXTEN() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(JEXTEN)}}
}

func (p *DFSDM_Filter_Periph) JEXTSEL() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(JEXTSEL)}}
}

func (p *DFSDM_Filter_Periph) JDMAEN() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(JDMAEN)}}
}

func (p *DFSDM_Filter_Periph) JSCAN() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(JSCAN)}}
}

func (p *DFSDM_Filter_Periph) JSYNC() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(JSYNC)}}
}

func (p *DFSDM_Filter_Periph) JSWSTART() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(JSWSTART)}}
}

func (p *DFSDM_Filter_Periph) DFEN() FLTCR1_Mask {
	return FLTCR1_Mask{mmio.UM32{&p.FLTCR1.U32, uint32(DFEN)}}
}

type FLTCR2_Bits uint32

func (b FLTCR2_Bits) Field(mask FLTCR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTCR2_Bits) J(v int) FLTCR2_Bits {
	return FLTCR2_Bits(bits.Make32(v, uint32(mask)))
}

type FLTCR2 struct{ mmio.U32 }

func (r *FLTCR2) Bits(mask FLTCR2_Bits) FLTCR2_Bits { return FLTCR2_Bits(r.U32.Bits(uint32(mask))) }
func (r *FLTCR2) StoreBits(mask, b FLTCR2_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTCR2) SetBits(mask FLTCR2_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *FLTCR2) ClearBits(mask FLTCR2_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *FLTCR2) Load() FLTCR2_Bits                 { return FLTCR2_Bits(r.U32.Load()) }
func (r *FLTCR2) Store(b FLTCR2_Bits)               { r.U32.Store(uint32(b)) }

type FLTCR2_Mask struct{ mmio.UM32 }

func (rm FLTCR2_Mask) Load() FLTCR2_Bits   { return FLTCR2_Bits(rm.UM32.Load()) }
func (rm FLTCR2_Mask) Store(b FLTCR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWDCH() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(AWDCH)}}
}

func (p *DFSDM_Filter_Periph) EXCH() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(EXCH)}}
}

func (p *DFSDM_Filter_Periph) CKABIE() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(CKABIE)}}
}

func (p *DFSDM_Filter_Periph) SCDIE() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(SCDIE)}}
}

func (p *DFSDM_Filter_Periph) AWDIE() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(AWDIE)}}
}

func (p *DFSDM_Filter_Periph) ROVRIE() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(ROVRIE)}}
}

func (p *DFSDM_Filter_Periph) JOVRIE() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(JOVRIE)}}
}

func (p *DFSDM_Filter_Periph) REOCIE() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(REOCIE)}}
}

func (p *DFSDM_Filter_Periph) JEOCIE() FLTCR2_Mask {
	return FLTCR2_Mask{mmio.UM32{&p.FLTCR2.U32, uint32(JEOCIE)}}
}

type FLTISR_Bits uint32

func (b FLTISR_Bits) Field(mask FLTISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTISR_Bits) J(v int) FLTISR_Bits {
	return FLTISR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTISR struct{ mmio.U32 }

func (r *FLTISR) Bits(mask FLTISR_Bits) FLTISR_Bits { return FLTISR_Bits(r.U32.Bits(uint32(mask))) }
func (r *FLTISR) StoreBits(mask, b FLTISR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTISR) SetBits(mask FLTISR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *FLTISR) ClearBits(mask FLTISR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *FLTISR) Load() FLTISR_Bits                 { return FLTISR_Bits(r.U32.Load()) }
func (r *FLTISR) Store(b FLTISR_Bits)               { r.U32.Store(uint32(b)) }

type FLTISR_Mask struct{ mmio.UM32 }

func (rm FLTISR_Mask) Load() FLTISR_Bits   { return FLTISR_Bits(rm.UM32.Load()) }
func (rm FLTISR_Mask) Store(b FLTISR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) SCDF() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(SCDF)}}
}

func (p *DFSDM_Filter_Periph) CKABF() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(CKABF)}}
}

func (p *DFSDM_Filter_Periph) RCIP() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(RCIP)}}
}

func (p *DFSDM_Filter_Periph) JCIP() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(JCIP)}}
}

func (p *DFSDM_Filter_Periph) AWDF() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(AWDF)}}
}

func (p *DFSDM_Filter_Periph) ROVRF() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(ROVRF)}}
}

func (p *DFSDM_Filter_Periph) JOVRF() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(JOVRF)}}
}

func (p *DFSDM_Filter_Periph) REOCF() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(REOCF)}}
}

func (p *DFSDM_Filter_Periph) JEOCF() FLTISR_Mask {
	return FLTISR_Mask{mmio.UM32{&p.FLTISR.U32, uint32(JEOCF)}}
}

type FLTICR_Bits uint32

func (b FLTICR_Bits) Field(mask FLTICR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTICR_Bits) J(v int) FLTICR_Bits {
	return FLTICR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTICR struct{ mmio.U32 }

func (r *FLTICR) Bits(mask FLTICR_Bits) FLTICR_Bits { return FLTICR_Bits(r.U32.Bits(uint32(mask))) }
func (r *FLTICR) StoreBits(mask, b FLTICR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTICR) SetBits(mask FLTICR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *FLTICR) ClearBits(mask FLTICR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *FLTICR) Load() FLTICR_Bits                 { return FLTICR_Bits(r.U32.Load()) }
func (r *FLTICR) Store(b FLTICR_Bits)               { r.U32.Store(uint32(b)) }

type FLTICR_Mask struct{ mmio.UM32 }

func (rm FLTICR_Mask) Load() FLTICR_Bits   { return FLTICR_Bits(rm.UM32.Load()) }
func (rm FLTICR_Mask) Store(b FLTICR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) CLRSCSDF() FLTICR_Mask {
	return FLTICR_Mask{mmio.UM32{&p.FLTICR.U32, uint32(CLRSCSDF)}}
}

func (p *DFSDM_Filter_Periph) CLRCKABF() FLTICR_Mask {
	return FLTICR_Mask{mmio.UM32{&p.FLTICR.U32, uint32(CLRCKABF)}}
}

func (p *DFSDM_Filter_Periph) CLRROVRF() FLTICR_Mask {
	return FLTICR_Mask{mmio.UM32{&p.FLTICR.U32, uint32(CLRROVRF)}}
}

func (p *DFSDM_Filter_Periph) CLRJOVRF() FLTICR_Mask {
	return FLTICR_Mask{mmio.UM32{&p.FLTICR.U32, uint32(CLRJOVRF)}}
}

type FLTJCHGR_Bits uint32

func (b FLTJCHGR_Bits) Field(mask FLTJCHGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTJCHGR_Bits) J(v int) FLTJCHGR_Bits {
	return FLTJCHGR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTJCHGR struct{ mmio.U32 }

func (r *FLTJCHGR) Bits(mask FLTJCHGR_Bits) FLTJCHGR_Bits {
	return FLTJCHGR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTJCHGR) StoreBits(mask, b FLTJCHGR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTJCHGR) SetBits(mask FLTJCHGR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTJCHGR) ClearBits(mask FLTJCHGR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTJCHGR) Load() FLTJCHGR_Bits             { return FLTJCHGR_Bits(r.U32.Load()) }
func (r *FLTJCHGR) Store(b FLTJCHGR_Bits)           { r.U32.Store(uint32(b)) }

type FLTJCHGR_Mask struct{ mmio.UM32 }

func (rm FLTJCHGR_Mask) Load() FLTJCHGR_Bits   { return FLTJCHGR_Bits(rm.UM32.Load()) }
func (rm FLTJCHGR_Mask) Store(b FLTJCHGR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) JCHG() FLTJCHGR_Mask {
	return FLTJCHGR_Mask{mmio.UM32{&p.FLTJCHGR.U32, uint32(JCHG)}}
}

type FLTFCR_Bits uint32

func (b FLTFCR_Bits) Field(mask FLTFCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTFCR_Bits) J(v int) FLTFCR_Bits {
	return FLTFCR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTFCR struct{ mmio.U32 }

func (r *FLTFCR) Bits(mask FLTFCR_Bits) FLTFCR_Bits { return FLTFCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *FLTFCR) StoreBits(mask, b FLTFCR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTFCR) SetBits(mask FLTFCR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *FLTFCR) ClearBits(mask FLTFCR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *FLTFCR) Load() FLTFCR_Bits                 { return FLTFCR_Bits(r.U32.Load()) }
func (r *FLTFCR) Store(b FLTFCR_Bits)               { r.U32.Store(uint32(b)) }

type FLTFCR_Mask struct{ mmio.UM32 }

func (rm FLTFCR_Mask) Load() FLTFCR_Bits   { return FLTFCR_Bits(rm.UM32.Load()) }
func (rm FLTFCR_Mask) Store(b FLTFCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) FORD() FLTFCR_Mask {
	return FLTFCR_Mask{mmio.UM32{&p.FLTFCR.U32, uint32(FORD)}}
}

func (p *DFSDM_Filter_Periph) FOSR() FLTFCR_Mask {
	return FLTFCR_Mask{mmio.UM32{&p.FLTFCR.U32, uint32(FOSR)}}
}

func (p *DFSDM_Filter_Periph) IOSR() FLTFCR_Mask {
	return FLTFCR_Mask{mmio.UM32{&p.FLTFCR.U32, uint32(IOSR)}}
}

type FLTJDATAR_Bits uint32

func (b FLTJDATAR_Bits) Field(mask FLTJDATAR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTJDATAR_Bits) J(v int) FLTJDATAR_Bits {
	return FLTJDATAR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTJDATAR struct{ mmio.U32 }

func (r *FLTJDATAR) Bits(mask FLTJDATAR_Bits) FLTJDATAR_Bits {
	return FLTJDATAR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTJDATAR) StoreBits(mask, b FLTJDATAR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTJDATAR) SetBits(mask FLTJDATAR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTJDATAR) ClearBits(mask FLTJDATAR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTJDATAR) Load() FLTJDATAR_Bits             { return FLTJDATAR_Bits(r.U32.Load()) }
func (r *FLTJDATAR) Store(b FLTJDATAR_Bits)           { r.U32.Store(uint32(b)) }

type FLTJDATAR_Mask struct{ mmio.UM32 }

func (rm FLTJDATAR_Mask) Load() FLTJDATAR_Bits   { return FLTJDATAR_Bits(rm.UM32.Load()) }
func (rm FLTJDATAR_Mask) Store(b FLTJDATAR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) JDATA() FLTJDATAR_Mask {
	return FLTJDATAR_Mask{mmio.UM32{&p.FLTJDATAR.U32, uint32(JDATA)}}
}

func (p *DFSDM_Filter_Periph) JDATACH() FLTJDATAR_Mask {
	return FLTJDATAR_Mask{mmio.UM32{&p.FLTJDATAR.U32, uint32(JDATACH)}}
}

type FLTRDATAR_Bits uint32

func (b FLTRDATAR_Bits) Field(mask FLTRDATAR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTRDATAR_Bits) J(v int) FLTRDATAR_Bits {
	return FLTRDATAR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTRDATAR struct{ mmio.U32 }

func (r *FLTRDATAR) Bits(mask FLTRDATAR_Bits) FLTRDATAR_Bits {
	return FLTRDATAR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTRDATAR) StoreBits(mask, b FLTRDATAR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTRDATAR) SetBits(mask FLTRDATAR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTRDATAR) ClearBits(mask FLTRDATAR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTRDATAR) Load() FLTRDATAR_Bits             { return FLTRDATAR_Bits(r.U32.Load()) }
func (r *FLTRDATAR) Store(b FLTRDATAR_Bits)           { r.U32.Store(uint32(b)) }

type FLTRDATAR_Mask struct{ mmio.UM32 }

func (rm FLTRDATAR_Mask) Load() FLTRDATAR_Bits   { return FLTRDATAR_Bits(rm.UM32.Load()) }
func (rm FLTRDATAR_Mask) Store(b FLTRDATAR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) RDATA() FLTRDATAR_Mask {
	return FLTRDATAR_Mask{mmio.UM32{&p.FLTRDATAR.U32, uint32(RDATA)}}
}

func (p *DFSDM_Filter_Periph) RPEND() FLTRDATAR_Mask {
	return FLTRDATAR_Mask{mmio.UM32{&p.FLTRDATAR.U32, uint32(RPEND)}}
}

func (p *DFSDM_Filter_Periph) RDATACH() FLTRDATAR_Mask {
	return FLTRDATAR_Mask{mmio.UM32{&p.FLTRDATAR.U32, uint32(RDATACH)}}
}

type FLTAWHTR_Bits uint32

func (b FLTAWHTR_Bits) Field(mask FLTAWHTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWHTR_Bits) J(v int) FLTAWHTR_Bits {
	return FLTAWHTR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTAWHTR struct{ mmio.U32 }

func (r *FLTAWHTR) Bits(mask FLTAWHTR_Bits) FLTAWHTR_Bits {
	return FLTAWHTR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTAWHTR) StoreBits(mask, b FLTAWHTR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTAWHTR) SetBits(mask FLTAWHTR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTAWHTR) ClearBits(mask FLTAWHTR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTAWHTR) Load() FLTAWHTR_Bits             { return FLTAWHTR_Bits(r.U32.Load()) }
func (r *FLTAWHTR) Store(b FLTAWHTR_Bits)           { r.U32.Store(uint32(b)) }

type FLTAWHTR_Mask struct{ mmio.UM32 }

func (rm FLTAWHTR_Mask) Load() FLTAWHTR_Bits   { return FLTAWHTR_Bits(rm.UM32.Load()) }
func (rm FLTAWHTR_Mask) Store(b FLTAWHTR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWHT() FLTAWHTR_Mask {
	return FLTAWHTR_Mask{mmio.UM32{&p.FLTAWHTR.U32, uint32(AWHT)}}
}

func (p *DFSDM_Filter_Periph) BKAWH() FLTAWHTR_Mask {
	return FLTAWHTR_Mask{mmio.UM32{&p.FLTAWHTR.U32, uint32(BKAWH)}}
}

type FLTAWLTR_Bits uint32

func (b FLTAWLTR_Bits) Field(mask FLTAWLTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWLTR_Bits) J(v int) FLTAWLTR_Bits {
	return FLTAWLTR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTAWLTR struct{ mmio.U32 }

func (r *FLTAWLTR) Bits(mask FLTAWLTR_Bits) FLTAWLTR_Bits {
	return FLTAWLTR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTAWLTR) StoreBits(mask, b FLTAWLTR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTAWLTR) SetBits(mask FLTAWLTR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTAWLTR) ClearBits(mask FLTAWLTR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTAWLTR) Load() FLTAWLTR_Bits             { return FLTAWLTR_Bits(r.U32.Load()) }
func (r *FLTAWLTR) Store(b FLTAWLTR_Bits)           { r.U32.Store(uint32(b)) }

type FLTAWLTR_Mask struct{ mmio.UM32 }

func (rm FLTAWLTR_Mask) Load() FLTAWLTR_Bits   { return FLTAWLTR_Bits(rm.UM32.Load()) }
func (rm FLTAWLTR_Mask) Store(b FLTAWLTR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWLT() FLTAWLTR_Mask {
	return FLTAWLTR_Mask{mmio.UM32{&p.FLTAWLTR.U32, uint32(AWLT)}}
}

func (p *DFSDM_Filter_Periph) BKAWL() FLTAWLTR_Mask {
	return FLTAWLTR_Mask{mmio.UM32{&p.FLTAWLTR.U32, uint32(BKAWL)}}
}

type FLTAWSR_Bits uint32

func (b FLTAWSR_Bits) Field(mask FLTAWSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWSR_Bits) J(v int) FLTAWSR_Bits {
	return FLTAWSR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTAWSR struct{ mmio.U32 }

func (r *FLTAWSR) Bits(mask FLTAWSR_Bits) FLTAWSR_Bits { return FLTAWSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *FLTAWSR) StoreBits(mask, b FLTAWSR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTAWSR) SetBits(mask FLTAWSR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *FLTAWSR) ClearBits(mask FLTAWSR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *FLTAWSR) Load() FLTAWSR_Bits                  { return FLTAWSR_Bits(r.U32.Load()) }
func (r *FLTAWSR) Store(b FLTAWSR_Bits)                { r.U32.Store(uint32(b)) }

type FLTAWSR_Mask struct{ mmio.UM32 }

func (rm FLTAWSR_Mask) Load() FLTAWSR_Bits   { return FLTAWSR_Bits(rm.UM32.Load()) }
func (rm FLTAWSR_Mask) Store(b FLTAWSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWHTF() FLTAWSR_Mask {
	return FLTAWSR_Mask{mmio.UM32{&p.FLTAWSR.U32, uint32(AWHTF)}}
}

func (p *DFSDM_Filter_Periph) AWLTF() FLTAWSR_Mask {
	return FLTAWSR_Mask{mmio.UM32{&p.FLTAWSR.U32, uint32(AWLTF)}}
}

type FLTAWCFR_Bits uint32

func (b FLTAWCFR_Bits) Field(mask FLTAWCFR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWCFR_Bits) J(v int) FLTAWCFR_Bits {
	return FLTAWCFR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTAWCFR struct{ mmio.U32 }

func (r *FLTAWCFR) Bits(mask FLTAWCFR_Bits) FLTAWCFR_Bits {
	return FLTAWCFR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTAWCFR) StoreBits(mask, b FLTAWCFR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTAWCFR) SetBits(mask FLTAWCFR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTAWCFR) ClearBits(mask FLTAWCFR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTAWCFR) Load() FLTAWCFR_Bits             { return FLTAWCFR_Bits(r.U32.Load()) }
func (r *FLTAWCFR) Store(b FLTAWCFR_Bits)           { r.U32.Store(uint32(b)) }

type FLTAWCFR_Mask struct{ mmio.UM32 }

func (rm FLTAWCFR_Mask) Load() FLTAWCFR_Bits   { return FLTAWCFR_Bits(rm.UM32.Load()) }
func (rm FLTAWCFR_Mask) Store(b FLTAWCFR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) CLRAWHTF() FLTAWCFR_Mask {
	return FLTAWCFR_Mask{mmio.UM32{&p.FLTAWCFR.U32, uint32(CLRAWHTF)}}
}

func (p *DFSDM_Filter_Periph) CLRAWLTF() FLTAWCFR_Mask {
	return FLTAWCFR_Mask{mmio.UM32{&p.FLTAWCFR.U32, uint32(CLRAWLTF)}}
}

type FLTEXMAX_Bits uint32

func (b FLTEXMAX_Bits) Field(mask FLTEXMAX_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTEXMAX_Bits) J(v int) FLTEXMAX_Bits {
	return FLTEXMAX_Bits(bits.Make32(v, uint32(mask)))
}

type FLTEXMAX struct{ mmio.U32 }

func (r *FLTEXMAX) Bits(mask FLTEXMAX_Bits) FLTEXMAX_Bits {
	return FLTEXMAX_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTEXMAX) StoreBits(mask, b FLTEXMAX_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTEXMAX) SetBits(mask FLTEXMAX_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTEXMAX) ClearBits(mask FLTEXMAX_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTEXMAX) Load() FLTEXMAX_Bits             { return FLTEXMAX_Bits(r.U32.Load()) }
func (r *FLTEXMAX) Store(b FLTEXMAX_Bits)           { r.U32.Store(uint32(b)) }

type FLTEXMAX_Mask struct{ mmio.UM32 }

func (rm FLTEXMAX_Mask) Load() FLTEXMAX_Bits   { return FLTEXMAX_Bits(rm.UM32.Load()) }
func (rm FLTEXMAX_Mask) Store(b FLTEXMAX_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) EXMAX() FLTEXMAX_Mask {
	return FLTEXMAX_Mask{mmio.UM32{&p.FLTEXMAX.U32, uint32(EXMAX)}}
}

func (p *DFSDM_Filter_Periph) EXMAXCH() FLTEXMAX_Mask {
	return FLTEXMAX_Mask{mmio.UM32{&p.FLTEXMAX.U32, uint32(EXMAXCH)}}
}

type FLTEXMIN_Bits uint32

func (b FLTEXMIN_Bits) Field(mask FLTEXMIN_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTEXMIN_Bits) J(v int) FLTEXMIN_Bits {
	return FLTEXMIN_Bits(bits.Make32(v, uint32(mask)))
}

type FLTEXMIN struct{ mmio.U32 }

func (r *FLTEXMIN) Bits(mask FLTEXMIN_Bits) FLTEXMIN_Bits {
	return FLTEXMIN_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTEXMIN) StoreBits(mask, b FLTEXMIN_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTEXMIN) SetBits(mask FLTEXMIN_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTEXMIN) ClearBits(mask FLTEXMIN_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTEXMIN) Load() FLTEXMIN_Bits             { return FLTEXMIN_Bits(r.U32.Load()) }
func (r *FLTEXMIN) Store(b FLTEXMIN_Bits)           { r.U32.Store(uint32(b)) }

type FLTEXMIN_Mask struct{ mmio.UM32 }

func (rm FLTEXMIN_Mask) Load() FLTEXMIN_Bits   { return FLTEXMIN_Bits(rm.UM32.Load()) }
func (rm FLTEXMIN_Mask) Store(b FLTEXMIN_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) EXMIN() FLTEXMIN_Mask {
	return FLTEXMIN_Mask{mmio.UM32{&p.FLTEXMIN.U32, uint32(EXMIN)}}
}

func (p *DFSDM_Filter_Periph) EXMINCH() FLTEXMIN_Mask {
	return FLTEXMIN_Mask{mmio.UM32{&p.FLTEXMIN.U32, uint32(EXMINCH)}}
}

type FLTCNVTIMR_Bits uint32

func (b FLTCNVTIMR_Bits) Field(mask FLTCNVTIMR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTCNVTIMR_Bits) J(v int) FLTCNVTIMR_Bits {
	return FLTCNVTIMR_Bits(bits.Make32(v, uint32(mask)))
}

type FLTCNVTIMR struct{ mmio.U32 }

func (r *FLTCNVTIMR) Bits(mask FLTCNVTIMR_Bits) FLTCNVTIMR_Bits {
	return FLTCNVTIMR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *FLTCNVTIMR) StoreBits(mask, b FLTCNVTIMR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *FLTCNVTIMR) SetBits(mask FLTCNVTIMR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *FLTCNVTIMR) ClearBits(mask FLTCNVTIMR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *FLTCNVTIMR) Load() FLTCNVTIMR_Bits             { return FLTCNVTIMR_Bits(r.U32.Load()) }
func (r *FLTCNVTIMR) Store(b FLTCNVTIMR_Bits)           { r.U32.Store(uint32(b)) }

type FLTCNVTIMR_Mask struct{ mmio.UM32 }

func (rm FLTCNVTIMR_Mask) Load() FLTCNVTIMR_Bits   { return FLTCNVTIMR_Bits(rm.UM32.Load()) }
func (rm FLTCNVTIMR_Mask) Store(b FLTCNVTIMR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) CNVCNT() FLTCNVTIMR_Mask {
	return FLTCNVTIMR_Mask{mmio.UM32{&p.FLTCNVTIMR.U32, uint32(CNVCNT)}}
}
