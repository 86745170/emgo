package dfsdm

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type DFSDM_Filter_Periph struct {
	FLTCR1     RFLTCR1
	FLTCR2     RFLTCR2
	FLTISR     RFLTISR
	FLTICR     RFLTICR
	FLTJCHGR   RFLTJCHGR
	FLTFCR     RFLTFCR
	FLTJDATAR  RFLTJDATAR
	FLTRDATAR  RFLTRDATAR
	FLTAWHTR   RFLTAWHTR
	FLTAWLTR   RFLTAWLTR
	FLTAWSR    RFLTAWSR
	FLTAWCFR   RFLTAWCFR
	FLTEXMAX   RFLTEXMAX
	FLTEXMIN   RFLTEXMIN
	FLTCNVTIMR RFLTCNVTIMR
}

func (p *DFSDM_Filter_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var DFSDM1_Filter0 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter0_BASE)))

//emgo:const
var DFSDM1_Filter1 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter1_BASE)))

//emgo:const
var DFSDM1_Filter2 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter2_BASE)))

//emgo:const
var DFSDM1_Filter3 = (*DFSDM_Filter_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Filter3_BASE)))

type FLTCR1 uint32

func (b FLTCR1) Field(mask FLTCR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTCR1) J(v int) FLTCR1 {
	return FLTCR1(bits.Make32(v, uint32(mask)))
}

type RFLTCR1 struct{ mmio.U32 }

func (r *RFLTCR1) Bits(mask FLTCR1) FLTCR1  { return FLTCR1(r.U32.Bits(uint32(mask))) }
func (r *RFLTCR1) StoreBits(mask, b FLTCR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTCR1) SetBits(mask FLTCR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RFLTCR1) ClearBits(mask FLTCR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTCR1) Load() FLTCR1             { return FLTCR1(r.U32.Load()) }
func (r *RFLTCR1) Store(b FLTCR1)           { r.U32.Store(uint32(b)) }

func (r *RFLTCR1) AtomicStoreBits(mask, b FLTCR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTCR1) AtomicSetBits(mask FLTCR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTCR1) AtomicClearBits(mask FLTCR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTCR1 struct{ mmio.UM32 }

func (rm RMFLTCR1) Load() FLTCR1   { return FLTCR1(rm.UM32.Load()) }
func (rm RMFLTCR1) Store(b FLTCR1) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWFSEL() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(AWFSEL)}}
}

func (p *DFSDM_Filter_Periph) FAST() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(FAST)}}
}

func (p *DFSDM_Filter_Periph) RCH() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(RCH)}}
}

func (p *DFSDM_Filter_Periph) RDMAEN() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(RDMAEN)}}
}

func (p *DFSDM_Filter_Periph) RSYNC() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(RSYNC)}}
}

func (p *DFSDM_Filter_Periph) RCONT() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(RCONT)}}
}

func (p *DFSDM_Filter_Periph) RSWSTART() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(RSWSTART)}}
}

func (p *DFSDM_Filter_Periph) JEXTEN() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(JEXTEN)}}
}

func (p *DFSDM_Filter_Periph) JEXTSEL() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(JEXTSEL)}}
}

func (p *DFSDM_Filter_Periph) JDMAEN() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(JDMAEN)}}
}

func (p *DFSDM_Filter_Periph) JSCAN() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(JSCAN)}}
}

func (p *DFSDM_Filter_Periph) JSYNC() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(JSYNC)}}
}

func (p *DFSDM_Filter_Periph) JSWSTART() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(JSWSTART)}}
}

func (p *DFSDM_Filter_Periph) DFEN() RMFLTCR1 {
	return RMFLTCR1{mmio.UM32{&p.FLTCR1.U32, uint32(DFEN)}}
}

type FLTCR2 uint32

func (b FLTCR2) Field(mask FLTCR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTCR2) J(v int) FLTCR2 {
	return FLTCR2(bits.Make32(v, uint32(mask)))
}

type RFLTCR2 struct{ mmio.U32 }

func (r *RFLTCR2) Bits(mask FLTCR2) FLTCR2  { return FLTCR2(r.U32.Bits(uint32(mask))) }
func (r *RFLTCR2) StoreBits(mask, b FLTCR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTCR2) SetBits(mask FLTCR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RFLTCR2) ClearBits(mask FLTCR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTCR2) Load() FLTCR2             { return FLTCR2(r.U32.Load()) }
func (r *RFLTCR2) Store(b FLTCR2)           { r.U32.Store(uint32(b)) }

func (r *RFLTCR2) AtomicStoreBits(mask, b FLTCR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTCR2) AtomicSetBits(mask FLTCR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTCR2) AtomicClearBits(mask FLTCR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTCR2 struct{ mmio.UM32 }

func (rm RMFLTCR2) Load() FLTCR2   { return FLTCR2(rm.UM32.Load()) }
func (rm RMFLTCR2) Store(b FLTCR2) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWDCH() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(AWDCH)}}
}

func (p *DFSDM_Filter_Periph) EXCH() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(EXCH)}}
}

func (p *DFSDM_Filter_Periph) CKABIE() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(CKABIE)}}
}

func (p *DFSDM_Filter_Periph) SCDIE() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(SCDIE)}}
}

func (p *DFSDM_Filter_Periph) AWDIE() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(AWDIE)}}
}

func (p *DFSDM_Filter_Periph) ROVRIE() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(ROVRIE)}}
}

func (p *DFSDM_Filter_Periph) JOVRIE() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(JOVRIE)}}
}

func (p *DFSDM_Filter_Periph) REOCIE() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(REOCIE)}}
}

func (p *DFSDM_Filter_Periph) JEOCIE() RMFLTCR2 {
	return RMFLTCR2{mmio.UM32{&p.FLTCR2.U32, uint32(JEOCIE)}}
}

type FLTISR uint32

func (b FLTISR) Field(mask FLTISR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTISR) J(v int) FLTISR {
	return FLTISR(bits.Make32(v, uint32(mask)))
}

type RFLTISR struct{ mmio.U32 }

func (r *RFLTISR) Bits(mask FLTISR) FLTISR  { return FLTISR(r.U32.Bits(uint32(mask))) }
func (r *RFLTISR) StoreBits(mask, b FLTISR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTISR) SetBits(mask FLTISR)      { r.U32.SetBits(uint32(mask)) }
func (r *RFLTISR) ClearBits(mask FLTISR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTISR) Load() FLTISR             { return FLTISR(r.U32.Load()) }
func (r *RFLTISR) Store(b FLTISR)           { r.U32.Store(uint32(b)) }

func (r *RFLTISR) AtomicStoreBits(mask, b FLTISR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTISR) AtomicSetBits(mask FLTISR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTISR) AtomicClearBits(mask FLTISR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTISR struct{ mmio.UM32 }

func (rm RMFLTISR) Load() FLTISR   { return FLTISR(rm.UM32.Load()) }
func (rm RMFLTISR) Store(b FLTISR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) SCDF() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(SCDF)}}
}

func (p *DFSDM_Filter_Periph) CKABF() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(CKABF)}}
}

func (p *DFSDM_Filter_Periph) RCIP() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(RCIP)}}
}

func (p *DFSDM_Filter_Periph) JCIP() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(JCIP)}}
}

func (p *DFSDM_Filter_Periph) AWDF() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(AWDF)}}
}

func (p *DFSDM_Filter_Periph) ROVRF() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(ROVRF)}}
}

func (p *DFSDM_Filter_Periph) JOVRF() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(JOVRF)}}
}

func (p *DFSDM_Filter_Periph) REOCF() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(REOCF)}}
}

func (p *DFSDM_Filter_Periph) JEOCF() RMFLTISR {
	return RMFLTISR{mmio.UM32{&p.FLTISR.U32, uint32(JEOCF)}}
}

type FLTICR uint32

func (b FLTICR) Field(mask FLTICR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTICR) J(v int) FLTICR {
	return FLTICR(bits.Make32(v, uint32(mask)))
}

type RFLTICR struct{ mmio.U32 }

func (r *RFLTICR) Bits(mask FLTICR) FLTICR  { return FLTICR(r.U32.Bits(uint32(mask))) }
func (r *RFLTICR) StoreBits(mask, b FLTICR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTICR) SetBits(mask FLTICR)      { r.U32.SetBits(uint32(mask)) }
func (r *RFLTICR) ClearBits(mask FLTICR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTICR) Load() FLTICR             { return FLTICR(r.U32.Load()) }
func (r *RFLTICR) Store(b FLTICR)           { r.U32.Store(uint32(b)) }

func (r *RFLTICR) AtomicStoreBits(mask, b FLTICR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTICR) AtomicSetBits(mask FLTICR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTICR) AtomicClearBits(mask FLTICR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTICR struct{ mmio.UM32 }

func (rm RMFLTICR) Load() FLTICR   { return FLTICR(rm.UM32.Load()) }
func (rm RMFLTICR) Store(b FLTICR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) CLRSCSDF() RMFLTICR {
	return RMFLTICR{mmio.UM32{&p.FLTICR.U32, uint32(CLRSCSDF)}}
}

func (p *DFSDM_Filter_Periph) CLRCKABF() RMFLTICR {
	return RMFLTICR{mmio.UM32{&p.FLTICR.U32, uint32(CLRCKABF)}}
}

func (p *DFSDM_Filter_Periph) CLRROVRF() RMFLTICR {
	return RMFLTICR{mmio.UM32{&p.FLTICR.U32, uint32(CLRROVRF)}}
}

func (p *DFSDM_Filter_Periph) CLRJOVRF() RMFLTICR {
	return RMFLTICR{mmio.UM32{&p.FLTICR.U32, uint32(CLRJOVRF)}}
}

type FLTJCHGR uint32

func (b FLTJCHGR) Field(mask FLTJCHGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTJCHGR) J(v int) FLTJCHGR {
	return FLTJCHGR(bits.Make32(v, uint32(mask)))
}

type RFLTJCHGR struct{ mmio.U32 }

func (r *RFLTJCHGR) Bits(mask FLTJCHGR) FLTJCHGR { return FLTJCHGR(r.U32.Bits(uint32(mask))) }
func (r *RFLTJCHGR) StoreBits(mask, b FLTJCHGR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTJCHGR) SetBits(mask FLTJCHGR)       { r.U32.SetBits(uint32(mask)) }
func (r *RFLTJCHGR) ClearBits(mask FLTJCHGR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTJCHGR) Load() FLTJCHGR              { return FLTJCHGR(r.U32.Load()) }
func (r *RFLTJCHGR) Store(b FLTJCHGR)            { r.U32.Store(uint32(b)) }

func (r *RFLTJCHGR) AtomicStoreBits(mask, b FLTJCHGR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTJCHGR) AtomicSetBits(mask FLTJCHGR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTJCHGR) AtomicClearBits(mask FLTJCHGR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTJCHGR struct{ mmio.UM32 }

func (rm RMFLTJCHGR) Load() FLTJCHGR   { return FLTJCHGR(rm.UM32.Load()) }
func (rm RMFLTJCHGR) Store(b FLTJCHGR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) JCHG() RMFLTJCHGR {
	return RMFLTJCHGR{mmio.UM32{&p.FLTJCHGR.U32, uint32(JCHG)}}
}

type FLTFCR uint32

func (b FLTFCR) Field(mask FLTFCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTFCR) J(v int) FLTFCR {
	return FLTFCR(bits.Make32(v, uint32(mask)))
}

type RFLTFCR struct{ mmio.U32 }

func (r *RFLTFCR) Bits(mask FLTFCR) FLTFCR  { return FLTFCR(r.U32.Bits(uint32(mask))) }
func (r *RFLTFCR) StoreBits(mask, b FLTFCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTFCR) SetBits(mask FLTFCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RFLTFCR) ClearBits(mask FLTFCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTFCR) Load() FLTFCR             { return FLTFCR(r.U32.Load()) }
func (r *RFLTFCR) Store(b FLTFCR)           { r.U32.Store(uint32(b)) }

func (r *RFLTFCR) AtomicStoreBits(mask, b FLTFCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTFCR) AtomicSetBits(mask FLTFCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTFCR) AtomicClearBits(mask FLTFCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTFCR struct{ mmio.UM32 }

func (rm RMFLTFCR) Load() FLTFCR   { return FLTFCR(rm.UM32.Load()) }
func (rm RMFLTFCR) Store(b FLTFCR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) FORD() RMFLTFCR {
	return RMFLTFCR{mmio.UM32{&p.FLTFCR.U32, uint32(FORD)}}
}

func (p *DFSDM_Filter_Periph) FOSR() RMFLTFCR {
	return RMFLTFCR{mmio.UM32{&p.FLTFCR.U32, uint32(FOSR)}}
}

func (p *DFSDM_Filter_Periph) IOSR() RMFLTFCR {
	return RMFLTFCR{mmio.UM32{&p.FLTFCR.U32, uint32(IOSR)}}
}

type FLTJDATAR uint32

func (b FLTJDATAR) Field(mask FLTJDATAR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTJDATAR) J(v int) FLTJDATAR {
	return FLTJDATAR(bits.Make32(v, uint32(mask)))
}

type RFLTJDATAR struct{ mmio.U32 }

func (r *RFLTJDATAR) Bits(mask FLTJDATAR) FLTJDATAR { return FLTJDATAR(r.U32.Bits(uint32(mask))) }
func (r *RFLTJDATAR) StoreBits(mask, b FLTJDATAR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTJDATAR) SetBits(mask FLTJDATAR)        { r.U32.SetBits(uint32(mask)) }
func (r *RFLTJDATAR) ClearBits(mask FLTJDATAR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTJDATAR) Load() FLTJDATAR               { return FLTJDATAR(r.U32.Load()) }
func (r *RFLTJDATAR) Store(b FLTJDATAR)             { r.U32.Store(uint32(b)) }

func (r *RFLTJDATAR) AtomicStoreBits(mask, b FLTJDATAR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RFLTJDATAR) AtomicSetBits(mask FLTJDATAR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTJDATAR) AtomicClearBits(mask FLTJDATAR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTJDATAR struct{ mmio.UM32 }

func (rm RMFLTJDATAR) Load() FLTJDATAR   { return FLTJDATAR(rm.UM32.Load()) }
func (rm RMFLTJDATAR) Store(b FLTJDATAR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) JDATA() RMFLTJDATAR {
	return RMFLTJDATAR{mmio.UM32{&p.FLTJDATAR.U32, uint32(JDATA)}}
}

func (p *DFSDM_Filter_Periph) JDATACH() RMFLTJDATAR {
	return RMFLTJDATAR{mmio.UM32{&p.FLTJDATAR.U32, uint32(JDATACH)}}
}

type FLTRDATAR uint32

func (b FLTRDATAR) Field(mask FLTRDATAR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTRDATAR) J(v int) FLTRDATAR {
	return FLTRDATAR(bits.Make32(v, uint32(mask)))
}

type RFLTRDATAR struct{ mmio.U32 }

func (r *RFLTRDATAR) Bits(mask FLTRDATAR) FLTRDATAR { return FLTRDATAR(r.U32.Bits(uint32(mask))) }
func (r *RFLTRDATAR) StoreBits(mask, b FLTRDATAR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTRDATAR) SetBits(mask FLTRDATAR)        { r.U32.SetBits(uint32(mask)) }
func (r *RFLTRDATAR) ClearBits(mask FLTRDATAR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTRDATAR) Load() FLTRDATAR               { return FLTRDATAR(r.U32.Load()) }
func (r *RFLTRDATAR) Store(b FLTRDATAR)             { r.U32.Store(uint32(b)) }

func (r *RFLTRDATAR) AtomicStoreBits(mask, b FLTRDATAR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RFLTRDATAR) AtomicSetBits(mask FLTRDATAR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTRDATAR) AtomicClearBits(mask FLTRDATAR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTRDATAR struct{ mmio.UM32 }

func (rm RMFLTRDATAR) Load() FLTRDATAR   { return FLTRDATAR(rm.UM32.Load()) }
func (rm RMFLTRDATAR) Store(b FLTRDATAR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) RDATA() RMFLTRDATAR {
	return RMFLTRDATAR{mmio.UM32{&p.FLTRDATAR.U32, uint32(RDATA)}}
}

func (p *DFSDM_Filter_Periph) RPEND() RMFLTRDATAR {
	return RMFLTRDATAR{mmio.UM32{&p.FLTRDATAR.U32, uint32(RPEND)}}
}

func (p *DFSDM_Filter_Periph) RDATACH() RMFLTRDATAR {
	return RMFLTRDATAR{mmio.UM32{&p.FLTRDATAR.U32, uint32(RDATACH)}}
}

type FLTAWHTR uint32

func (b FLTAWHTR) Field(mask FLTAWHTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWHTR) J(v int) FLTAWHTR {
	return FLTAWHTR(bits.Make32(v, uint32(mask)))
}

type RFLTAWHTR struct{ mmio.U32 }

func (r *RFLTAWHTR) Bits(mask FLTAWHTR) FLTAWHTR { return FLTAWHTR(r.U32.Bits(uint32(mask))) }
func (r *RFLTAWHTR) StoreBits(mask, b FLTAWHTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWHTR) SetBits(mask FLTAWHTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RFLTAWHTR) ClearBits(mask FLTAWHTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTAWHTR) Load() FLTAWHTR              { return FLTAWHTR(r.U32.Load()) }
func (r *RFLTAWHTR) Store(b FLTAWHTR)            { r.U32.Store(uint32(b)) }

func (r *RFLTAWHTR) AtomicStoreBits(mask, b FLTAWHTR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWHTR) AtomicSetBits(mask FLTAWHTR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTAWHTR) AtomicClearBits(mask FLTAWHTR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTAWHTR struct{ mmio.UM32 }

func (rm RMFLTAWHTR) Load() FLTAWHTR   { return FLTAWHTR(rm.UM32.Load()) }
func (rm RMFLTAWHTR) Store(b FLTAWHTR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWHT() RMFLTAWHTR {
	return RMFLTAWHTR{mmio.UM32{&p.FLTAWHTR.U32, uint32(AWHT)}}
}

func (p *DFSDM_Filter_Periph) BKAWH() RMFLTAWHTR {
	return RMFLTAWHTR{mmio.UM32{&p.FLTAWHTR.U32, uint32(BKAWH)}}
}

type FLTAWLTR uint32

func (b FLTAWLTR) Field(mask FLTAWLTR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWLTR) J(v int) FLTAWLTR {
	return FLTAWLTR(bits.Make32(v, uint32(mask)))
}

type RFLTAWLTR struct{ mmio.U32 }

func (r *RFLTAWLTR) Bits(mask FLTAWLTR) FLTAWLTR { return FLTAWLTR(r.U32.Bits(uint32(mask))) }
func (r *RFLTAWLTR) StoreBits(mask, b FLTAWLTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWLTR) SetBits(mask FLTAWLTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RFLTAWLTR) ClearBits(mask FLTAWLTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTAWLTR) Load() FLTAWLTR              { return FLTAWLTR(r.U32.Load()) }
func (r *RFLTAWLTR) Store(b FLTAWLTR)            { r.U32.Store(uint32(b)) }

func (r *RFLTAWLTR) AtomicStoreBits(mask, b FLTAWLTR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWLTR) AtomicSetBits(mask FLTAWLTR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTAWLTR) AtomicClearBits(mask FLTAWLTR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTAWLTR struct{ mmio.UM32 }

func (rm RMFLTAWLTR) Load() FLTAWLTR   { return FLTAWLTR(rm.UM32.Load()) }
func (rm RMFLTAWLTR) Store(b FLTAWLTR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWLT() RMFLTAWLTR {
	return RMFLTAWLTR{mmio.UM32{&p.FLTAWLTR.U32, uint32(AWLT)}}
}

func (p *DFSDM_Filter_Periph) BKAWL() RMFLTAWLTR {
	return RMFLTAWLTR{mmio.UM32{&p.FLTAWLTR.U32, uint32(BKAWL)}}
}

type FLTAWSR uint32

func (b FLTAWSR) Field(mask FLTAWSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWSR) J(v int) FLTAWSR {
	return FLTAWSR(bits.Make32(v, uint32(mask)))
}

type RFLTAWSR struct{ mmio.U32 }

func (r *RFLTAWSR) Bits(mask FLTAWSR) FLTAWSR { return FLTAWSR(r.U32.Bits(uint32(mask))) }
func (r *RFLTAWSR) StoreBits(mask, b FLTAWSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWSR) SetBits(mask FLTAWSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RFLTAWSR) ClearBits(mask FLTAWSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTAWSR) Load() FLTAWSR             { return FLTAWSR(r.U32.Load()) }
func (r *RFLTAWSR) Store(b FLTAWSR)           { r.U32.Store(uint32(b)) }

func (r *RFLTAWSR) AtomicStoreBits(mask, b FLTAWSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWSR) AtomicSetBits(mask FLTAWSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTAWSR) AtomicClearBits(mask FLTAWSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTAWSR struct{ mmio.UM32 }

func (rm RMFLTAWSR) Load() FLTAWSR   { return FLTAWSR(rm.UM32.Load()) }
func (rm RMFLTAWSR) Store(b FLTAWSR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) AWHTF() RMFLTAWSR {
	return RMFLTAWSR{mmio.UM32{&p.FLTAWSR.U32, uint32(AWHTF)}}
}

func (p *DFSDM_Filter_Periph) AWLTF() RMFLTAWSR {
	return RMFLTAWSR{mmio.UM32{&p.FLTAWSR.U32, uint32(AWLTF)}}
}

type FLTAWCFR uint32

func (b FLTAWCFR) Field(mask FLTAWCFR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTAWCFR) J(v int) FLTAWCFR {
	return FLTAWCFR(bits.Make32(v, uint32(mask)))
}

type RFLTAWCFR struct{ mmio.U32 }

func (r *RFLTAWCFR) Bits(mask FLTAWCFR) FLTAWCFR { return FLTAWCFR(r.U32.Bits(uint32(mask))) }
func (r *RFLTAWCFR) StoreBits(mask, b FLTAWCFR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWCFR) SetBits(mask FLTAWCFR)       { r.U32.SetBits(uint32(mask)) }
func (r *RFLTAWCFR) ClearBits(mask FLTAWCFR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTAWCFR) Load() FLTAWCFR              { return FLTAWCFR(r.U32.Load()) }
func (r *RFLTAWCFR) Store(b FLTAWCFR)            { r.U32.Store(uint32(b)) }

func (r *RFLTAWCFR) AtomicStoreBits(mask, b FLTAWCFR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTAWCFR) AtomicSetBits(mask FLTAWCFR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTAWCFR) AtomicClearBits(mask FLTAWCFR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTAWCFR struct{ mmio.UM32 }

func (rm RMFLTAWCFR) Load() FLTAWCFR   { return FLTAWCFR(rm.UM32.Load()) }
func (rm RMFLTAWCFR) Store(b FLTAWCFR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) CLRAWHTF() RMFLTAWCFR {
	return RMFLTAWCFR{mmio.UM32{&p.FLTAWCFR.U32, uint32(CLRAWHTF)}}
}

func (p *DFSDM_Filter_Periph) CLRAWLTF() RMFLTAWCFR {
	return RMFLTAWCFR{mmio.UM32{&p.FLTAWCFR.U32, uint32(CLRAWLTF)}}
}

type FLTEXMAX uint32

func (b FLTEXMAX) Field(mask FLTEXMAX) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTEXMAX) J(v int) FLTEXMAX {
	return FLTEXMAX(bits.Make32(v, uint32(mask)))
}

type RFLTEXMAX struct{ mmio.U32 }

func (r *RFLTEXMAX) Bits(mask FLTEXMAX) FLTEXMAX { return FLTEXMAX(r.U32.Bits(uint32(mask))) }
func (r *RFLTEXMAX) StoreBits(mask, b FLTEXMAX)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTEXMAX) SetBits(mask FLTEXMAX)       { r.U32.SetBits(uint32(mask)) }
func (r *RFLTEXMAX) ClearBits(mask FLTEXMAX)     { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTEXMAX) Load() FLTEXMAX              { return FLTEXMAX(r.U32.Load()) }
func (r *RFLTEXMAX) Store(b FLTEXMAX)            { r.U32.Store(uint32(b)) }

func (r *RFLTEXMAX) AtomicStoreBits(mask, b FLTEXMAX) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTEXMAX) AtomicSetBits(mask FLTEXMAX)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTEXMAX) AtomicClearBits(mask FLTEXMAX)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTEXMAX struct{ mmio.UM32 }

func (rm RMFLTEXMAX) Load() FLTEXMAX   { return FLTEXMAX(rm.UM32.Load()) }
func (rm RMFLTEXMAX) Store(b FLTEXMAX) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) EXMAX() RMFLTEXMAX {
	return RMFLTEXMAX{mmio.UM32{&p.FLTEXMAX.U32, uint32(EXMAX)}}
}

func (p *DFSDM_Filter_Periph) EXMAXCH() RMFLTEXMAX {
	return RMFLTEXMAX{mmio.UM32{&p.FLTEXMAX.U32, uint32(EXMAXCH)}}
}

type FLTEXMIN uint32

func (b FLTEXMIN) Field(mask FLTEXMIN) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTEXMIN) J(v int) FLTEXMIN {
	return FLTEXMIN(bits.Make32(v, uint32(mask)))
}

type RFLTEXMIN struct{ mmio.U32 }

func (r *RFLTEXMIN) Bits(mask FLTEXMIN) FLTEXMIN { return FLTEXMIN(r.U32.Bits(uint32(mask))) }
func (r *RFLTEXMIN) StoreBits(mask, b FLTEXMIN)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTEXMIN) SetBits(mask FLTEXMIN)       { r.U32.SetBits(uint32(mask)) }
func (r *RFLTEXMIN) ClearBits(mask FLTEXMIN)     { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTEXMIN) Load() FLTEXMIN              { return FLTEXMIN(r.U32.Load()) }
func (r *RFLTEXMIN) Store(b FLTEXMIN)            { r.U32.Store(uint32(b)) }

func (r *RFLTEXMIN) AtomicStoreBits(mask, b FLTEXMIN) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RFLTEXMIN) AtomicSetBits(mask FLTEXMIN)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTEXMIN) AtomicClearBits(mask FLTEXMIN)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTEXMIN struct{ mmio.UM32 }

func (rm RMFLTEXMIN) Load() FLTEXMIN   { return FLTEXMIN(rm.UM32.Load()) }
func (rm RMFLTEXMIN) Store(b FLTEXMIN) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) EXMIN() RMFLTEXMIN {
	return RMFLTEXMIN{mmio.UM32{&p.FLTEXMIN.U32, uint32(EXMIN)}}
}

func (p *DFSDM_Filter_Periph) EXMINCH() RMFLTEXMIN {
	return RMFLTEXMIN{mmio.UM32{&p.FLTEXMIN.U32, uint32(EXMINCH)}}
}

type FLTCNVTIMR uint32

func (b FLTCNVTIMR) Field(mask FLTCNVTIMR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask FLTCNVTIMR) J(v int) FLTCNVTIMR {
	return FLTCNVTIMR(bits.Make32(v, uint32(mask)))
}

type RFLTCNVTIMR struct{ mmio.U32 }

func (r *RFLTCNVTIMR) Bits(mask FLTCNVTIMR) FLTCNVTIMR { return FLTCNVTIMR(r.U32.Bits(uint32(mask))) }
func (r *RFLTCNVTIMR) StoreBits(mask, b FLTCNVTIMR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFLTCNVTIMR) SetBits(mask FLTCNVTIMR)         { r.U32.SetBits(uint32(mask)) }
func (r *RFLTCNVTIMR) ClearBits(mask FLTCNVTIMR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RFLTCNVTIMR) Load() FLTCNVTIMR                { return FLTCNVTIMR(r.U32.Load()) }
func (r *RFLTCNVTIMR) Store(b FLTCNVTIMR)              { r.U32.Store(uint32(b)) }

func (r *RFLTCNVTIMR) AtomicStoreBits(mask, b FLTCNVTIMR) {
	r.U32.AtomicStoreBits(uint32(mask), uint32(b))
}
func (r *RFLTCNVTIMR) AtomicSetBits(mask FLTCNVTIMR)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFLTCNVTIMR) AtomicClearBits(mask FLTCNVTIMR) { r.U32.AtomicClearBits(uint32(mask)) }

type RMFLTCNVTIMR struct{ mmio.UM32 }

func (rm RMFLTCNVTIMR) Load() FLTCNVTIMR   { return FLTCNVTIMR(rm.UM32.Load()) }
func (rm RMFLTCNVTIMR) Store(b FLTCNVTIMR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Filter_Periph) CNVCNT() RMFLTCNVTIMR {
	return RMFLTCNVTIMR{mmio.UM32{&p.FLTCNVTIMR.U32, uint32(CNVCNT)}}
}
