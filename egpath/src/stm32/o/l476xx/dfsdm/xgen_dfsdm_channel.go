package dfsdm

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type DFSDM_Channel_Periph struct {
	CHCFGR1  RCHCFGR1
	CHCFGR2  RCHCFGR2
	CHAWSCDR RCHAWSCDR
	CHWDATAR RCHWDATAR
	CHDATINR RCHDATINR
}

func (p *DFSDM_Channel_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var DFSDM1_Channel0 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel0_BASE)))

//emgo:const
var DFSDM1_Channel1 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel1_BASE)))

//emgo:const
var DFSDM1_Channel2 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel2_BASE)))

//emgo:const
var DFSDM1_Channel3 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel3_BASE)))

//emgo:const
var DFSDM1_Channel4 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel4_BASE)))

//emgo:const
var DFSDM1_Channel5 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel5_BASE)))

//emgo:const
var DFSDM1_Channel6 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel6_BASE)))

//emgo:const
var DFSDM1_Channel7 = (*DFSDM_Channel_Periph)(unsafe.Pointer(uintptr(mmap.DFSDM1_Channel7_BASE)))

type CHCFGR1 uint32

func (b CHCFGR1) Field(mask CHCFGR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CHCFGR1) J(v int) CHCFGR1 {
	return CHCFGR1(bits.Make32(v, uint32(mask)))
}

type RCHCFGR1 struct{ mmio.U32 }

func (r *RCHCFGR1) Bits(mask CHCFGR1) CHCFGR1 { return CHCFGR1(r.U32.Bits(uint32(mask))) }
func (r *RCHCFGR1) StoreBits(mask, b CHCFGR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHCFGR1) SetBits(mask CHCFGR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RCHCFGR1) ClearBits(mask CHCFGR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCHCFGR1) Load() CHCFGR1             { return CHCFGR1(r.U32.Load()) }
func (r *RCHCFGR1) Store(b CHCFGR1)           { r.U32.Store(uint32(b)) }

func (r *RCHCFGR1) AtomicStoreBits(mask, b CHCFGR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCHCFGR1) AtomicSetBits(mask CHCFGR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCHCFGR1) AtomicClearBits(mask CHCFGR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCHCFGR1 struct{ mmio.UM32 }

func (rm RMCHCFGR1) Load() CHCFGR1   { return CHCFGR1(rm.UM32.Load()) }
func (rm RMCHCFGR1) Store(b CHCFGR1) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Channel_Periph) DFSDMEN() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(DFSDMEN)}}
}

func (p *DFSDM_Channel_Periph) CKOUTSRC() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(CKOUTSRC)}}
}

func (p *DFSDM_Channel_Periph) CKOUTDIV() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(CKOUTDIV)}}
}

func (p *DFSDM_Channel_Periph) DATPACK() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(DATPACK)}}
}

func (p *DFSDM_Channel_Periph) DATMPX() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(DATMPX)}}
}

func (p *DFSDM_Channel_Periph) CHINSEL() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(CHINSEL)}}
}

func (p *DFSDM_Channel_Periph) CHEN() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(CHEN)}}
}

func (p *DFSDM_Channel_Periph) CKABEN() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(CKABEN)}}
}

func (p *DFSDM_Channel_Periph) SCDEN() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(SCDEN)}}
}

func (p *DFSDM_Channel_Periph) SPICKSEL() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(SPICKSEL)}}
}

func (p *DFSDM_Channel_Periph) SITP() RMCHCFGR1 {
	return RMCHCFGR1{mmio.UM32{&p.CHCFGR1.U32, uint32(SITP)}}
}

type CHCFGR2 uint32

func (b CHCFGR2) Field(mask CHCFGR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CHCFGR2) J(v int) CHCFGR2 {
	return CHCFGR2(bits.Make32(v, uint32(mask)))
}

type RCHCFGR2 struct{ mmio.U32 }

func (r *RCHCFGR2) Bits(mask CHCFGR2) CHCFGR2 { return CHCFGR2(r.U32.Bits(uint32(mask))) }
func (r *RCHCFGR2) StoreBits(mask, b CHCFGR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHCFGR2) SetBits(mask CHCFGR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RCHCFGR2) ClearBits(mask CHCFGR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCHCFGR2) Load() CHCFGR2             { return CHCFGR2(r.U32.Load()) }
func (r *RCHCFGR2) Store(b CHCFGR2)           { r.U32.Store(uint32(b)) }

func (r *RCHCFGR2) AtomicStoreBits(mask, b CHCFGR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCHCFGR2) AtomicSetBits(mask CHCFGR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCHCFGR2) AtomicClearBits(mask CHCFGR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCHCFGR2 struct{ mmio.UM32 }

func (rm RMCHCFGR2) Load() CHCFGR2   { return CHCFGR2(rm.UM32.Load()) }
func (rm RMCHCFGR2) Store(b CHCFGR2) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Channel_Periph) OFFSET() RMCHCFGR2 {
	return RMCHCFGR2{mmio.UM32{&p.CHCFGR2.U32, uint32(OFFSET)}}
}

func (p *DFSDM_Channel_Periph) DTRBS() RMCHCFGR2 {
	return RMCHCFGR2{mmio.UM32{&p.CHCFGR2.U32, uint32(DTRBS)}}
}

type CHAWSCDR uint32

func (b CHAWSCDR) Field(mask CHAWSCDR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CHAWSCDR) J(v int) CHAWSCDR {
	return CHAWSCDR(bits.Make32(v, uint32(mask)))
}

type RCHAWSCDR struct{ mmio.U32 }

func (r *RCHAWSCDR) Bits(mask CHAWSCDR) CHAWSCDR { return CHAWSCDR(r.U32.Bits(uint32(mask))) }
func (r *RCHAWSCDR) StoreBits(mask, b CHAWSCDR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHAWSCDR) SetBits(mask CHAWSCDR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCHAWSCDR) ClearBits(mask CHAWSCDR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCHAWSCDR) Load() CHAWSCDR              { return CHAWSCDR(r.U32.Load()) }
func (r *RCHAWSCDR) Store(b CHAWSCDR)            { r.U32.Store(uint32(b)) }

func (r *RCHAWSCDR) AtomicStoreBits(mask, b CHAWSCDR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCHAWSCDR) AtomicSetBits(mask CHAWSCDR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCHAWSCDR) AtomicClearBits(mask CHAWSCDR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCHAWSCDR struct{ mmio.UM32 }

func (rm RMCHAWSCDR) Load() CHAWSCDR   { return CHAWSCDR(rm.UM32.Load()) }
func (rm RMCHAWSCDR) Store(b CHAWSCDR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Channel_Periph) AWFORD() RMCHAWSCDR {
	return RMCHAWSCDR{mmio.UM32{&p.CHAWSCDR.U32, uint32(AWFORD)}}
}

func (p *DFSDM_Channel_Periph) AWFOSR() RMCHAWSCDR {
	return RMCHAWSCDR{mmio.UM32{&p.CHAWSCDR.U32, uint32(AWFOSR)}}
}

func (p *DFSDM_Channel_Periph) BKSCD() RMCHAWSCDR {
	return RMCHAWSCDR{mmio.UM32{&p.CHAWSCDR.U32, uint32(BKSCD)}}
}

func (p *DFSDM_Channel_Periph) SCDT() RMCHAWSCDR {
	return RMCHAWSCDR{mmio.UM32{&p.CHAWSCDR.U32, uint32(SCDT)}}
}

type CHWDATAR uint32

func (b CHWDATAR) Field(mask CHWDATAR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CHWDATAR) J(v int) CHWDATAR {
	return CHWDATAR(bits.Make32(v, uint32(mask)))
}

type RCHWDATAR struct{ mmio.U32 }

func (r *RCHWDATAR) Bits(mask CHWDATAR) CHWDATAR { return CHWDATAR(r.U32.Bits(uint32(mask))) }
func (r *RCHWDATAR) StoreBits(mask, b CHWDATAR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHWDATAR) SetBits(mask CHWDATAR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCHWDATAR) ClearBits(mask CHWDATAR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCHWDATAR) Load() CHWDATAR              { return CHWDATAR(r.U32.Load()) }
func (r *RCHWDATAR) Store(b CHWDATAR)            { r.U32.Store(uint32(b)) }

func (r *RCHWDATAR) AtomicStoreBits(mask, b CHWDATAR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCHWDATAR) AtomicSetBits(mask CHWDATAR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCHWDATAR) AtomicClearBits(mask CHWDATAR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCHWDATAR struct{ mmio.UM32 }

func (rm RMCHWDATAR) Load() CHWDATAR   { return CHWDATAR(rm.UM32.Load()) }
func (rm RMCHWDATAR) Store(b CHWDATAR) { rm.UM32.Store(uint32(b)) }

type CHDATINR uint32

func (b CHDATINR) Field(mask CHDATINR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CHDATINR) J(v int) CHDATINR {
	return CHDATINR(bits.Make32(v, uint32(mask)))
}

type RCHDATINR struct{ mmio.U32 }

func (r *RCHDATINR) Bits(mask CHDATINR) CHDATINR { return CHDATINR(r.U32.Bits(uint32(mask))) }
func (r *RCHDATINR) StoreBits(mask, b CHDATINR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCHDATINR) SetBits(mask CHDATINR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCHDATINR) ClearBits(mask CHDATINR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCHDATINR) Load() CHDATINR              { return CHDATINR(r.U32.Load()) }
func (r *RCHDATINR) Store(b CHDATINR)            { r.U32.Store(uint32(b)) }

func (r *RCHDATINR) AtomicStoreBits(mask, b CHDATINR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCHDATINR) AtomicSetBits(mask CHDATINR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCHDATINR) AtomicClearBits(mask CHDATINR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCHDATINR struct{ mmio.UM32 }

func (rm RMCHDATINR) Load() CHDATINR   { return CHDATINR(rm.UM32.Load()) }
func (rm RMCHDATINR) Store(b CHDATINR) { rm.UM32.Store(uint32(b)) }

func (p *DFSDM_Channel_Periph) INDAT0() RMCHDATINR {
	return RMCHDATINR{mmio.UM32{&p.CHDATINR.U32, uint32(INDAT0)}}
}

func (p *DFSDM_Channel_Periph) INDAT1() RMCHDATINR {
	return RMCHDATINR{mmio.UM32{&p.CHDATINR.U32, uint32(INDAT1)}}
}
