package cec

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f10x_hd/mmap"
)

type CEC_Periph struct {
	CFGR RCFGR
	OAR  ROAR
	PRES RPRES
	ESR  RESR
	CSR  RCSR
	TXD  RTXD
	RXD  RRXD
}

func (p *CEC_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var CEC = (*CEC_Periph)(unsafe.Pointer(uintptr(mmap.CEC_BASE)))

type CFGR uint32

func (b CFGR) Field(mask CFGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR) J(v int) CFGR {
	return CFGR(bits.MakeField32(v, uint32(mask)))
}

type RCFGR struct{ mmio.U32 }

func (r *RCFGR) Bits(mask CFGR) CFGR    { return CFGR(r.U32.Bits(uint32(mask))) }
func (r *RCFGR) StoreBits(mask, b CFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) SetBits(mask CFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR) ClearBits(mask CFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR) Load() CFGR             { return CFGR(r.U32.Load()) }
func (r *RCFGR) Store(b CFGR)           { r.U32.Store(uint32(b)) }

func (r *RCFGR) AtomicStoreBits(mask, b CFGR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) AtomicSetBits(mask CFGR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCFGR) AtomicClearBits(mask CFGR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCFGR struct{ mmio.UM32 }

func (rm RMCFGR) Load() CFGR   { return CFGR(rm.UM32.Load()) }
func (rm RMCFGR) Store(b CFGR) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) PE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(PE)}}
}

func (p *CEC_Periph) IE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(IE)}}
}

func (p *CEC_Periph) BTEM() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(BTEM)}}
}

func (p *CEC_Periph) BPEM() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(BPEM)}}
}

type OAR uint32

func (b OAR) Field(mask OAR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask OAR) J(v int) OAR {
	return OAR(bits.MakeField32(v, uint32(mask)))
}

type ROAR struct{ mmio.U32 }

func (r *ROAR) Bits(mask OAR) OAR     { return OAR(r.U32.Bits(uint32(mask))) }
func (r *ROAR) StoreBits(mask, b OAR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ROAR) SetBits(mask OAR)      { r.U32.SetBits(uint32(mask)) }
func (r *ROAR) ClearBits(mask OAR)    { r.U32.ClearBits(uint32(mask)) }
func (r *ROAR) Load() OAR             { return OAR(r.U32.Load()) }
func (r *ROAR) Store(b OAR)           { r.U32.Store(uint32(b)) }

func (r *ROAR) AtomicStoreBits(mask, b OAR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *ROAR) AtomicSetBits(mask OAR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ROAR) AtomicClearBits(mask OAR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMOAR struct{ mmio.UM32 }

func (rm RMOAR) Load() OAR   { return OAR(rm.UM32.Load()) }
func (rm RMOAR) Store(b OAR) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) OA() RMOAR {
	return RMOAR{mmio.UM32{&p.OAR.U32, uint32(OA)}}
}

type PRES uint32

func (b PRES) Field(mask PRES) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PRES) J(v int) PRES {
	return PRES(bits.MakeField32(v, uint32(mask)))
}

type RPRES struct{ mmio.U32 }

func (r *RPRES) Bits(mask PRES) PRES    { return PRES(r.U32.Bits(uint32(mask))) }
func (r *RPRES) StoreBits(mask, b PRES) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPRES) SetBits(mask PRES)      { r.U32.SetBits(uint32(mask)) }
func (r *RPRES) ClearBits(mask PRES)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPRES) Load() PRES             { return PRES(r.U32.Load()) }
func (r *RPRES) Store(b PRES)           { r.U32.Store(uint32(b)) }

func (r *RPRES) AtomicStoreBits(mask, b PRES) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RPRES) AtomicSetBits(mask PRES)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RPRES) AtomicClearBits(mask PRES)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMPRES struct{ mmio.UM32 }

func (rm RMPRES) Load() PRES   { return PRES(rm.UM32.Load()) }
func (rm RMPRES) Store(b PRES) { rm.UM32.Store(uint32(b)) }

type ESR uint32

func (b ESR) Field(mask ESR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ESR) J(v int) ESR {
	return ESR(bits.MakeField32(v, uint32(mask)))
}

type RESR struct{ mmio.U32 }

func (r *RESR) Bits(mask ESR) ESR     { return ESR(r.U32.Bits(uint32(mask))) }
func (r *RESR) StoreBits(mask, b ESR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RESR) SetBits(mask ESR)      { r.U32.SetBits(uint32(mask)) }
func (r *RESR) ClearBits(mask ESR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RESR) Load() ESR             { return ESR(r.U32.Load()) }
func (r *RESR) Store(b ESR)           { r.U32.Store(uint32(b)) }

func (r *RESR) AtomicStoreBits(mask, b ESR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RESR) AtomicSetBits(mask ESR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RESR) AtomicClearBits(mask ESR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMESR struct{ mmio.UM32 }

func (rm RMESR) Load() ESR   { return ESR(rm.UM32.Load()) }
func (rm RMESR) Store(b ESR) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) BTE() RMESR {
	return RMESR{mmio.UM32{&p.ESR.U32, uint32(BTE)}}
}

func (p *CEC_Periph) BPE() RMESR {
	return RMESR{mmio.UM32{&p.ESR.U32, uint32(BPE)}}
}

func (p *CEC_Periph) RBTFE() RMESR {
	return RMESR{mmio.UM32{&p.ESR.U32, uint32(RBTFE)}}
}

func (p *CEC_Periph) SBE() RMESR {
	return RMESR{mmio.UM32{&p.ESR.U32, uint32(SBE)}}
}

func (p *CEC_Periph) ACKE() RMESR {
	return RMESR{mmio.UM32{&p.ESR.U32, uint32(ACKE)}}
}

func (p *CEC_Periph) LINE() RMESR {
	return RMESR{mmio.UM32{&p.ESR.U32, uint32(LINE)}}
}

func (p *CEC_Periph) TBTFE() RMESR {
	return RMESR{mmio.UM32{&p.ESR.U32, uint32(TBTFE)}}
}

type CSR uint32

func (b CSR) Field(mask CSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR) J(v int) CSR {
	return CSR(bits.MakeField32(v, uint32(mask)))
}

type RCSR struct{ mmio.U32 }

func (r *RCSR) Bits(mask CSR) CSR     { return CSR(r.U32.Bits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

func (r *RCSR) AtomicStoreBits(mask, b CSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) AtomicSetBits(mask CSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR) AtomicClearBits(mask CSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) TSOM() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TSOM)}}
}

func (p *CEC_Periph) TEOM() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TEOM)}}
}

func (p *CEC_Periph) TERR() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TERR)}}
}

func (p *CEC_Periph) TBTRF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TBTRF)}}
}

func (p *CEC_Periph) RSOM() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(RSOM)}}
}

func (p *CEC_Periph) REOM() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(REOM)}}
}

func (p *CEC_Periph) RERR() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(RERR)}}
}

func (p *CEC_Periph) RBTF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(RBTF)}}
}

type TXD uint32

func (b TXD) Field(mask TXD) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TXD) J(v int) TXD {
	return TXD(bits.MakeField32(v, uint32(mask)))
}

type RTXD struct{ mmio.U32 }

func (r *RTXD) Bits(mask TXD) TXD     { return TXD(r.U32.Bits(uint32(mask))) }
func (r *RTXD) StoreBits(mask, b TXD) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTXD) SetBits(mask TXD)      { r.U32.SetBits(uint32(mask)) }
func (r *RTXD) ClearBits(mask TXD)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTXD) Load() TXD             { return TXD(r.U32.Load()) }
func (r *RTXD) Store(b TXD)           { r.U32.Store(uint32(b)) }

func (r *RTXD) AtomicStoreBits(mask, b TXD) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RTXD) AtomicSetBits(mask TXD)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RTXD) AtomicClearBits(mask TXD)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMTXD struct{ mmio.UM32 }

func (rm RMTXD) Load() TXD   { return TXD(rm.UM32.Load()) }
func (rm RMTXD) Store(b TXD) { rm.UM32.Store(uint32(b)) }

type RXD uint32

func (b RXD) Field(mask RXD) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RXD) J(v int) RXD {
	return RXD(bits.MakeField32(v, uint32(mask)))
}

type RRXD struct{ mmio.U32 }

func (r *RRXD) Bits(mask RXD) RXD     { return RXD(r.U32.Bits(uint32(mask))) }
func (r *RRXD) StoreBits(mask, b RXD) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRXD) SetBits(mask RXD)      { r.U32.SetBits(uint32(mask)) }
func (r *RRXD) ClearBits(mask RXD)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRXD) Load() RXD             { return RXD(r.U32.Load()) }
func (r *RRXD) Store(b RXD)           { r.U32.Store(uint32(b)) }

func (r *RRXD) AtomicStoreBits(mask, b RXD) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RRXD) AtomicSetBits(mask RXD)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RRXD) AtomicClearBits(mask RXD)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMRXD struct{ mmio.UM32 }

func (rm RMRXD) Load() RXD   { return RXD(rm.UM32.Load()) }
func (rm RMRXD) Store(b RXD) { rm.UM32.Store(uint32(b)) }
