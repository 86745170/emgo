package spdifrx

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type SPDIFRX_Periph struct {
	CR   RCR
	IMR  RIMR
	SR   RSR
	IFCR RIFCR
	DR   RDR
	CSR  RCSR
	DIR  RDIR
}

func (p *SPDIFRX_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var SPDIFRX = (*SPDIFRX_Periph)(unsafe.Pointer(uintptr(mmap.SPDIFRX_BASE)))

type CR uint32

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.Make32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicStoreBits(mask, b CR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR) AtomicSetBits(mask CR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask CR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func (p *SPDIFRX_Periph) SPDIFEN() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(SPDIFEN)}}
}

func (p *SPDIFRX_Periph) RXDMAEN() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(RXDMAEN)}}
}

func (p *SPDIFRX_Periph) RXSTEO() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(RXSTEO)}}
}

func (p *SPDIFRX_Periph) DRFMT() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(DRFMT)}}
}

func (p *SPDIFRX_Periph) PMSK() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PMSK)}}
}

func (p *SPDIFRX_Periph) VMSK() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(VMSK)}}
}

func (p *SPDIFRX_Periph) CUMSK() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CUMSK)}}
}

func (p *SPDIFRX_Periph) PTMSK() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PTMSK)}}
}

func (p *SPDIFRX_Periph) CBDMAEN() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CBDMAEN)}}
}

func (p *SPDIFRX_Periph) CHSEL() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CHSEL)}}
}

func (p *SPDIFRX_Periph) NBTR() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(NBTR)}}
}

func (p *SPDIFRX_Periph) WFA() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(WFA)}}
}

func (p *SPDIFRX_Periph) INSEL() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(INSEL)}}
}

type IMR uint32

func (b IMR) Field(mask IMR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IMR) J(v int) IMR {
	return IMR(bits.Make32(v, uint32(mask)))
}

type RIMR struct{ mmio.U32 }

func (r *RIMR) Bits(mask IMR) IMR     { return IMR(r.U32.Bits(uint32(mask))) }
func (r *RIMR) StoreBits(mask, b IMR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIMR) SetBits(mask IMR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIMR) ClearBits(mask IMR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIMR) Load() IMR             { return IMR(r.U32.Load()) }
func (r *RIMR) Store(b IMR)           { r.U32.Store(uint32(b)) }

func (r *RIMR) AtomicStoreBits(mask, b IMR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIMR) AtomicSetBits(mask IMR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIMR) AtomicClearBits(mask IMR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIMR struct{ mmio.UM32 }

func (rm RMIMR) Load() IMR   { return IMR(rm.UM32.Load()) }
func (rm RMIMR) Store(b IMR) { rm.UM32.Store(uint32(b)) }

func (p *SPDIFRX_Periph) RXNEIE() RMIMR {
	return RMIMR{mmio.UM32{&p.IMR.U32, uint32(RXNEIE)}}
}

func (p *SPDIFRX_Periph) CSRNEIE() RMIMR {
	return RMIMR{mmio.UM32{&p.IMR.U32, uint32(CSRNEIE)}}
}

func (p *SPDIFRX_Periph) PERRIE() RMIMR {
	return RMIMR{mmio.UM32{&p.IMR.U32, uint32(PERRIE)}}
}

func (p *SPDIFRX_Periph) OVRIE() RMIMR {
	return RMIMR{mmio.UM32{&p.IMR.U32, uint32(OVRIE)}}
}

func (p *SPDIFRX_Periph) SBLKIE() RMIMR {
	return RMIMR{mmio.UM32{&p.IMR.U32, uint32(SBLKIE)}}
}

func (p *SPDIFRX_Periph) SYNCDIE() RMIMR {
	return RMIMR{mmio.UM32{&p.IMR.U32, uint32(SYNCDIE)}}
}

func (p *SPDIFRX_Periph) IFEIE() RMIMR {
	return RMIMR{mmio.UM32{&p.IMR.U32, uint32(IFEIE)}}
}

type SR uint32

func (b SR) Field(mask SR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SR) J(v int) SR {
	return SR(bits.Make32(v, uint32(mask)))
}

type RSR struct{ mmio.U32 }

func (r *RSR) Bits(mask SR) SR      { return SR(r.U32.Bits(uint32(mask))) }
func (r *RSR) StoreBits(mask, b SR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSR) SetBits(mask SR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSR) ClearBits(mask SR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSR) Load() SR             { return SR(r.U32.Load()) }
func (r *RSR) Store(b SR)           { r.U32.Store(uint32(b)) }

func (r *RSR) AtomicStoreBits(mask, b SR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RSR) AtomicSetBits(mask SR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RSR) AtomicClearBits(mask SR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMSR struct{ mmio.UM32 }

func (rm RMSR) Load() SR   { return SR(rm.UM32.Load()) }
func (rm RMSR) Store(b SR) { rm.UM32.Store(uint32(b)) }

func (p *SPDIFRX_Periph) RXNE() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(RXNE)}}
}

func (p *SPDIFRX_Periph) CSRNE() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(CSRNE)}}
}

func (p *SPDIFRX_Periph) PERR() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(PERR)}}
}

func (p *SPDIFRX_Periph) OVR() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(OVR)}}
}

func (p *SPDIFRX_Periph) SBD() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(SBD)}}
}

func (p *SPDIFRX_Periph) SYNCD() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(SYNCD)}}
}

func (p *SPDIFRX_Periph) FERR() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(FERR)}}
}

func (p *SPDIFRX_Periph) SERR() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(SERR)}}
}

func (p *SPDIFRX_Periph) TERR() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(TERR)}}
}

func (p *SPDIFRX_Periph) WIDTH5() RMSR {
	return RMSR{mmio.UM32{&p.SR.U32, uint32(WIDTH5)}}
}

type IFCR uint32

func (b IFCR) Field(mask IFCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IFCR) J(v int) IFCR {
	return IFCR(bits.Make32(v, uint32(mask)))
}

type RIFCR struct{ mmio.U32 }

func (r *RIFCR) Bits(mask IFCR) IFCR    { return IFCR(r.U32.Bits(uint32(mask))) }
func (r *RIFCR) StoreBits(mask, b IFCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIFCR) SetBits(mask IFCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIFCR) ClearBits(mask IFCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIFCR) Load() IFCR             { return IFCR(r.U32.Load()) }
func (r *RIFCR) Store(b IFCR)           { r.U32.Store(uint32(b)) }

func (r *RIFCR) AtomicStoreBits(mask, b IFCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIFCR) AtomicSetBits(mask IFCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIFCR) AtomicClearBits(mask IFCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIFCR struct{ mmio.UM32 }

func (rm RMIFCR) Load() IFCR   { return IFCR(rm.UM32.Load()) }
func (rm RMIFCR) Store(b IFCR) { rm.UM32.Store(uint32(b)) }

func (p *SPDIFRX_Periph) PERRCF() RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(PERRCF)}}
}

func (p *SPDIFRX_Periph) OVRCF() RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(OVRCF)}}
}

func (p *SPDIFRX_Periph) SBDCF() RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(SBDCF)}}
}

func (p *SPDIFRX_Periph) SYNCDCF() RMIFCR {
	return RMIFCR{mmio.UM32{&p.IFCR.U32, uint32(SYNCDCF)}}
}

type DR uint32

func (b DR) Field(mask DR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR) J(v int) DR {
	return DR(bits.Make32(v, uint32(mask)))
}

type RDR struct{ mmio.U32 }

func (r *RDR) Bits(mask DR) DR      { return DR(r.U32.Bits(uint32(mask))) }
func (r *RDR) StoreBits(mask, b DR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDR) SetBits(mask DR)      { r.U32.SetBits(uint32(mask)) }
func (r *RDR) ClearBits(mask DR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDR) Load() DR             { return DR(r.U32.Load()) }
func (r *RDR) Store(b DR)           { r.U32.Store(uint32(b)) }

func (r *RDR) AtomicStoreBits(mask, b DR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RDR) AtomicSetBits(mask DR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RDR) AtomicClearBits(mask DR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMDR struct{ mmio.UM32 }

func (rm RMDR) Load() DR   { return DR(rm.UM32.Load()) }
func (rm RMDR) Store(b DR) { rm.UM32.Store(uint32(b)) }

func (p *SPDIFRX_Periph) DR() RMDR {
	return RMDR{mmio.UM32{&p.DR.U32, uint32(DR)}}
}

func (p *SPDIFRX_Periph) PT() RMDR {
	return RMDR{mmio.UM32{&p.DR.U32, uint32(PT)}}
}

func (p *SPDIFRX_Periph) C() RMDR {
	return RMDR{mmio.UM32{&p.DR.U32, uint32(C)}}
}

func (p *SPDIFRX_Periph) U() RMDR {
	return RMDR{mmio.UM32{&p.DR.U32, uint32(U)}}
}

func (p *SPDIFRX_Periph) V() RMDR {
	return RMDR{mmio.UM32{&p.DR.U32, uint32(V)}}
}

func (p *SPDIFRX_Periph) PE() RMDR {
	return RMDR{mmio.UM32{&p.DR.U32, uint32(PE)}}
}

type CSR uint32

func (b CSR) Field(mask CSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR) J(v int) CSR {
	return CSR(bits.Make32(v, uint32(mask)))
}

type RCSR struct{ mmio.U32 }

func (r *RCSR) Bits(mask CSR) CSR     { return CSR(r.U32.Bits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

func (r *RCSR) AtomicStoreBits(mask, b CSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) AtomicSetBits(mask CSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR) AtomicClearBits(mask CSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *SPDIFRX_Periph) USR() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(USR)}}
}

func (p *SPDIFRX_Periph) CS() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CS)}}
}

func (p *SPDIFRX_Periph) SOB() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(SOB)}}
}

type DIR uint32

func (b DIR) Field(mask DIR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DIR) J(v int) DIR {
	return DIR(bits.Make32(v, uint32(mask)))
}

type RDIR struct{ mmio.U32 }

func (r *RDIR) Bits(mask DIR) DIR     { return DIR(r.U32.Bits(uint32(mask))) }
func (r *RDIR) StoreBits(mask, b DIR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDIR) SetBits(mask DIR)      { r.U32.SetBits(uint32(mask)) }
func (r *RDIR) ClearBits(mask DIR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RDIR) Load() DIR             { return DIR(r.U32.Load()) }
func (r *RDIR) Store(b DIR)           { r.U32.Store(uint32(b)) }

func (r *RDIR) AtomicStoreBits(mask, b DIR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RDIR) AtomicSetBits(mask DIR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RDIR) AtomicClearBits(mask DIR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMDIR struct{ mmio.UM32 }

func (rm RMDIR) Load() DIR   { return DIR(rm.UM32.Load()) }
func (rm RMDIR) Store(b DIR) { rm.UM32.Store(uint32(b)) }

func (p *SPDIFRX_Periph) THI() RMDIR {
	return RMDIR{mmio.UM32{&p.DIR.U32, uint32(THI)}}
}

func (p *SPDIFRX_Periph) TLO() RMDIR {
	return RMDIR{mmio.UM32{&p.DIR.U32, uint32(TLO)}}
}
