package pwr

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type PWR_Periph struct {
	CR1  RCR1
	CSR1 RCSR1
	CR2  RCR2
	CSR2 RCSR2
}

func (p *PWR_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var PWR = (*PWR_Periph)(unsafe.Pointer(uintptr(mmap.PWR_BASE)))

type CR1 uint32

func (b CR1) Field(mask CR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR1) J(v int) CR1 {
	return CR1(bits.Make32(v, uint32(mask)))
}

type RCR1 struct{ mmio.U32 }

func (r *RCR1) Bits(mask CR1) CR1     { return CR1(r.U32.Bits(uint32(mask))) }
func (r *RCR1) StoreBits(mask, b CR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR1) SetBits(mask CR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR1) ClearBits(mask CR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR1) Load() CR1             { return CR1(r.U32.Load()) }
func (r *RCR1) Store(b CR1)           { r.U32.Store(uint32(b)) }

func (r *RCR1) AtomicStoreBits(mask, b CR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR1) AtomicSetBits(mask CR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR1) AtomicClearBits(mask CR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR1 struct{ mmio.UM32 }

func (rm RMCR1) Load() CR1   { return CR1(rm.UM32.Load()) }
func (rm RMCR1) Store(b CR1) { rm.UM32.Store(uint32(b)) }

func (p *PWR_Periph) LPDS() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(LPDS)}}
}

func (p *PWR_Periph) PDDS() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(PDDS)}}
}

func (p *PWR_Periph) CSBF() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(CSBF)}}
}

func (p *PWR_Periph) PVDE() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(PVDE)}}
}

func (p *PWR_Periph) PLS() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(PLS)}}
}

func (p *PWR_Periph) DBP() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(DBP)}}
}

func (p *PWR_Periph) FPDS() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(FPDS)}}
}

func (p *PWR_Periph) LPUDS() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(LPUDS)}}
}

func (p *PWR_Periph) MRUDS() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(MRUDS)}}
}

func (p *PWR_Periph) ADCDC1() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(ADCDC1)}}
}

func (p *PWR_Periph) VOS() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(VOS)}}
}

func (p *PWR_Periph) ODEN() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(ODEN)}}
}

func (p *PWR_Periph) ODSWEN() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(ODSWEN)}}
}

func (p *PWR_Periph) UDEN() RMCR1 {
	return RMCR1{mmio.UM32{&p.CR1.U32, uint32(UDEN)}}
}

type CSR1 uint32

func (b CSR1) Field(mask CSR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR1) J(v int) CSR1 {
	return CSR1(bits.Make32(v, uint32(mask)))
}

type RCSR1 struct{ mmio.U32 }

func (r *RCSR1) Bits(mask CSR1) CSR1    { return CSR1(r.U32.Bits(uint32(mask))) }
func (r *RCSR1) StoreBits(mask, b CSR1) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR1) SetBits(mask CSR1)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR1) ClearBits(mask CSR1)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR1) Load() CSR1             { return CSR1(r.U32.Load()) }
func (r *RCSR1) Store(b CSR1)           { r.U32.Store(uint32(b)) }

func (r *RCSR1) AtomicStoreBits(mask, b CSR1) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR1) AtomicSetBits(mask CSR1)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR1) AtomicClearBits(mask CSR1)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR1 struct{ mmio.UM32 }

func (rm RMCSR1) Load() CSR1   { return CSR1(rm.UM32.Load()) }
func (rm RMCSR1) Store(b CSR1) { rm.UM32.Store(uint32(b)) }

func (p *PWR_Periph) WUIF() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(WUIF)}}
}

func (p *PWR_Periph) SBF() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(SBF)}}
}

func (p *PWR_Periph) PVDO() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(PVDO)}}
}

func (p *PWR_Periph) BRR() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(BRR)}}
}

func (p *PWR_Periph) EIWUP() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(EIWUP)}}
}

func (p *PWR_Periph) BRE() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(BRE)}}
}

func (p *PWR_Periph) VOSRDY() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(VOSRDY)}}
}

func (p *PWR_Periph) ODRDY() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(ODRDY)}}
}

func (p *PWR_Periph) ODSWRDY() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(ODSWRDY)}}
}

func (p *PWR_Periph) UDRDY() RMCSR1 {
	return RMCSR1{mmio.UM32{&p.CSR1.U32, uint32(UDRDY)}}
}

type CR2 uint32

func (b CR2) Field(mask CR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR2) J(v int) CR2 {
	return CR2(bits.Make32(v, uint32(mask)))
}

type RCR2 struct{ mmio.U32 }

func (r *RCR2) Bits(mask CR2) CR2     { return CR2(r.U32.Bits(uint32(mask))) }
func (r *RCR2) StoreBits(mask, b CR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR2) SetBits(mask CR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR2) ClearBits(mask CR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR2) Load() CR2             { return CR2(r.U32.Load()) }
func (r *RCR2) Store(b CR2)           { r.U32.Store(uint32(b)) }

func (r *RCR2) AtomicStoreBits(mask, b CR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR2) AtomicSetBits(mask CR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR2) AtomicClearBits(mask CR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR2 struct{ mmio.UM32 }

func (rm RMCR2) Load() CR2   { return CR2(rm.UM32.Load()) }
func (rm RMCR2) Store(b CR2) { rm.UM32.Store(uint32(b)) }

func (p *PWR_Periph) CWUPF1() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(CWUPF1)}}
}

func (p *PWR_Periph) CWUPF2() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(CWUPF2)}}
}

func (p *PWR_Periph) CWUPF3() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(CWUPF3)}}
}

func (p *PWR_Periph) CWUPF4() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(CWUPF4)}}
}

func (p *PWR_Periph) CWUPF5() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(CWUPF5)}}
}

func (p *PWR_Periph) CWUPF6() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(CWUPF6)}}
}

func (p *PWR_Periph) WUPP1() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(WUPP1)}}
}

func (p *PWR_Periph) WUPP2() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(WUPP2)}}
}

func (p *PWR_Periph) WUPP3() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(WUPP3)}}
}

func (p *PWR_Periph) WUPP4() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(WUPP4)}}
}

func (p *PWR_Periph) WUPP5() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(WUPP5)}}
}

func (p *PWR_Periph) WUPP6() RMCR2 {
	return RMCR2{mmio.UM32{&p.CR2.U32, uint32(WUPP6)}}
}

type CSR2 uint32

func (b CSR2) Field(mask CSR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR2) J(v int) CSR2 {
	return CSR2(bits.Make32(v, uint32(mask)))
}

type RCSR2 struct{ mmio.U32 }

func (r *RCSR2) Bits(mask CSR2) CSR2    { return CSR2(r.U32.Bits(uint32(mask))) }
func (r *RCSR2) StoreBits(mask, b CSR2) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR2) SetBits(mask CSR2)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR2) ClearBits(mask CSR2)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR2) Load() CSR2             { return CSR2(r.U32.Load()) }
func (r *RCSR2) Store(b CSR2)           { r.U32.Store(uint32(b)) }

func (r *RCSR2) AtomicStoreBits(mask, b CSR2) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR2) AtomicSetBits(mask CSR2)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR2) AtomicClearBits(mask CSR2)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR2 struct{ mmio.UM32 }

func (rm RMCSR2) Load() CSR2   { return CSR2(rm.UM32.Load()) }
func (rm RMCSR2) Store(b CSR2) { rm.UM32.Store(uint32(b)) }

func (p *PWR_Periph) WUPF1() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(WUPF1)}}
}

func (p *PWR_Periph) WUPF2() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(WUPF2)}}
}

func (p *PWR_Periph) WUPF3() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(WUPF3)}}
}

func (p *PWR_Periph) WUPF4() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(WUPF4)}}
}

func (p *PWR_Periph) WUPF5() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(WUPF5)}}
}

func (p *PWR_Periph) WUPF6() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(WUPF6)}}
}

func (p *PWR_Periph) EWUP1() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(EWUP1)}}
}

func (p *PWR_Periph) EWUP2() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(EWUP2)}}
}

func (p *PWR_Periph) EWUP3() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(EWUP3)}}
}

func (p *PWR_Periph) EWUP4() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(EWUP4)}}
}

func (p *PWR_Periph) EWUP5() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(EWUP5)}}
}

func (p *PWR_Periph) EWUP6() RMCSR2 {
	return RMCSR2{mmio.UM32{&p.CSR2.U32, uint32(EWUP6)}}
}
