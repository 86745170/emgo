package lptim

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type LPTIM_Periph struct {
	ISR  RISR
	ICR  RICR
	IER  RIER
	CFGR RCFGR
	CR   RCR
	CMP  RCMP
	ARR  RARR
	CNT  RCNT
}

func (p *LPTIM_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var LPTIM1 = (*LPTIM_Periph)(unsafe.Pointer(uintptr(mmap.LPTIM1_BASE)))

type ISR uint32

func (b ISR) Field(mask ISR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISR) J(v int) ISR {
	return ISR(bits.Make32(v, uint32(mask)))
}

type RISR struct{ mmio.U32 }

func (r *RISR) Bits(mask ISR) ISR     { return ISR(r.U32.Bits(uint32(mask))) }
func (r *RISR) StoreBits(mask, b ISR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RISR) SetBits(mask ISR)      { r.U32.SetBits(uint32(mask)) }
func (r *RISR) ClearBits(mask ISR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RISR) Load() ISR             { return ISR(r.U32.Load()) }
func (r *RISR) Store(b ISR)           { r.U32.Store(uint32(b)) }

func (r *RISR) AtomicStoreBits(mask, b ISR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RISR) AtomicSetBits(mask ISR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RISR) AtomicClearBits(mask ISR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMISR struct{ mmio.UM32 }

func (rm RMISR) Load() ISR   { return ISR(rm.UM32.Load()) }
func (rm RMISR) Store(b ISR) { rm.UM32.Store(uint32(b)) }

func (p *LPTIM_Periph) CMPM() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(CMPM)}}
}

func (p *LPTIM_Periph) ARRM() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(ARRM)}}
}

func (p *LPTIM_Periph) EXTTRIG() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(EXTTRIG)}}
}

func (p *LPTIM_Periph) CMPOK() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(CMPOK)}}
}

func (p *LPTIM_Periph) ARROK() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(ARROK)}}
}

func (p *LPTIM_Periph) UP() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(UP)}}
}

func (p *LPTIM_Periph) DOWN() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(DOWN)}}
}

type ICR uint32

func (b ICR) Field(mask ICR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICR) J(v int) ICR {
	return ICR(bits.Make32(v, uint32(mask)))
}

type RICR struct{ mmio.U32 }

func (r *RICR) Bits(mask ICR) ICR     { return ICR(r.U32.Bits(uint32(mask))) }
func (r *RICR) StoreBits(mask, b ICR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICR) SetBits(mask ICR)      { r.U32.SetBits(uint32(mask)) }
func (r *RICR) ClearBits(mask ICR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RICR) Load() ICR             { return ICR(r.U32.Load()) }
func (r *RICR) Store(b ICR)           { r.U32.Store(uint32(b)) }

func (r *RICR) AtomicStoreBits(mask, b ICR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RICR) AtomicSetBits(mask ICR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RICR) AtomicClearBits(mask ICR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMICR struct{ mmio.UM32 }

func (rm RMICR) Load() ICR   { return ICR(rm.UM32.Load()) }
func (rm RMICR) Store(b ICR) { rm.UM32.Store(uint32(b)) }

func (p *LPTIM_Periph) CMPMCF() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(CMPMCF)}}
}

func (p *LPTIM_Periph) ARRMCF() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(ARRMCF)}}
}

func (p *LPTIM_Periph) EXTTRIGCF() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(EXTTRIGCF)}}
}

func (p *LPTIM_Periph) CMPOKCF() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(CMPOKCF)}}
}

func (p *LPTIM_Periph) ARROKCF() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(ARROKCF)}}
}

func (p *LPTIM_Periph) UPCF() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(UPCF)}}
}

func (p *LPTIM_Periph) DOWNCF() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(DOWNCF)}}
}

type IER uint32

func (b IER) Field(mask IER) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IER) J(v int) IER {
	return IER(bits.Make32(v, uint32(mask)))
}

type RIER struct{ mmio.U32 }

func (r *RIER) Bits(mask IER) IER     { return IER(r.U32.Bits(uint32(mask))) }
func (r *RIER) StoreBits(mask, b IER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIER) SetBits(mask IER)      { r.U32.SetBits(uint32(mask)) }
func (r *RIER) ClearBits(mask IER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIER) Load() IER             { return IER(r.U32.Load()) }
func (r *RIER) Store(b IER)           { r.U32.Store(uint32(b)) }

func (r *RIER) AtomicStoreBits(mask, b IER) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIER) AtomicSetBits(mask IER)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIER) AtomicClearBits(mask IER)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIER struct{ mmio.UM32 }

func (rm RMIER) Load() IER   { return IER(rm.UM32.Load()) }
func (rm RMIER) Store(b IER) { rm.UM32.Store(uint32(b)) }

func (p *LPTIM_Periph) CMPMIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(CMPMIE)}}
}

func (p *LPTIM_Periph) ARRMIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(ARRMIE)}}
}

func (p *LPTIM_Periph) EXTTRIGIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(EXTTRIGIE)}}
}

func (p *LPTIM_Periph) CMPOKIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(CMPOKIE)}}
}

func (p *LPTIM_Periph) ARROKIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(ARROKIE)}}
}

func (p *LPTIM_Periph) UPIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(UPIE)}}
}

func (p *LPTIM_Periph) DOWNIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(DOWNIE)}}
}

type CFGR uint32

func (b CFGR) Field(mask CFGR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR) J(v int) CFGR {
	return CFGR(bits.Make32(v, uint32(mask)))
}

type RCFGR struct{ mmio.U32 }

func (r *RCFGR) Bits(mask CFGR) CFGR    { return CFGR(r.U32.Bits(uint32(mask))) }
func (r *RCFGR) StoreBits(mask, b CFGR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) SetBits(mask CFGR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCFGR) ClearBits(mask CFGR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCFGR) Load() CFGR             { return CFGR(r.U32.Load()) }
func (r *RCFGR) Store(b CFGR)           { r.U32.Store(uint32(b)) }

func (r *RCFGR) AtomicStoreBits(mask, b CFGR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCFGR) AtomicSetBits(mask CFGR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCFGR) AtomicClearBits(mask CFGR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCFGR struct{ mmio.UM32 }

func (rm RMCFGR) Load() CFGR   { return CFGR(rm.UM32.Load()) }
func (rm RMCFGR) Store(b CFGR) { rm.UM32.Store(uint32(b)) }

func (p *LPTIM_Periph) CKSEL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(CKSEL)}}
}

func (p *LPTIM_Periph) CKPOL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(CKPOL)}}
}

func (p *LPTIM_Periph) CKFLT() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(CKFLT)}}
}

func (p *LPTIM_Periph) TRGFLT() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(TRGFLT)}}
}

func (p *LPTIM_Periph) PRESC() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(PRESC)}}
}

func (p *LPTIM_Periph) TRIGSEL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(TRIGSEL)}}
}

func (p *LPTIM_Periph) TRIGEN() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(TRIGEN)}}
}

func (p *LPTIM_Periph) TIMOUT() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(TIMOUT)}}
}

func (p *LPTIM_Periph) WAVE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(WAVE)}}
}

func (p *LPTIM_Periph) WAVPOL() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(WAVPOL)}}
}

func (p *LPTIM_Periph) PRELOAD() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(PRELOAD)}}
}

func (p *LPTIM_Periph) COUNTMODE() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(COUNTMODE)}}
}

func (p *LPTIM_Periph) ENC() RMCFGR {
	return RMCFGR{mmio.UM32{&p.CFGR.U32, uint32(ENC)}}
}

type CR uint32

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.Make32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicStoreBits(mask, b CR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR) AtomicSetBits(mask CR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask CR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func (p *LPTIM_Periph) ENABLE() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(ENABLE)}}
}

func (p *LPTIM_Periph) SNGSTRT() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(SNGSTRT)}}
}

func (p *LPTIM_Periph) CNTSTRT() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CNTSTRT)}}
}

type CMP uint32

func (b CMP) Field(mask CMP) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CMP) J(v int) CMP {
	return CMP(bits.Make32(v, uint32(mask)))
}

type RCMP struct{ mmio.U32 }

func (r *RCMP) Bits(mask CMP) CMP     { return CMP(r.U32.Bits(uint32(mask))) }
func (r *RCMP) StoreBits(mask, b CMP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCMP) SetBits(mask CMP)      { r.U32.SetBits(uint32(mask)) }
func (r *RCMP) ClearBits(mask CMP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCMP) Load() CMP             { return CMP(r.U32.Load()) }
func (r *RCMP) Store(b CMP)           { r.U32.Store(uint32(b)) }

func (r *RCMP) AtomicStoreBits(mask, b CMP) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCMP) AtomicSetBits(mask CMP)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCMP) AtomicClearBits(mask CMP)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCMP struct{ mmio.UM32 }

func (rm RMCMP) Load() CMP   { return CMP(rm.UM32.Load()) }
func (rm RMCMP) Store(b CMP) { rm.UM32.Store(uint32(b)) }

type ARR uint32

func (b ARR) Field(mask ARR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ARR) J(v int) ARR {
	return ARR(bits.Make32(v, uint32(mask)))
}

type RARR struct{ mmio.U32 }

func (r *RARR) Bits(mask ARR) ARR     { return ARR(r.U32.Bits(uint32(mask))) }
func (r *RARR) StoreBits(mask, b ARR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RARR) SetBits(mask ARR)      { r.U32.SetBits(uint32(mask)) }
func (r *RARR) ClearBits(mask ARR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RARR) Load() ARR             { return ARR(r.U32.Load()) }
func (r *RARR) Store(b ARR)           { r.U32.Store(uint32(b)) }

func (r *RARR) AtomicStoreBits(mask, b ARR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RARR) AtomicSetBits(mask ARR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RARR) AtomicClearBits(mask ARR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMARR struct{ mmio.UM32 }

func (rm RMARR) Load() ARR   { return ARR(rm.UM32.Load()) }
func (rm RMARR) Store(b ARR) { rm.UM32.Store(uint32(b)) }

type CNT uint32

func (b CNT) Field(mask CNT) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CNT) J(v int) CNT {
	return CNT(bits.Make32(v, uint32(mask)))
}

type RCNT struct{ mmio.U32 }

func (r *RCNT) Bits(mask CNT) CNT     { return CNT(r.U32.Bits(uint32(mask))) }
func (r *RCNT) StoreBits(mask, b CNT) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCNT) SetBits(mask CNT)      { r.U32.SetBits(uint32(mask)) }
func (r *RCNT) ClearBits(mask CNT)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCNT) Load() CNT             { return CNT(r.U32.Load()) }
func (r *RCNT) Store(b CNT)           { r.U32.Store(uint32(b)) }

func (r *RCNT) AtomicStoreBits(mask, b CNT) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCNT) AtomicSetBits(mask CNT)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCNT) AtomicClearBits(mask CNT)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCNT struct{ mmio.UM32 }

func (rm RMCNT) Load() CNT   { return CNT(rm.UM32.Load()) }
func (rm RMCNT) Store(b CNT) { rm.UM32.Store(uint32(b)) }
