package cec

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type CEC_Periph struct {
	CR   CR
	CFGR CFGR
	TXDR TXDR
	RXDR RXDR
	ISR  ISR
	IER  IER
}

func (p *CEC_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var CEC = (*CEC_Periph)(unsafe.Pointer(uintptr(mmap.CEC_BASE)))

type CR_Bits uint32

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR_Bits) J(v int) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}

type CR struct{ mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.U32.Load()) }
func (r *CR) Store(b CR_Bits)           { r.U32.Store(uint32(b)) }

type CR_Mask struct{ mmio.UM32 }

func (rm CR_Mask) Load() CR_Bits   { return CR_Bits(rm.UM32.Load()) }
func (rm CR_Mask) Store(b CR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) CECEN() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(CECEN)}}
}

func (p *CEC_Periph) TXSOM() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(TXSOM)}}
}

func (p *CEC_Periph) TXEOM() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(TXEOM)}}
}

type CFGR_Bits uint32

func (b CFGR_Bits) Field(mask CFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR_Bits) J(v int) CFGR_Bits {
	return CFGR_Bits(bits.Make32(v, uint32(mask)))
}

type CFGR struct{ mmio.U32 }

func (r *CFGR) Bits(mask CFGR_Bits) CFGR_Bits { return CFGR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CFGR) StoreBits(mask, b CFGR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CFGR) SetBits(mask CFGR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *CFGR) ClearBits(mask CFGR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *CFGR) Load() CFGR_Bits               { return CFGR_Bits(r.U32.Load()) }
func (r *CFGR) Store(b CFGR_Bits)             { r.U32.Store(uint32(b)) }

type CFGR_Mask struct{ mmio.UM32 }

func (rm CFGR_Mask) Load() CFGR_Bits   { return CFGR_Bits(rm.UM32.Load()) }
func (rm CFGR_Mask) Store(b CFGR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) SFT() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(SFT)}}
}

func (p *CEC_Periph) RXTOL() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(RXTOL)}}
}

func (p *CEC_Periph) BRESTP() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(BRESTP)}}
}

func (p *CEC_Periph) BREGEN() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(BREGEN)}}
}

func (p *CEC_Periph) LBPEGEN() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(LBPEGEN)}}
}

func (p *CEC_Periph) BRDNOGEN() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(BRDNOGEN)}}
}

func (p *CEC_Periph) SFTOPT() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(SFTOPT)}}
}

func (p *CEC_Periph) OAR() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(OAR)}}
}

func (p *CEC_Periph) LSTN() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(LSTN)}}
}

type TXDR_Bits uint32

func (b TXDR_Bits) Field(mask TXDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TXDR_Bits) J(v int) TXDR_Bits {
	return TXDR_Bits(bits.Make32(v, uint32(mask)))
}

type TXDR struct{ mmio.U32 }

func (r *TXDR) Bits(mask TXDR_Bits) TXDR_Bits { return TXDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *TXDR) StoreBits(mask, b TXDR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *TXDR) SetBits(mask TXDR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *TXDR) ClearBits(mask TXDR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *TXDR) Load() TXDR_Bits               { return TXDR_Bits(r.U32.Load()) }
func (r *TXDR) Store(b TXDR_Bits)             { r.U32.Store(uint32(b)) }

type TXDR_Mask struct{ mmio.UM32 }

func (rm TXDR_Mask) Load() TXDR_Bits   { return TXDR_Bits(rm.UM32.Load()) }
func (rm TXDR_Mask) Store(b TXDR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) TXD() TXDR_Mask {
	return TXDR_Mask{mmio.UM32{&p.TXDR.U32, uint32(TXD)}}
}

type RXDR_Bits uint32

func (b RXDR_Bits) Field(mask RXDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RXDR_Bits) J(v int) RXDR_Bits {
	return RXDR_Bits(bits.Make32(v, uint32(mask)))
}

type RXDR struct{ mmio.U32 }

func (r *RXDR) Bits(mask RXDR_Bits) RXDR_Bits { return RXDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *RXDR) StoreBits(mask, b RXDR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RXDR) SetBits(mask RXDR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *RXDR) ClearBits(mask RXDR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *RXDR) Load() RXDR_Bits               { return RXDR_Bits(r.U32.Load()) }
func (r *RXDR) Store(b RXDR_Bits)             { r.U32.Store(uint32(b)) }

type RXDR_Mask struct{ mmio.UM32 }

func (rm RXDR_Mask) Load() RXDR_Bits   { return RXDR_Bits(rm.UM32.Load()) }
func (rm RXDR_Mask) Store(b RXDR_Bits) { rm.UM32.Store(uint32(b)) }

type ISR_Bits uint32

func (b ISR_Bits) Field(mask ISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISR_Bits) J(v int) ISR_Bits {
	return ISR_Bits(bits.Make32(v, uint32(mask)))
}

type ISR struct{ mmio.U32 }

func (r *ISR) Bits(mask ISR_Bits) ISR_Bits { return ISR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ISR) StoreBits(mask, b ISR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ISR) SetBits(mask ISR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *ISR) ClearBits(mask ISR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *ISR) Load() ISR_Bits              { return ISR_Bits(r.U32.Load()) }
func (r *ISR) Store(b ISR_Bits)            { r.U32.Store(uint32(b)) }

type ISR_Mask struct{ mmio.UM32 }

func (rm ISR_Mask) Load() ISR_Bits   { return ISR_Bits(rm.UM32.Load()) }
func (rm ISR_Mask) Store(b ISR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) RXBR() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXBR)}}
}

func (p *CEC_Periph) RXEND() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXEND)}}
}

func (p *CEC_Periph) RXOVR() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXOVR)}}
}

func (p *CEC_Periph) BRE() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(BRE)}}
}

func (p *CEC_Periph) SBPE() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(SBPE)}}
}

func (p *CEC_Periph) LBPE() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(LBPE)}}
}

func (p *CEC_Periph) RXACKE() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXACKE)}}
}

func (p *CEC_Periph) ARBLST() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(ARBLST)}}
}

func (p *CEC_Periph) TXBR() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXBR)}}
}

func (p *CEC_Periph) TXEND() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXEND)}}
}

func (p *CEC_Periph) TXUDR() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXUDR)}}
}

func (p *CEC_Periph) TXERR() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXERR)}}
}

func (p *CEC_Periph) TXACKE() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXACKE)}}
}

type IER_Bits uint32

func (b IER_Bits) Field(mask IER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IER_Bits) J(v int) IER_Bits {
	return IER_Bits(bits.Make32(v, uint32(mask)))
}

type IER struct{ mmio.U32 }

func (r *IER) Bits(mask IER_Bits) IER_Bits { return IER_Bits(r.U32.Bits(uint32(mask))) }
func (r *IER) StoreBits(mask, b IER_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *IER) SetBits(mask IER_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *IER) ClearBits(mask IER_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *IER) Load() IER_Bits              { return IER_Bits(r.U32.Load()) }
func (r *IER) Store(b IER_Bits)            { r.U32.Store(uint32(b)) }

type IER_Mask struct{ mmio.UM32 }

func (rm IER_Mask) Load() IER_Bits   { return IER_Bits(rm.UM32.Load()) }
func (rm IER_Mask) Store(b IER_Bits) { rm.UM32.Store(uint32(b)) }

func (p *CEC_Periph) RXBRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RXBRIE)}}
}

func (p *CEC_Periph) RXENDIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RXENDIE)}}
}

func (p *CEC_Periph) RXOVRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RXOVRIE)}}
}

func (p *CEC_Periph) BREIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(BREIE)}}
}

func (p *CEC_Periph) SBPEIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(SBPEIE)}}
}

func (p *CEC_Periph) LBPEIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(LBPEIE)}}
}

func (p *CEC_Periph) RXACKEIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RXACKEIE)}}
}

func (p *CEC_Periph) ARBLSTIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(ARBLSTIE)}}
}

func (p *CEC_Periph) TXBRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TXBRIE)}}
}

func (p *CEC_Periph) TXENDIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TXENDIE)}}
}

func (p *CEC_Periph) TXUDRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TXUDRIE)}}
}

func (p *CEC_Periph) TXERRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TXERRIE)}}
}

func (p *CEC_Periph) TXACKEIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TXACKEIE)}}
}
