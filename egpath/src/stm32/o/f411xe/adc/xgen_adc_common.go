package adc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"mmio"
	"unsafe"

	"stm32/o/f411xe/mmap"
)

type ADC_Common_Periph struct {
	CSR CSR
	CCR CCR
	CDR CDR
}

func (p *ADC_Common_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var ADC = (*ADC_Common_Periph)(unsafe.Pointer(uintptr(mmap.ADC_BASE)))

type CSR_Bits uint32

type CSR struct{ mmio.U32 }

func (r *CSR) Bits(mask CSR_Bits) CSR_Bits { return CSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CSR) StoreBits(mask, b CSR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CSR) SetBits(mask CSR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *CSR) ClearBits(mask CSR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *CSR) Load() CSR_Bits              { return CSR_Bits(r.U32.Load()) }
func (r *CSR) Store(b CSR_Bits)            { r.U32.Store(uint32(b)) }

type CSR_Mask struct{ mmio.UM32 }

func (rm CSR_Mask) Load() CSR_Bits   { return CSR_Bits(rm.UM32.Load()) }
func (rm CSR_Mask) Store(b CSR_Bits) { rm.UM32.Store(uint32(b)) }

type CCR_Bits uint32

type CCR struct{ mmio.U32 }

func (r *CCR) Bits(mask CCR_Bits) CCR_Bits { return CCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CCR) StoreBits(mask, b CCR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CCR) SetBits(mask CCR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *CCR) ClearBits(mask CCR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *CCR) Load() CCR_Bits              { return CCR_Bits(r.U32.Load()) }
func (r *CCR) Store(b CCR_Bits)            { r.U32.Store(uint32(b)) }

type CCR_Mask struct{ mmio.UM32 }

func (rm CCR_Mask) Load() CCR_Bits   { return CCR_Bits(rm.UM32.Load()) }
func (rm CCR_Mask) Store(b CCR_Bits) { rm.UM32.Store(uint32(b)) }

type CDR_Bits uint32

type CDR struct{ mmio.U32 }

func (r *CDR) Bits(mask CDR_Bits) CDR_Bits { return CDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CDR) StoreBits(mask, b CDR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CDR) SetBits(mask CDR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *CDR) ClearBits(mask CDR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *CDR) Load() CDR_Bits              { return CDR_Bits(r.U32.Load()) }
func (r *CDR) Store(b CDR_Bits)            { r.U32.Store(uint32(b)) }

type CDR_Mask struct{ mmio.UM32 }

func (rm CDR_Mask) Load() CDR_Bits   { return CDR_Bits(rm.UM32.Load()) }
func (rm CDR_Mask) Store(b CDR_Bits) { rm.UM32.Store(uint32(b)) }
