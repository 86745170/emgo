// +build f10x_md

package bkp

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f10x_md/mmap"
)

type BKP_Periph struct {
	_     uint32
	DR1   RDR1
	_     uint16
	DR2   RDR2
	_     uint16
	DR3   RDR3
	_     uint16
	DR4   RDR4
	_     uint16
	DR5   RDR5
	_     uint16
	DR6   RDR6
	_     uint16
	DR7   RDR7
	_     uint16
	DR8   RDR8
	_     uint16
	DR9   RDR9
	_     uint16
	DR10  RDR10
	_     uint16
	RTCCR RRTCCR
	_     uint16
	CR    RCR
	_     uint16
	CSR   RCSR
	_     uint16
	_     [2]uint32
	DR11  RDR11
	_     uint16
	DR12  RDR12
	_     uint16
	DR13  RDR13
	_     uint16
	DR14  RDR14
	_     uint16
	DR15  RDR15
	_     uint16
	DR16  RDR16
	_     uint16
	DR17  RDR17
	_     uint16
	DR18  RDR18
	_     uint16
	DR19  RDR19
	_     uint16
	DR20  RDR20
	_     uint16
	DR21  RDR21
	_     uint16
	DR22  RDR22
	_     uint16
	DR23  RDR23
	_     uint16
	DR24  RDR24
	_     uint16
	DR25  RDR25
	_     uint16
	DR26  RDR26
	_     uint16
	DR27  RDR27
	_     uint16
	DR28  RDR28
	_     uint16
	DR29  RDR29
	_     uint16
	DR30  RDR30
	_     uint16
	DR31  RDR31
	_     uint16
	DR32  RDR32
	_     uint16
	DR33  RDR33
	_     uint16
	DR34  RDR34
	_     uint16
	DR35  RDR35
	_     uint16
	DR36  RDR36
	_     uint16
	DR37  RDR37
	_     uint16
	DR38  RDR38
	_     uint16
	DR39  RDR39
	_     uint16
	DR40  RDR40
	_     uint16
	DR41  RDR41
	_     uint16
	DR42  RDR42
}

func (p *BKP_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var BKP = (*BKP_Periph)(unsafe.Pointer(uintptr(mmap.BKP_BASE)))

type DR1 uint16

func (b DR1) Field(mask DR1) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR1) J(v int) DR1 {
	return DR1(bits.MakeField32(v, uint32(mask)))
}

type RDR1 struct{ mmio.U16 }

func (r *RDR1) Bits(mask DR1) DR1     { return DR1(r.U16.Bits(uint16(mask))) }
func (r *RDR1) StoreBits(mask, b DR1) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR1) SetBits(mask DR1)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR1) ClearBits(mask DR1)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR1) Load() DR1             { return DR1(r.U16.Load()) }
func (r *RDR1) Store(b DR1)           { r.U16.Store(uint16(b)) }

type RMDR1 struct{ mmio.UM16 }

func (rm RMDR1) Load() DR1   { return DR1(rm.UM16.Load()) }
func (rm RMDR1) Store(b DR1) { rm.UM16.Store(uint16(b)) }

type DR2 uint16

func (b DR2) Field(mask DR2) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR2) J(v int) DR2 {
	return DR2(bits.MakeField32(v, uint32(mask)))
}

type RDR2 struct{ mmio.U16 }

func (r *RDR2) Bits(mask DR2) DR2     { return DR2(r.U16.Bits(uint16(mask))) }
func (r *RDR2) StoreBits(mask, b DR2) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR2) SetBits(mask DR2)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR2) ClearBits(mask DR2)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR2) Load() DR2             { return DR2(r.U16.Load()) }
func (r *RDR2) Store(b DR2)           { r.U16.Store(uint16(b)) }

type RMDR2 struct{ mmio.UM16 }

func (rm RMDR2) Load() DR2   { return DR2(rm.UM16.Load()) }
func (rm RMDR2) Store(b DR2) { rm.UM16.Store(uint16(b)) }

type DR3 uint16

func (b DR3) Field(mask DR3) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR3) J(v int) DR3 {
	return DR3(bits.MakeField32(v, uint32(mask)))
}

type RDR3 struct{ mmio.U16 }

func (r *RDR3) Bits(mask DR3) DR3     { return DR3(r.U16.Bits(uint16(mask))) }
func (r *RDR3) StoreBits(mask, b DR3) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR3) SetBits(mask DR3)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR3) ClearBits(mask DR3)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR3) Load() DR3             { return DR3(r.U16.Load()) }
func (r *RDR3) Store(b DR3)           { r.U16.Store(uint16(b)) }

type RMDR3 struct{ mmio.UM16 }

func (rm RMDR3) Load() DR3   { return DR3(rm.UM16.Load()) }
func (rm RMDR3) Store(b DR3) { rm.UM16.Store(uint16(b)) }

type DR4 uint16

func (b DR4) Field(mask DR4) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR4) J(v int) DR4 {
	return DR4(bits.MakeField32(v, uint32(mask)))
}

type RDR4 struct{ mmio.U16 }

func (r *RDR4) Bits(mask DR4) DR4     { return DR4(r.U16.Bits(uint16(mask))) }
func (r *RDR4) StoreBits(mask, b DR4) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR4) SetBits(mask DR4)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR4) ClearBits(mask DR4)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR4) Load() DR4             { return DR4(r.U16.Load()) }
func (r *RDR4) Store(b DR4)           { r.U16.Store(uint16(b)) }

type RMDR4 struct{ mmio.UM16 }

func (rm RMDR4) Load() DR4   { return DR4(rm.UM16.Load()) }
func (rm RMDR4) Store(b DR4) { rm.UM16.Store(uint16(b)) }

type DR5 uint16

func (b DR5) Field(mask DR5) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR5) J(v int) DR5 {
	return DR5(bits.MakeField32(v, uint32(mask)))
}

type RDR5 struct{ mmio.U16 }

func (r *RDR5) Bits(mask DR5) DR5     { return DR5(r.U16.Bits(uint16(mask))) }
func (r *RDR5) StoreBits(mask, b DR5) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR5) SetBits(mask DR5)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR5) ClearBits(mask DR5)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR5) Load() DR5             { return DR5(r.U16.Load()) }
func (r *RDR5) Store(b DR5)           { r.U16.Store(uint16(b)) }

type RMDR5 struct{ mmio.UM16 }

func (rm RMDR5) Load() DR5   { return DR5(rm.UM16.Load()) }
func (rm RMDR5) Store(b DR5) { rm.UM16.Store(uint16(b)) }

type DR6 uint16

func (b DR6) Field(mask DR6) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR6) J(v int) DR6 {
	return DR6(bits.MakeField32(v, uint32(mask)))
}

type RDR6 struct{ mmio.U16 }

func (r *RDR6) Bits(mask DR6) DR6     { return DR6(r.U16.Bits(uint16(mask))) }
func (r *RDR6) StoreBits(mask, b DR6) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR6) SetBits(mask DR6)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR6) ClearBits(mask DR6)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR6) Load() DR6             { return DR6(r.U16.Load()) }
func (r *RDR6) Store(b DR6)           { r.U16.Store(uint16(b)) }

type RMDR6 struct{ mmio.UM16 }

func (rm RMDR6) Load() DR6   { return DR6(rm.UM16.Load()) }
func (rm RMDR6) Store(b DR6) { rm.UM16.Store(uint16(b)) }

type DR7 uint16

func (b DR7) Field(mask DR7) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR7) J(v int) DR7 {
	return DR7(bits.MakeField32(v, uint32(mask)))
}

type RDR7 struct{ mmio.U16 }

func (r *RDR7) Bits(mask DR7) DR7     { return DR7(r.U16.Bits(uint16(mask))) }
func (r *RDR7) StoreBits(mask, b DR7) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR7) SetBits(mask DR7)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR7) ClearBits(mask DR7)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR7) Load() DR7             { return DR7(r.U16.Load()) }
func (r *RDR7) Store(b DR7)           { r.U16.Store(uint16(b)) }

type RMDR7 struct{ mmio.UM16 }

func (rm RMDR7) Load() DR7   { return DR7(rm.UM16.Load()) }
func (rm RMDR7) Store(b DR7) { rm.UM16.Store(uint16(b)) }

type DR8 uint16

func (b DR8) Field(mask DR8) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR8) J(v int) DR8 {
	return DR8(bits.MakeField32(v, uint32(mask)))
}

type RDR8 struct{ mmio.U16 }

func (r *RDR8) Bits(mask DR8) DR8     { return DR8(r.U16.Bits(uint16(mask))) }
func (r *RDR8) StoreBits(mask, b DR8) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR8) SetBits(mask DR8)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR8) ClearBits(mask DR8)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR8) Load() DR8             { return DR8(r.U16.Load()) }
func (r *RDR8) Store(b DR8)           { r.U16.Store(uint16(b)) }

type RMDR8 struct{ mmio.UM16 }

func (rm RMDR8) Load() DR8   { return DR8(rm.UM16.Load()) }
func (rm RMDR8) Store(b DR8) { rm.UM16.Store(uint16(b)) }

type DR9 uint16

func (b DR9) Field(mask DR9) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR9) J(v int) DR9 {
	return DR9(bits.MakeField32(v, uint32(mask)))
}

type RDR9 struct{ mmio.U16 }

func (r *RDR9) Bits(mask DR9) DR9     { return DR9(r.U16.Bits(uint16(mask))) }
func (r *RDR9) StoreBits(mask, b DR9) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR9) SetBits(mask DR9)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR9) ClearBits(mask DR9)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR9) Load() DR9             { return DR9(r.U16.Load()) }
func (r *RDR9) Store(b DR9)           { r.U16.Store(uint16(b)) }

type RMDR9 struct{ mmio.UM16 }

func (rm RMDR9) Load() DR9   { return DR9(rm.UM16.Load()) }
func (rm RMDR9) Store(b DR9) { rm.UM16.Store(uint16(b)) }

type DR10 uint16

func (b DR10) Field(mask DR10) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR10) J(v int) DR10 {
	return DR10(bits.MakeField32(v, uint32(mask)))
}

type RDR10 struct{ mmio.U16 }

func (r *RDR10) Bits(mask DR10) DR10    { return DR10(r.U16.Bits(uint16(mask))) }
func (r *RDR10) StoreBits(mask, b DR10) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR10) SetBits(mask DR10)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR10) ClearBits(mask DR10)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR10) Load() DR10             { return DR10(r.U16.Load()) }
func (r *RDR10) Store(b DR10)           { r.U16.Store(uint16(b)) }

type RMDR10 struct{ mmio.UM16 }

func (rm RMDR10) Load() DR10   { return DR10(rm.UM16.Load()) }
func (rm RMDR10) Store(b DR10) { rm.UM16.Store(uint16(b)) }

type RTCCR uint16

func (b RTCCR) Field(mask RTCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RTCCR) J(v int) RTCCR {
	return RTCCR(bits.MakeField32(v, uint32(mask)))
}

type RRTCCR struct{ mmio.U16 }

func (r *RRTCCR) Bits(mask RTCCR) RTCCR   { return RTCCR(r.U16.Bits(uint16(mask))) }
func (r *RRTCCR) StoreBits(mask, b RTCCR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RRTCCR) SetBits(mask RTCCR)      { r.U16.SetBits(uint16(mask)) }
func (r *RRTCCR) ClearBits(mask RTCCR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RRTCCR) Load() RTCCR             { return RTCCR(r.U16.Load()) }
func (r *RRTCCR) Store(b RTCCR)           { r.U16.Store(uint16(b)) }

type RMRTCCR struct{ mmio.UM16 }

func (rm RMRTCCR) Load() RTCCR   { return RTCCR(rm.UM16.Load()) }
func (rm RMRTCCR) Store(b RTCCR) { rm.UM16.Store(uint16(b)) }

func (p *BKP_Periph) CAL() RMRTCCR {
	return RMRTCCR{mmio.UM16{&p.RTCCR.U16, uint16(CAL)}}
}

func (p *BKP_Periph) CCO() RMRTCCR {
	return RMRTCCR{mmio.UM16{&p.RTCCR.U16, uint16(CCO)}}
}

func (p *BKP_Periph) ASOE() RMRTCCR {
	return RMRTCCR{mmio.UM16{&p.RTCCR.U16, uint16(ASOE)}}
}

func (p *BKP_Periph) ASOS() RMRTCCR {
	return RMRTCCR{mmio.UM16{&p.RTCCR.U16, uint16(ASOS)}}
}

type CR uint16

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.MakeField32(v, uint32(mask)))
}

type RCR struct{ mmio.U16 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U16.Bits(uint16(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RCR) SetBits(mask CR)      { r.U16.SetBits(uint16(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RCR) Load() CR             { return CR(r.U16.Load()) }
func (r *RCR) Store(b CR)           { r.U16.Store(uint16(b)) }

type RMCR struct{ mmio.UM16 }

func (rm RMCR) Load() CR   { return CR(rm.UM16.Load()) }
func (rm RMCR) Store(b CR) { rm.UM16.Store(uint16(b)) }

func (p *BKP_Periph) TPE() RMCR {
	return RMCR{mmio.UM16{&p.CR.U16, uint16(TPE)}}
}

func (p *BKP_Periph) TPAL() RMCR {
	return RMCR{mmio.UM16{&p.CR.U16, uint16(TPAL)}}
}

type CSR uint16

func (b CSR) Field(mask CSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR) J(v int) CSR {
	return CSR(bits.MakeField32(v, uint32(mask)))
}

type RCSR struct{ mmio.U16 }

func (r *RCSR) Bits(mask CSR) CSR     { return CSR(r.U16.Bits(uint16(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U16.SetBits(uint16(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U16.ClearBits(uint16(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U16.Load()) }
func (r *RCSR) Store(b CSR)           { r.U16.Store(uint16(b)) }

type RMCSR struct{ mmio.UM16 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM16.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM16.Store(uint16(b)) }

func (p *BKP_Periph) CTE() RMCSR {
	return RMCSR{mmio.UM16{&p.CSR.U16, uint16(CTE)}}
}

func (p *BKP_Periph) CTI() RMCSR {
	return RMCSR{mmio.UM16{&p.CSR.U16, uint16(CTI)}}
}

func (p *BKP_Periph) TPIE() RMCSR {
	return RMCSR{mmio.UM16{&p.CSR.U16, uint16(TPIE)}}
}

func (p *BKP_Periph) TEF() RMCSR {
	return RMCSR{mmio.UM16{&p.CSR.U16, uint16(TEF)}}
}

func (p *BKP_Periph) TIF() RMCSR {
	return RMCSR{mmio.UM16{&p.CSR.U16, uint16(TIF)}}
}

type DR11 uint16

func (b DR11) Field(mask DR11) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR11) J(v int) DR11 {
	return DR11(bits.MakeField32(v, uint32(mask)))
}

type RDR11 struct{ mmio.U16 }

func (r *RDR11) Bits(mask DR11) DR11    { return DR11(r.U16.Bits(uint16(mask))) }
func (r *RDR11) StoreBits(mask, b DR11) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR11) SetBits(mask DR11)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR11) ClearBits(mask DR11)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR11) Load() DR11             { return DR11(r.U16.Load()) }
func (r *RDR11) Store(b DR11)           { r.U16.Store(uint16(b)) }

type RMDR11 struct{ mmio.UM16 }

func (rm RMDR11) Load() DR11   { return DR11(rm.UM16.Load()) }
func (rm RMDR11) Store(b DR11) { rm.UM16.Store(uint16(b)) }

type DR12 uint16

func (b DR12) Field(mask DR12) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR12) J(v int) DR12 {
	return DR12(bits.MakeField32(v, uint32(mask)))
}

type RDR12 struct{ mmio.U16 }

func (r *RDR12) Bits(mask DR12) DR12    { return DR12(r.U16.Bits(uint16(mask))) }
func (r *RDR12) StoreBits(mask, b DR12) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR12) SetBits(mask DR12)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR12) ClearBits(mask DR12)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR12) Load() DR12             { return DR12(r.U16.Load()) }
func (r *RDR12) Store(b DR12)           { r.U16.Store(uint16(b)) }

type RMDR12 struct{ mmio.UM16 }

func (rm RMDR12) Load() DR12   { return DR12(rm.UM16.Load()) }
func (rm RMDR12) Store(b DR12) { rm.UM16.Store(uint16(b)) }

type DR13 uint16

func (b DR13) Field(mask DR13) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR13) J(v int) DR13 {
	return DR13(bits.MakeField32(v, uint32(mask)))
}

type RDR13 struct{ mmio.U16 }

func (r *RDR13) Bits(mask DR13) DR13    { return DR13(r.U16.Bits(uint16(mask))) }
func (r *RDR13) StoreBits(mask, b DR13) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR13) SetBits(mask DR13)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR13) ClearBits(mask DR13)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR13) Load() DR13             { return DR13(r.U16.Load()) }
func (r *RDR13) Store(b DR13)           { r.U16.Store(uint16(b)) }

type RMDR13 struct{ mmio.UM16 }

func (rm RMDR13) Load() DR13   { return DR13(rm.UM16.Load()) }
func (rm RMDR13) Store(b DR13) { rm.UM16.Store(uint16(b)) }

type DR14 uint16

func (b DR14) Field(mask DR14) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR14) J(v int) DR14 {
	return DR14(bits.MakeField32(v, uint32(mask)))
}

type RDR14 struct{ mmio.U16 }

func (r *RDR14) Bits(mask DR14) DR14    { return DR14(r.U16.Bits(uint16(mask))) }
func (r *RDR14) StoreBits(mask, b DR14) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR14) SetBits(mask DR14)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR14) ClearBits(mask DR14)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR14) Load() DR14             { return DR14(r.U16.Load()) }
func (r *RDR14) Store(b DR14)           { r.U16.Store(uint16(b)) }

type RMDR14 struct{ mmio.UM16 }

func (rm RMDR14) Load() DR14   { return DR14(rm.UM16.Load()) }
func (rm RMDR14) Store(b DR14) { rm.UM16.Store(uint16(b)) }

type DR15 uint16

func (b DR15) Field(mask DR15) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR15) J(v int) DR15 {
	return DR15(bits.MakeField32(v, uint32(mask)))
}

type RDR15 struct{ mmio.U16 }

func (r *RDR15) Bits(mask DR15) DR15    { return DR15(r.U16.Bits(uint16(mask))) }
func (r *RDR15) StoreBits(mask, b DR15) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR15) SetBits(mask DR15)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR15) ClearBits(mask DR15)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR15) Load() DR15             { return DR15(r.U16.Load()) }
func (r *RDR15) Store(b DR15)           { r.U16.Store(uint16(b)) }

type RMDR15 struct{ mmio.UM16 }

func (rm RMDR15) Load() DR15   { return DR15(rm.UM16.Load()) }
func (rm RMDR15) Store(b DR15) { rm.UM16.Store(uint16(b)) }

type DR16 uint16

func (b DR16) Field(mask DR16) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR16) J(v int) DR16 {
	return DR16(bits.MakeField32(v, uint32(mask)))
}

type RDR16 struct{ mmio.U16 }

func (r *RDR16) Bits(mask DR16) DR16    { return DR16(r.U16.Bits(uint16(mask))) }
func (r *RDR16) StoreBits(mask, b DR16) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR16) SetBits(mask DR16)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR16) ClearBits(mask DR16)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR16) Load() DR16             { return DR16(r.U16.Load()) }
func (r *RDR16) Store(b DR16)           { r.U16.Store(uint16(b)) }

type RMDR16 struct{ mmio.UM16 }

func (rm RMDR16) Load() DR16   { return DR16(rm.UM16.Load()) }
func (rm RMDR16) Store(b DR16) { rm.UM16.Store(uint16(b)) }

type DR17 uint16

func (b DR17) Field(mask DR17) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR17) J(v int) DR17 {
	return DR17(bits.MakeField32(v, uint32(mask)))
}

type RDR17 struct{ mmio.U16 }

func (r *RDR17) Bits(mask DR17) DR17    { return DR17(r.U16.Bits(uint16(mask))) }
func (r *RDR17) StoreBits(mask, b DR17) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR17) SetBits(mask DR17)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR17) ClearBits(mask DR17)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR17) Load() DR17             { return DR17(r.U16.Load()) }
func (r *RDR17) Store(b DR17)           { r.U16.Store(uint16(b)) }

type RMDR17 struct{ mmio.UM16 }

func (rm RMDR17) Load() DR17   { return DR17(rm.UM16.Load()) }
func (rm RMDR17) Store(b DR17) { rm.UM16.Store(uint16(b)) }

type DR18 uint16

func (b DR18) Field(mask DR18) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR18) J(v int) DR18 {
	return DR18(bits.MakeField32(v, uint32(mask)))
}

type RDR18 struct{ mmio.U16 }

func (r *RDR18) Bits(mask DR18) DR18    { return DR18(r.U16.Bits(uint16(mask))) }
func (r *RDR18) StoreBits(mask, b DR18) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR18) SetBits(mask DR18)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR18) ClearBits(mask DR18)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR18) Load() DR18             { return DR18(r.U16.Load()) }
func (r *RDR18) Store(b DR18)           { r.U16.Store(uint16(b)) }

type RMDR18 struct{ mmio.UM16 }

func (rm RMDR18) Load() DR18   { return DR18(rm.UM16.Load()) }
func (rm RMDR18) Store(b DR18) { rm.UM16.Store(uint16(b)) }

type DR19 uint16

func (b DR19) Field(mask DR19) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR19) J(v int) DR19 {
	return DR19(bits.MakeField32(v, uint32(mask)))
}

type RDR19 struct{ mmio.U16 }

func (r *RDR19) Bits(mask DR19) DR19    { return DR19(r.U16.Bits(uint16(mask))) }
func (r *RDR19) StoreBits(mask, b DR19) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR19) SetBits(mask DR19)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR19) ClearBits(mask DR19)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR19) Load() DR19             { return DR19(r.U16.Load()) }
func (r *RDR19) Store(b DR19)           { r.U16.Store(uint16(b)) }

type RMDR19 struct{ mmio.UM16 }

func (rm RMDR19) Load() DR19   { return DR19(rm.UM16.Load()) }
func (rm RMDR19) Store(b DR19) { rm.UM16.Store(uint16(b)) }

type DR20 uint16

func (b DR20) Field(mask DR20) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR20) J(v int) DR20 {
	return DR20(bits.MakeField32(v, uint32(mask)))
}

type RDR20 struct{ mmio.U16 }

func (r *RDR20) Bits(mask DR20) DR20    { return DR20(r.U16.Bits(uint16(mask))) }
func (r *RDR20) StoreBits(mask, b DR20) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR20) SetBits(mask DR20)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR20) ClearBits(mask DR20)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR20) Load() DR20             { return DR20(r.U16.Load()) }
func (r *RDR20) Store(b DR20)           { r.U16.Store(uint16(b)) }

type RMDR20 struct{ mmio.UM16 }

func (rm RMDR20) Load() DR20   { return DR20(rm.UM16.Load()) }
func (rm RMDR20) Store(b DR20) { rm.UM16.Store(uint16(b)) }

type DR21 uint16

func (b DR21) Field(mask DR21) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR21) J(v int) DR21 {
	return DR21(bits.MakeField32(v, uint32(mask)))
}

type RDR21 struct{ mmio.U16 }

func (r *RDR21) Bits(mask DR21) DR21    { return DR21(r.U16.Bits(uint16(mask))) }
func (r *RDR21) StoreBits(mask, b DR21) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR21) SetBits(mask DR21)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR21) ClearBits(mask DR21)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR21) Load() DR21             { return DR21(r.U16.Load()) }
func (r *RDR21) Store(b DR21)           { r.U16.Store(uint16(b)) }

type RMDR21 struct{ mmio.UM16 }

func (rm RMDR21) Load() DR21   { return DR21(rm.UM16.Load()) }
func (rm RMDR21) Store(b DR21) { rm.UM16.Store(uint16(b)) }

type DR22 uint16

func (b DR22) Field(mask DR22) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR22) J(v int) DR22 {
	return DR22(bits.MakeField32(v, uint32(mask)))
}

type RDR22 struct{ mmio.U16 }

func (r *RDR22) Bits(mask DR22) DR22    { return DR22(r.U16.Bits(uint16(mask))) }
func (r *RDR22) StoreBits(mask, b DR22) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR22) SetBits(mask DR22)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR22) ClearBits(mask DR22)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR22) Load() DR22             { return DR22(r.U16.Load()) }
func (r *RDR22) Store(b DR22)           { r.U16.Store(uint16(b)) }

type RMDR22 struct{ mmio.UM16 }

func (rm RMDR22) Load() DR22   { return DR22(rm.UM16.Load()) }
func (rm RMDR22) Store(b DR22) { rm.UM16.Store(uint16(b)) }

type DR23 uint16

func (b DR23) Field(mask DR23) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR23) J(v int) DR23 {
	return DR23(bits.MakeField32(v, uint32(mask)))
}

type RDR23 struct{ mmio.U16 }

func (r *RDR23) Bits(mask DR23) DR23    { return DR23(r.U16.Bits(uint16(mask))) }
func (r *RDR23) StoreBits(mask, b DR23) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR23) SetBits(mask DR23)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR23) ClearBits(mask DR23)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR23) Load() DR23             { return DR23(r.U16.Load()) }
func (r *RDR23) Store(b DR23)           { r.U16.Store(uint16(b)) }

type RMDR23 struct{ mmio.UM16 }

func (rm RMDR23) Load() DR23   { return DR23(rm.UM16.Load()) }
func (rm RMDR23) Store(b DR23) { rm.UM16.Store(uint16(b)) }

type DR24 uint16

func (b DR24) Field(mask DR24) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR24) J(v int) DR24 {
	return DR24(bits.MakeField32(v, uint32(mask)))
}

type RDR24 struct{ mmio.U16 }

func (r *RDR24) Bits(mask DR24) DR24    { return DR24(r.U16.Bits(uint16(mask))) }
func (r *RDR24) StoreBits(mask, b DR24) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR24) SetBits(mask DR24)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR24) ClearBits(mask DR24)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR24) Load() DR24             { return DR24(r.U16.Load()) }
func (r *RDR24) Store(b DR24)           { r.U16.Store(uint16(b)) }

type RMDR24 struct{ mmio.UM16 }

func (rm RMDR24) Load() DR24   { return DR24(rm.UM16.Load()) }
func (rm RMDR24) Store(b DR24) { rm.UM16.Store(uint16(b)) }

type DR25 uint16

func (b DR25) Field(mask DR25) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR25) J(v int) DR25 {
	return DR25(bits.MakeField32(v, uint32(mask)))
}

type RDR25 struct{ mmio.U16 }

func (r *RDR25) Bits(mask DR25) DR25    { return DR25(r.U16.Bits(uint16(mask))) }
func (r *RDR25) StoreBits(mask, b DR25) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR25) SetBits(mask DR25)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR25) ClearBits(mask DR25)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR25) Load() DR25             { return DR25(r.U16.Load()) }
func (r *RDR25) Store(b DR25)           { r.U16.Store(uint16(b)) }

type RMDR25 struct{ mmio.UM16 }

func (rm RMDR25) Load() DR25   { return DR25(rm.UM16.Load()) }
func (rm RMDR25) Store(b DR25) { rm.UM16.Store(uint16(b)) }

type DR26 uint16

func (b DR26) Field(mask DR26) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR26) J(v int) DR26 {
	return DR26(bits.MakeField32(v, uint32(mask)))
}

type RDR26 struct{ mmio.U16 }

func (r *RDR26) Bits(mask DR26) DR26    { return DR26(r.U16.Bits(uint16(mask))) }
func (r *RDR26) StoreBits(mask, b DR26) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR26) SetBits(mask DR26)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR26) ClearBits(mask DR26)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR26) Load() DR26             { return DR26(r.U16.Load()) }
func (r *RDR26) Store(b DR26)           { r.U16.Store(uint16(b)) }

type RMDR26 struct{ mmio.UM16 }

func (rm RMDR26) Load() DR26   { return DR26(rm.UM16.Load()) }
func (rm RMDR26) Store(b DR26) { rm.UM16.Store(uint16(b)) }

type DR27 uint16

func (b DR27) Field(mask DR27) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR27) J(v int) DR27 {
	return DR27(bits.MakeField32(v, uint32(mask)))
}

type RDR27 struct{ mmio.U16 }

func (r *RDR27) Bits(mask DR27) DR27    { return DR27(r.U16.Bits(uint16(mask))) }
func (r *RDR27) StoreBits(mask, b DR27) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR27) SetBits(mask DR27)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR27) ClearBits(mask DR27)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR27) Load() DR27             { return DR27(r.U16.Load()) }
func (r *RDR27) Store(b DR27)           { r.U16.Store(uint16(b)) }

type RMDR27 struct{ mmio.UM16 }

func (rm RMDR27) Load() DR27   { return DR27(rm.UM16.Load()) }
func (rm RMDR27) Store(b DR27) { rm.UM16.Store(uint16(b)) }

type DR28 uint16

func (b DR28) Field(mask DR28) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR28) J(v int) DR28 {
	return DR28(bits.MakeField32(v, uint32(mask)))
}

type RDR28 struct{ mmio.U16 }

func (r *RDR28) Bits(mask DR28) DR28    { return DR28(r.U16.Bits(uint16(mask))) }
func (r *RDR28) StoreBits(mask, b DR28) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR28) SetBits(mask DR28)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR28) ClearBits(mask DR28)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR28) Load() DR28             { return DR28(r.U16.Load()) }
func (r *RDR28) Store(b DR28)           { r.U16.Store(uint16(b)) }

type RMDR28 struct{ mmio.UM16 }

func (rm RMDR28) Load() DR28   { return DR28(rm.UM16.Load()) }
func (rm RMDR28) Store(b DR28) { rm.UM16.Store(uint16(b)) }

type DR29 uint16

func (b DR29) Field(mask DR29) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR29) J(v int) DR29 {
	return DR29(bits.MakeField32(v, uint32(mask)))
}

type RDR29 struct{ mmio.U16 }

func (r *RDR29) Bits(mask DR29) DR29    { return DR29(r.U16.Bits(uint16(mask))) }
func (r *RDR29) StoreBits(mask, b DR29) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR29) SetBits(mask DR29)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR29) ClearBits(mask DR29)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR29) Load() DR29             { return DR29(r.U16.Load()) }
func (r *RDR29) Store(b DR29)           { r.U16.Store(uint16(b)) }

type RMDR29 struct{ mmio.UM16 }

func (rm RMDR29) Load() DR29   { return DR29(rm.UM16.Load()) }
func (rm RMDR29) Store(b DR29) { rm.UM16.Store(uint16(b)) }

type DR30 uint16

func (b DR30) Field(mask DR30) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR30) J(v int) DR30 {
	return DR30(bits.MakeField32(v, uint32(mask)))
}

type RDR30 struct{ mmio.U16 }

func (r *RDR30) Bits(mask DR30) DR30    { return DR30(r.U16.Bits(uint16(mask))) }
func (r *RDR30) StoreBits(mask, b DR30) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR30) SetBits(mask DR30)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR30) ClearBits(mask DR30)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR30) Load() DR30             { return DR30(r.U16.Load()) }
func (r *RDR30) Store(b DR30)           { r.U16.Store(uint16(b)) }

type RMDR30 struct{ mmio.UM16 }

func (rm RMDR30) Load() DR30   { return DR30(rm.UM16.Load()) }
func (rm RMDR30) Store(b DR30) { rm.UM16.Store(uint16(b)) }

type DR31 uint16

func (b DR31) Field(mask DR31) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR31) J(v int) DR31 {
	return DR31(bits.MakeField32(v, uint32(mask)))
}

type RDR31 struct{ mmio.U16 }

func (r *RDR31) Bits(mask DR31) DR31    { return DR31(r.U16.Bits(uint16(mask))) }
func (r *RDR31) StoreBits(mask, b DR31) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR31) SetBits(mask DR31)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR31) ClearBits(mask DR31)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR31) Load() DR31             { return DR31(r.U16.Load()) }
func (r *RDR31) Store(b DR31)           { r.U16.Store(uint16(b)) }

type RMDR31 struct{ mmio.UM16 }

func (rm RMDR31) Load() DR31   { return DR31(rm.UM16.Load()) }
func (rm RMDR31) Store(b DR31) { rm.UM16.Store(uint16(b)) }

type DR32 uint16

func (b DR32) Field(mask DR32) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR32) J(v int) DR32 {
	return DR32(bits.MakeField32(v, uint32(mask)))
}

type RDR32 struct{ mmio.U16 }

func (r *RDR32) Bits(mask DR32) DR32    { return DR32(r.U16.Bits(uint16(mask))) }
func (r *RDR32) StoreBits(mask, b DR32) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR32) SetBits(mask DR32)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR32) ClearBits(mask DR32)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR32) Load() DR32             { return DR32(r.U16.Load()) }
func (r *RDR32) Store(b DR32)           { r.U16.Store(uint16(b)) }

type RMDR32 struct{ mmio.UM16 }

func (rm RMDR32) Load() DR32   { return DR32(rm.UM16.Load()) }
func (rm RMDR32) Store(b DR32) { rm.UM16.Store(uint16(b)) }

type DR33 uint16

func (b DR33) Field(mask DR33) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR33) J(v int) DR33 {
	return DR33(bits.MakeField32(v, uint32(mask)))
}

type RDR33 struct{ mmio.U16 }

func (r *RDR33) Bits(mask DR33) DR33    { return DR33(r.U16.Bits(uint16(mask))) }
func (r *RDR33) StoreBits(mask, b DR33) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR33) SetBits(mask DR33)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR33) ClearBits(mask DR33)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR33) Load() DR33             { return DR33(r.U16.Load()) }
func (r *RDR33) Store(b DR33)           { r.U16.Store(uint16(b)) }

type RMDR33 struct{ mmio.UM16 }

func (rm RMDR33) Load() DR33   { return DR33(rm.UM16.Load()) }
func (rm RMDR33) Store(b DR33) { rm.UM16.Store(uint16(b)) }

type DR34 uint16

func (b DR34) Field(mask DR34) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR34) J(v int) DR34 {
	return DR34(bits.MakeField32(v, uint32(mask)))
}

type RDR34 struct{ mmio.U16 }

func (r *RDR34) Bits(mask DR34) DR34    { return DR34(r.U16.Bits(uint16(mask))) }
func (r *RDR34) StoreBits(mask, b DR34) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR34) SetBits(mask DR34)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR34) ClearBits(mask DR34)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR34) Load() DR34             { return DR34(r.U16.Load()) }
func (r *RDR34) Store(b DR34)           { r.U16.Store(uint16(b)) }

type RMDR34 struct{ mmio.UM16 }

func (rm RMDR34) Load() DR34   { return DR34(rm.UM16.Load()) }
func (rm RMDR34) Store(b DR34) { rm.UM16.Store(uint16(b)) }

type DR35 uint16

func (b DR35) Field(mask DR35) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR35) J(v int) DR35 {
	return DR35(bits.MakeField32(v, uint32(mask)))
}

type RDR35 struct{ mmio.U16 }

func (r *RDR35) Bits(mask DR35) DR35    { return DR35(r.U16.Bits(uint16(mask))) }
func (r *RDR35) StoreBits(mask, b DR35) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR35) SetBits(mask DR35)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR35) ClearBits(mask DR35)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR35) Load() DR35             { return DR35(r.U16.Load()) }
func (r *RDR35) Store(b DR35)           { r.U16.Store(uint16(b)) }

type RMDR35 struct{ mmio.UM16 }

func (rm RMDR35) Load() DR35   { return DR35(rm.UM16.Load()) }
func (rm RMDR35) Store(b DR35) { rm.UM16.Store(uint16(b)) }

type DR36 uint16

func (b DR36) Field(mask DR36) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR36) J(v int) DR36 {
	return DR36(bits.MakeField32(v, uint32(mask)))
}

type RDR36 struct{ mmio.U16 }

func (r *RDR36) Bits(mask DR36) DR36    { return DR36(r.U16.Bits(uint16(mask))) }
func (r *RDR36) StoreBits(mask, b DR36) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR36) SetBits(mask DR36)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR36) ClearBits(mask DR36)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR36) Load() DR36             { return DR36(r.U16.Load()) }
func (r *RDR36) Store(b DR36)           { r.U16.Store(uint16(b)) }

type RMDR36 struct{ mmio.UM16 }

func (rm RMDR36) Load() DR36   { return DR36(rm.UM16.Load()) }
func (rm RMDR36) Store(b DR36) { rm.UM16.Store(uint16(b)) }

type DR37 uint16

func (b DR37) Field(mask DR37) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR37) J(v int) DR37 {
	return DR37(bits.MakeField32(v, uint32(mask)))
}

type RDR37 struct{ mmio.U16 }

func (r *RDR37) Bits(mask DR37) DR37    { return DR37(r.U16.Bits(uint16(mask))) }
func (r *RDR37) StoreBits(mask, b DR37) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR37) SetBits(mask DR37)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR37) ClearBits(mask DR37)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR37) Load() DR37             { return DR37(r.U16.Load()) }
func (r *RDR37) Store(b DR37)           { r.U16.Store(uint16(b)) }

type RMDR37 struct{ mmio.UM16 }

func (rm RMDR37) Load() DR37   { return DR37(rm.UM16.Load()) }
func (rm RMDR37) Store(b DR37) { rm.UM16.Store(uint16(b)) }

type DR38 uint16

func (b DR38) Field(mask DR38) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR38) J(v int) DR38 {
	return DR38(bits.MakeField32(v, uint32(mask)))
}

type RDR38 struct{ mmio.U16 }

func (r *RDR38) Bits(mask DR38) DR38    { return DR38(r.U16.Bits(uint16(mask))) }
func (r *RDR38) StoreBits(mask, b DR38) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR38) SetBits(mask DR38)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR38) ClearBits(mask DR38)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR38) Load() DR38             { return DR38(r.U16.Load()) }
func (r *RDR38) Store(b DR38)           { r.U16.Store(uint16(b)) }

type RMDR38 struct{ mmio.UM16 }

func (rm RMDR38) Load() DR38   { return DR38(rm.UM16.Load()) }
func (rm RMDR38) Store(b DR38) { rm.UM16.Store(uint16(b)) }

type DR39 uint16

func (b DR39) Field(mask DR39) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR39) J(v int) DR39 {
	return DR39(bits.MakeField32(v, uint32(mask)))
}

type RDR39 struct{ mmio.U16 }

func (r *RDR39) Bits(mask DR39) DR39    { return DR39(r.U16.Bits(uint16(mask))) }
func (r *RDR39) StoreBits(mask, b DR39) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR39) SetBits(mask DR39)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR39) ClearBits(mask DR39)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR39) Load() DR39             { return DR39(r.U16.Load()) }
func (r *RDR39) Store(b DR39)           { r.U16.Store(uint16(b)) }

type RMDR39 struct{ mmio.UM16 }

func (rm RMDR39) Load() DR39   { return DR39(rm.UM16.Load()) }
func (rm RMDR39) Store(b DR39) { rm.UM16.Store(uint16(b)) }

type DR40 uint16

func (b DR40) Field(mask DR40) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR40) J(v int) DR40 {
	return DR40(bits.MakeField32(v, uint32(mask)))
}

type RDR40 struct{ mmio.U16 }

func (r *RDR40) Bits(mask DR40) DR40    { return DR40(r.U16.Bits(uint16(mask))) }
func (r *RDR40) StoreBits(mask, b DR40) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR40) SetBits(mask DR40)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR40) ClearBits(mask DR40)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR40) Load() DR40             { return DR40(r.U16.Load()) }
func (r *RDR40) Store(b DR40)           { r.U16.Store(uint16(b)) }

type RMDR40 struct{ mmio.UM16 }

func (rm RMDR40) Load() DR40   { return DR40(rm.UM16.Load()) }
func (rm RMDR40) Store(b DR40) { rm.UM16.Store(uint16(b)) }

type DR41 uint16

func (b DR41) Field(mask DR41) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR41) J(v int) DR41 {
	return DR41(bits.MakeField32(v, uint32(mask)))
}

type RDR41 struct{ mmio.U16 }

func (r *RDR41) Bits(mask DR41) DR41    { return DR41(r.U16.Bits(uint16(mask))) }
func (r *RDR41) StoreBits(mask, b DR41) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR41) SetBits(mask DR41)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR41) ClearBits(mask DR41)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR41) Load() DR41             { return DR41(r.U16.Load()) }
func (r *RDR41) Store(b DR41)           { r.U16.Store(uint16(b)) }

type RMDR41 struct{ mmio.UM16 }

func (rm RMDR41) Load() DR41   { return DR41(rm.UM16.Load()) }
func (rm RMDR41) Store(b DR41) { rm.UM16.Store(uint16(b)) }

type DR42 uint16

func (b DR42) Field(mask DR42) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR42) J(v int) DR42 {
	return DR42(bits.MakeField32(v, uint32(mask)))
}

type RDR42 struct{ mmio.U16 }

func (r *RDR42) Bits(mask DR42) DR42    { return DR42(r.U16.Bits(uint16(mask))) }
func (r *RDR42) StoreBits(mask, b DR42) { r.U16.StoreBits(uint16(mask), uint16(b)) }
func (r *RDR42) SetBits(mask DR42)      { r.U16.SetBits(uint16(mask)) }
func (r *RDR42) ClearBits(mask DR42)    { r.U16.ClearBits(uint16(mask)) }
func (r *RDR42) Load() DR42             { return DR42(r.U16.Load()) }
func (r *RDR42) Store(b DR42)           { r.U16.Store(uint16(b)) }

type RMDR42 struct{ mmio.UM16 }

func (rm RMDR42) Load() DR42   { return DR42(rm.UM16.Load()) }
func (rm RMDR42) Store(b DR42) { rm.UM16.Store(uint16(b)) }
