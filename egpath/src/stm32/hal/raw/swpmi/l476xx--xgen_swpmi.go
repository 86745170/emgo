// +build l476xx

package swpmi

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type SWPMI_Periph struct {
	CR  CR
	BRR BRR
	_   uint32
	ISR ISR
	ICR ICR
	IER IER
	RFL RFL
	TDR TDR
	RDR RDR
	OR  OR
}

func (p *SWPMI_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var SWPMI1 = (*SWPMI_Periph)(unsafe.Pointer(uintptr(mmap.SWPMI1_BASE)))

type CR_Bits uint32

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR_Bits) J(v int) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}

type CR struct{ mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.U32.Load()) }
func (r *CR) Store(b CR_Bits)           { r.U32.Store(uint32(b)) }

func (r *CR) AtomicSetBits(mask CR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CR) AtomicClearBits(mask CR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CR_Mask struct{ mmio.UM32 }

func (rm CR_Mask) Load() CR_Bits   { return CR_Bits(rm.UM32.Load()) }
func (rm CR_Mask) Store(b CR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) RXDMA() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(RXDMA)}}
}

func (p *SWPMI_Periph) TXDMA() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(TXDMA)}}
}

func (p *SWPMI_Periph) RXMODE() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(RXMODE)}}
}

func (p *SWPMI_Periph) TXMODE() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(TXMODE)}}
}

func (p *SWPMI_Periph) LPBK() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(LPBK)}}
}

func (p *SWPMI_Periph) SWPACT() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(SWPACT)}}
}

func (p *SWPMI_Periph) DEACT() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(DEACT)}}
}

type BRR_Bits uint32

func (b BRR_Bits) Field(mask BRR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BRR_Bits) J(v int) BRR_Bits {
	return BRR_Bits(bits.Make32(v, uint32(mask)))
}

type BRR struct{ mmio.U32 }

func (r *BRR) Bits(mask BRR_Bits) BRR_Bits { return BRR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BRR) StoreBits(mask, b BRR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BRR) SetBits(mask BRR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *BRR) ClearBits(mask BRR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *BRR) Load() BRR_Bits              { return BRR_Bits(r.U32.Load()) }
func (r *BRR) Store(b BRR_Bits)            { r.U32.Store(uint32(b)) }

func (r *BRR) AtomicSetBits(mask BRR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BRR) AtomicClearBits(mask BRR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BRR_Mask struct{ mmio.UM32 }

func (rm BRR_Mask) Load() BRR_Bits   { return BRR_Bits(rm.UM32.Load()) }
func (rm BRR_Mask) Store(b BRR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) BR() BRR_Mask {
	return BRR_Mask{mmio.UM32{&p.BRR.U32, uint32(BR)}}
}

type ISR_Bits uint32

func (b ISR_Bits) Field(mask ISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISR_Bits) J(v int) ISR_Bits {
	return ISR_Bits(bits.Make32(v, uint32(mask)))
}

type ISR struct{ mmio.U32 }

func (r *ISR) Bits(mask ISR_Bits) ISR_Bits { return ISR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ISR) StoreBits(mask, b ISR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ISR) SetBits(mask ISR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *ISR) ClearBits(mask ISR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *ISR) Load() ISR_Bits              { return ISR_Bits(r.U32.Load()) }
func (r *ISR) Store(b ISR_Bits)            { r.U32.Store(uint32(b)) }

func (r *ISR) AtomicSetBits(mask ISR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ISR) AtomicClearBits(mask ISR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type ISR_Mask struct{ mmio.UM32 }

func (rm ISR_Mask) Load() ISR_Bits   { return ISR_Bits(rm.UM32.Load()) }
func (rm ISR_Mask) Store(b ISR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) RXBFF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXBFF)}}
}

func (p *SWPMI_Periph) TXBEF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXBEF)}}
}

func (p *SWPMI_Periph) RXBERF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXBERF)}}
}

func (p *SWPMI_Periph) RXOVRF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXOVRF)}}
}

func (p *SWPMI_Periph) TXUNRF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXUNRF)}}
}

func (p *SWPMI_Periph) RXNE() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(RXNE)}}
}

func (p *SWPMI_Periph) TXE() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TXE)}}
}

func (p *SWPMI_Periph) TCF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(TCF)}}
}

func (p *SWPMI_Periph) SRF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(SRF)}}
}

func (p *SWPMI_Periph) SUSP() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(SUSP)}}
}

func (p *SWPMI_Periph) DEACTF() ISR_Mask {
	return ISR_Mask{mmio.UM32{&p.ISR.U32, uint32(DEACTF)}}
}

type ICR_Bits uint32

func (b ICR_Bits) Field(mask ICR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICR_Bits) J(v int) ICR_Bits {
	return ICR_Bits(bits.Make32(v, uint32(mask)))
}

type ICR struct{ mmio.U32 }

func (r *ICR) Bits(mask ICR_Bits) ICR_Bits { return ICR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ICR) StoreBits(mask, b ICR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ICR) SetBits(mask ICR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *ICR) ClearBits(mask ICR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *ICR) Load() ICR_Bits              { return ICR_Bits(r.U32.Load()) }
func (r *ICR) Store(b ICR_Bits)            { r.U32.Store(uint32(b)) }

func (r *ICR) AtomicSetBits(mask ICR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ICR) AtomicClearBits(mask ICR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type ICR_Mask struct{ mmio.UM32 }

func (rm ICR_Mask) Load() ICR_Bits   { return ICR_Bits(rm.UM32.Load()) }
func (rm ICR_Mask) Store(b ICR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) CRXBFF() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(CRXBFF)}}
}

func (p *SWPMI_Periph) CTXBEF() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(CTXBEF)}}
}

func (p *SWPMI_Periph) CRXBERF() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(CRXBERF)}}
}

func (p *SWPMI_Periph) CRXOVRF() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(CRXOVRF)}}
}

func (p *SWPMI_Periph) CTXUNRF() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(CTXUNRF)}}
}

func (p *SWPMI_Periph) CTCF() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(CTCF)}}
}

func (p *SWPMI_Periph) CSRF() ICR_Mask {
	return ICR_Mask{mmio.UM32{&p.ICR.U32, uint32(CSRF)}}
}

type IER_Bits uint32

func (b IER_Bits) Field(mask IER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IER_Bits) J(v int) IER_Bits {
	return IER_Bits(bits.Make32(v, uint32(mask)))
}

type IER struct{ mmio.U32 }

func (r *IER) Bits(mask IER_Bits) IER_Bits { return IER_Bits(r.U32.Bits(uint32(mask))) }
func (r *IER) StoreBits(mask, b IER_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *IER) SetBits(mask IER_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *IER) ClearBits(mask IER_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *IER) Load() IER_Bits              { return IER_Bits(r.U32.Load()) }
func (r *IER) Store(b IER_Bits)            { r.U32.Store(uint32(b)) }

func (r *IER) AtomicSetBits(mask IER_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *IER) AtomicClearBits(mask IER_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type IER_Mask struct{ mmio.UM32 }

func (rm IER_Mask) Load() IER_Bits   { return IER_Bits(rm.UM32.Load()) }
func (rm IER_Mask) Store(b IER_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) SRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(SRIE)}}
}

func (p *SWPMI_Periph) TCIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TCIE)}}
}

func (p *SWPMI_Periph) TIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TIE)}}
}

func (p *SWPMI_Periph) RIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RIE)}}
}

func (p *SWPMI_Periph) TXUNRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TXUNRIE)}}
}

func (p *SWPMI_Periph) RXOVRIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RXOVRIE)}}
}

func (p *SWPMI_Periph) RXBERIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RXBERIE)}}
}

func (p *SWPMI_Periph) TXBEIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(TXBEIE)}}
}

func (p *SWPMI_Periph) RXBFIE() IER_Mask {
	return IER_Mask{mmio.UM32{&p.IER.U32, uint32(RXBFIE)}}
}

type RFL_Bits uint32

func (b RFL_Bits) Field(mask RFL_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RFL_Bits) J(v int) RFL_Bits {
	return RFL_Bits(bits.Make32(v, uint32(mask)))
}

type RFL struct{ mmio.U32 }

func (r *RFL) Bits(mask RFL_Bits) RFL_Bits { return RFL_Bits(r.U32.Bits(uint32(mask))) }
func (r *RFL) StoreBits(mask, b RFL_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RFL) SetBits(mask RFL_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *RFL) ClearBits(mask RFL_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *RFL) Load() RFL_Bits              { return RFL_Bits(r.U32.Load()) }
func (r *RFL) Store(b RFL_Bits)            { r.U32.Store(uint32(b)) }

func (r *RFL) AtomicSetBits(mask RFL_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RFL) AtomicClearBits(mask RFL_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RFL_Mask struct{ mmio.UM32 }

func (rm RFL_Mask) Load() RFL_Bits   { return RFL_Bits(rm.UM32.Load()) }
func (rm RFL_Mask) Store(b RFL_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) RFL() RFL_Mask {
	return RFL_Mask{mmio.UM32{&p.RFL.U32, uint32(RFL)}}
}

type TDR_Bits uint32

func (b TDR_Bits) Field(mask TDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TDR_Bits) J(v int) TDR_Bits {
	return TDR_Bits(bits.Make32(v, uint32(mask)))
}

type TDR struct{ mmio.U32 }

func (r *TDR) Bits(mask TDR_Bits) TDR_Bits { return TDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *TDR) StoreBits(mask, b TDR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *TDR) SetBits(mask TDR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *TDR) ClearBits(mask TDR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *TDR) Load() TDR_Bits              { return TDR_Bits(r.U32.Load()) }
func (r *TDR) Store(b TDR_Bits)            { r.U32.Store(uint32(b)) }

func (r *TDR) AtomicSetBits(mask TDR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *TDR) AtomicClearBits(mask TDR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type TDR_Mask struct{ mmio.UM32 }

func (rm TDR_Mask) Load() TDR_Bits   { return TDR_Bits(rm.UM32.Load()) }
func (rm TDR_Mask) Store(b TDR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) TD() TDR_Mask {
	return TDR_Mask{mmio.UM32{&p.TDR.U32, uint32(TD)}}
}

type RDR_Bits uint32

func (b RDR_Bits) Field(mask RDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RDR_Bits) J(v int) RDR_Bits {
	return RDR_Bits(bits.Make32(v, uint32(mask)))
}

type RDR struct{ mmio.U32 }

func (r *RDR) Bits(mask RDR_Bits) RDR_Bits { return RDR_Bits(r.U32.Bits(uint32(mask))) }
func (r *RDR) StoreBits(mask, b RDR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RDR) SetBits(mask RDR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *RDR) ClearBits(mask RDR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *RDR) Load() RDR_Bits              { return RDR_Bits(r.U32.Load()) }
func (r *RDR) Store(b RDR_Bits)            { r.U32.Store(uint32(b)) }

func (r *RDR) AtomicSetBits(mask RDR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RDR) AtomicClearBits(mask RDR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type RDR_Mask struct{ mmio.UM32 }

func (rm RDR_Mask) Load() RDR_Bits   { return RDR_Bits(rm.UM32.Load()) }
func (rm RDR_Mask) Store(b RDR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) RD() RDR_Mask {
	return RDR_Mask{mmio.UM32{&p.RDR.U32, uint32(RD)}}
}

type OR_Bits uint32

func (b OR_Bits) Field(mask OR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask OR_Bits) J(v int) OR_Bits {
	return OR_Bits(bits.Make32(v, uint32(mask)))
}

type OR struct{ mmio.U32 }

func (r *OR) Bits(mask OR_Bits) OR_Bits { return OR_Bits(r.U32.Bits(uint32(mask))) }
func (r *OR) StoreBits(mask, b OR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *OR) SetBits(mask OR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *OR) ClearBits(mask OR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *OR) Load() OR_Bits             { return OR_Bits(r.U32.Load()) }
func (r *OR) Store(b OR_Bits)           { r.U32.Store(uint32(b)) }

func (r *OR) AtomicSetBits(mask OR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *OR) AtomicClearBits(mask OR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type OR_Mask struct{ mmio.UM32 }

func (rm OR_Mask) Load() OR_Bits   { return OR_Bits(rm.UM32.Load()) }
func (rm OR_Mask) Store(b OR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SWPMI_Periph) TBYP() OR_Mask {
	return OR_Mask{mmio.UM32{&p.OR.U32, uint32(TBYP)}}
}

func (p *SWPMI_Periph) CLASS() OR_Mask {
	return OR_Mask{mmio.UM32{&p.OR.U32, uint32(CLASS)}}
}
