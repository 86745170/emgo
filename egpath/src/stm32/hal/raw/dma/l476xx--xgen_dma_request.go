// +build l476xx

package dma

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type DMA_Request_Periph struct {
	CSELR CSELR
}

func (p *DMA_Request_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CSELR_Bits uint32

func (b CSELR_Bits) Field(mask CSELR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSELR_Bits) J(v int) CSELR_Bits {
	return CSELR_Bits(bits.Make32(v, uint32(mask)))
}

type CSELR struct{ mmio.U32 }

func (r *CSELR) Bits(mask CSELR_Bits) CSELR_Bits { return CSELR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CSELR) StoreBits(mask, b CSELR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CSELR) SetBits(mask CSELR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *CSELR) ClearBits(mask CSELR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *CSELR) Load() CSELR_Bits                { return CSELR_Bits(r.U32.Load()) }
func (r *CSELR) Store(b CSELR_Bits)              { r.U32.Store(uint32(b)) }

type CSELR_Mask struct{ mmio.UM32 }

func (rm CSELR_Mask) Load() CSELR_Bits   { return CSELR_Bits(rm.UM32.Load()) }
func (rm CSELR_Mask) Store(b CSELR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *DMA_Request_Periph) C1S() CSELR_Mask {
	return CSELR_Mask{mmio.UM32{&p.CSELR.U32, uint32(C1S)}}
}

func (p *DMA_Request_Periph) C2S() CSELR_Mask {
	return CSELR_Mask{mmio.UM32{&p.CSELR.U32, uint32(C2S)}}
}

func (p *DMA_Request_Periph) C3S() CSELR_Mask {
	return CSELR_Mask{mmio.UM32{&p.CSELR.U32, uint32(C3S)}}
}

func (p *DMA_Request_Periph) C4S() CSELR_Mask {
	return CSELR_Mask{mmio.UM32{&p.CSELR.U32, uint32(C4S)}}
}

func (p *DMA_Request_Periph) C5S() CSELR_Mask {
	return CSELR_Mask{mmio.UM32{&p.CSELR.U32, uint32(C5S)}}
}

func (p *DMA_Request_Periph) C6S() CSELR_Mask {
	return CSELR_Mask{mmio.UM32{&p.CSELR.U32, uint32(C6S)}}
}

func (p *DMA_Request_Periph) C7S() CSELR_Mask {
	return CSELR_Mask{mmio.UM32{&p.CSELR.U32, uint32(C7S)}}
}
