// +build l476xx

package firewall

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type FIREWALL_Periph struct {
	CSSA   RCSSA
	CSL    RCSL
	NVDSSA RNVDSSA
	NVDSL  RNVDSL
	VDSSA  RVDSSA
	VDSL   RVDSL
	_      [2]uint32
	CR     RCR
}

func (p *FIREWALL_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var FIREWALL = (*FIREWALL_Periph)(unsafe.Pointer(uintptr(mmap.FIREWALL_BASE)))

type CSSA uint32

func (b CSSA) Field(mask CSSA) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSSA) J(v int) CSSA {
	return CSSA(bits.Make32(v, uint32(mask)))
}

type RCSSA struct{ mmio.U32 }

func (r *RCSSA) Bits(mask CSSA) CSSA    { return CSSA(r.U32.Bits(uint32(mask))) }
func (r *RCSSA) StoreBits(mask, b CSSA) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSSA) SetBits(mask CSSA)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSSA) ClearBits(mask CSSA)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSSA) Load() CSSA             { return CSSA(r.U32.Load()) }
func (r *RCSSA) Store(b CSSA)           { r.U32.Store(uint32(b)) }

func (r *RCSSA) AtomicStoreBits(mask, b CSSA) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSSA) AtomicSetBits(mask CSSA)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSSA) AtomicClearBits(mask CSSA)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSSA struct{ mmio.UM32 }

func (rm RMCSSA) Load() CSSA   { return CSSA(rm.UM32.Load()) }
func (rm RMCSSA) Store(b CSSA) { rm.UM32.Store(uint32(b)) }

type CSL uint32

func (b CSL) Field(mask CSL) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSL) J(v int) CSL {
	return CSL(bits.Make32(v, uint32(mask)))
}

type RCSL struct{ mmio.U32 }

func (r *RCSL) Bits(mask CSL) CSL     { return CSL(r.U32.Bits(uint32(mask))) }
func (r *RCSL) StoreBits(mask, b CSL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSL) SetBits(mask CSL)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSL) ClearBits(mask CSL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSL) Load() CSL             { return CSL(r.U32.Load()) }
func (r *RCSL) Store(b CSL)           { r.U32.Store(uint32(b)) }

func (r *RCSL) AtomicStoreBits(mask, b CSL) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSL) AtomicSetBits(mask CSL)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSL) AtomicClearBits(mask CSL)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSL struct{ mmio.UM32 }

func (rm RMCSL) Load() CSL   { return CSL(rm.UM32.Load()) }
func (rm RMCSL) Store(b CSL) { rm.UM32.Store(uint32(b)) }

type NVDSSA uint32

func (b NVDSSA) Field(mask NVDSSA) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask NVDSSA) J(v int) NVDSSA {
	return NVDSSA(bits.Make32(v, uint32(mask)))
}

type RNVDSSA struct{ mmio.U32 }

func (r *RNVDSSA) Bits(mask NVDSSA) NVDSSA  { return NVDSSA(r.U32.Bits(uint32(mask))) }
func (r *RNVDSSA) StoreBits(mask, b NVDSSA) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNVDSSA) SetBits(mask NVDSSA)      { r.U32.SetBits(uint32(mask)) }
func (r *RNVDSSA) ClearBits(mask NVDSSA)    { r.U32.ClearBits(uint32(mask)) }
func (r *RNVDSSA) Load() NVDSSA             { return NVDSSA(r.U32.Load()) }
func (r *RNVDSSA) Store(b NVDSSA)           { r.U32.Store(uint32(b)) }

func (r *RNVDSSA) AtomicStoreBits(mask, b NVDSSA) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RNVDSSA) AtomicSetBits(mask NVDSSA)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RNVDSSA) AtomicClearBits(mask NVDSSA)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMNVDSSA struct{ mmio.UM32 }

func (rm RMNVDSSA) Load() NVDSSA   { return NVDSSA(rm.UM32.Load()) }
func (rm RMNVDSSA) Store(b NVDSSA) { rm.UM32.Store(uint32(b)) }

type NVDSL uint32

func (b NVDSL) Field(mask NVDSL) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask NVDSL) J(v int) NVDSL {
	return NVDSL(bits.Make32(v, uint32(mask)))
}

type RNVDSL struct{ mmio.U32 }

func (r *RNVDSL) Bits(mask NVDSL) NVDSL   { return NVDSL(r.U32.Bits(uint32(mask))) }
func (r *RNVDSL) StoreBits(mask, b NVDSL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RNVDSL) SetBits(mask NVDSL)      { r.U32.SetBits(uint32(mask)) }
func (r *RNVDSL) ClearBits(mask NVDSL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RNVDSL) Load() NVDSL             { return NVDSL(r.U32.Load()) }
func (r *RNVDSL) Store(b NVDSL)           { r.U32.Store(uint32(b)) }

func (r *RNVDSL) AtomicStoreBits(mask, b NVDSL) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RNVDSL) AtomicSetBits(mask NVDSL)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RNVDSL) AtomicClearBits(mask NVDSL)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMNVDSL struct{ mmio.UM32 }

func (rm RMNVDSL) Load() NVDSL   { return NVDSL(rm.UM32.Load()) }
func (rm RMNVDSL) Store(b NVDSL) { rm.UM32.Store(uint32(b)) }

type VDSSA uint32

func (b VDSSA) Field(mask VDSSA) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VDSSA) J(v int) VDSSA {
	return VDSSA(bits.Make32(v, uint32(mask)))
}

type RVDSSA struct{ mmio.U32 }

func (r *RVDSSA) Bits(mask VDSSA) VDSSA   { return VDSSA(r.U32.Bits(uint32(mask))) }
func (r *RVDSSA) StoreBits(mask, b VDSSA) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVDSSA) SetBits(mask VDSSA)      { r.U32.SetBits(uint32(mask)) }
func (r *RVDSSA) ClearBits(mask VDSSA)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVDSSA) Load() VDSSA             { return VDSSA(r.U32.Load()) }
func (r *RVDSSA) Store(b VDSSA)           { r.U32.Store(uint32(b)) }

func (r *RVDSSA) AtomicStoreBits(mask, b VDSSA) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVDSSA) AtomicSetBits(mask VDSSA)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVDSSA) AtomicClearBits(mask VDSSA)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVDSSA struct{ mmio.UM32 }

func (rm RMVDSSA) Load() VDSSA   { return VDSSA(rm.UM32.Load()) }
func (rm RMVDSSA) Store(b VDSSA) { rm.UM32.Store(uint32(b)) }

type VDSL uint32

func (b VDSL) Field(mask VDSL) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VDSL) J(v int) VDSL {
	return VDSL(bits.Make32(v, uint32(mask)))
}

type RVDSL struct{ mmio.U32 }

func (r *RVDSL) Bits(mask VDSL) VDSL    { return VDSL(r.U32.Bits(uint32(mask))) }
func (r *RVDSL) StoreBits(mask, b VDSL) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVDSL) SetBits(mask VDSL)      { r.U32.SetBits(uint32(mask)) }
func (r *RVDSL) ClearBits(mask VDSL)    { r.U32.ClearBits(uint32(mask)) }
func (r *RVDSL) Load() VDSL             { return VDSL(r.U32.Load()) }
func (r *RVDSL) Store(b VDSL)           { r.U32.Store(uint32(b)) }

func (r *RVDSL) AtomicStoreBits(mask, b VDSL) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RVDSL) AtomicSetBits(mask VDSL)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RVDSL) AtomicClearBits(mask VDSL)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMVDSL struct{ mmio.UM32 }

func (rm RMVDSL) Load() VDSL   { return VDSL(rm.UM32.Load()) }
func (rm RMVDSL) Store(b VDSL) { rm.UM32.Store(uint32(b)) }

type CR uint32

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.Make32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicStoreBits(mask, b CR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR) AtomicSetBits(mask CR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask CR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }
