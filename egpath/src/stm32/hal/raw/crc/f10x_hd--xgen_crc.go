// +build f10x_hd

package crc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"mmio"
	"unsafe"

	"stm32/o/f10x_hd/mmap"
)

type CRC_Periph struct {
	DR  DR
	IDR IDR
	_   uint8
	_   uint16
	CR  CR
}

func (p *CRC_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var CRC = (*CRC_Periph)(unsafe.Pointer(uintptr(mmap.CRC_BASE)))

type DR_Bits uint32

type DR struct{ mmio.U32 }

func (r *DR) Bits(mask DR_Bits) DR_Bits { return DR_Bits(r.U32.Bits(uint32(mask))) }
func (r *DR) StoreBits(mask, b DR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DR) SetBits(mask DR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *DR) ClearBits(mask DR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *DR) Load() DR_Bits             { return DR_Bits(r.U32.Load()) }
func (r *DR) Store(b DR_Bits)           { r.U32.Store(uint32(b)) }

type DR_Mask struct{ mmio.UM32 }

func (rm DR_Mask) Load() DR_Bits   { return DR_Bits(rm.UM32.Load()) }
func (rm DR_Mask) Store(b DR_Bits) { rm.UM32.Store(uint32(b)) }

type IDR_Bits uint8

type IDR struct{ mmio.U8 }

func (r *IDR) Bits(mask IDR_Bits) IDR_Bits { return IDR_Bits(r.U8.Bits(uint8(mask))) }
func (r *IDR) StoreBits(mask, b IDR_Bits)  { r.U8.StoreBits(uint8(mask), uint8(b)) }
func (r *IDR) SetBits(mask IDR_Bits)       { r.U8.SetBits(uint8(mask)) }
func (r *IDR) ClearBits(mask IDR_Bits)     { r.U8.ClearBits(uint8(mask)) }
func (r *IDR) Load() IDR_Bits              { return IDR_Bits(r.U8.Load()) }
func (r *IDR) Store(b IDR_Bits)            { r.U8.Store(uint8(b)) }

type IDR_Mask struct{ mmio.UM8 }

func (rm IDR_Mask) Load() IDR_Bits   { return IDR_Bits(rm.UM8.Load()) }
func (rm IDR_Mask) Store(b IDR_Bits) { rm.UM8.Store(uint8(b)) }

type CR_Bits uint32

type CR struct{ mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.U32.Load()) }
func (r *CR) Store(b CR_Bits)           { r.U32.Store(uint32(b)) }

type CR_Mask struct{ mmio.UM32 }

func (rm CR_Mask) Load() CR_Bits   { return CR_Bits(rm.UM32.Load()) }
func (rm CR_Mask) Store(b CR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *CRC_Periph) RESET() CR_Mask {
	return CR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(RESET)}}
}
