// +build f40_41xxx

package hash

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f40_41xxx/mmap"
)

type HASH_DIGEST_Periph struct {
	HR [8]RHR
}

func (p *HASH_DIGEST_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var HASH_DIGEST = (*HASH_DIGEST_Periph)(unsafe.Pointer(uintptr(mmap.HASH_DIGEST_BASE)))

type HR uint32

func (b HR) Field(mask HR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HR) J(v int) HR {
	return HR(bits.Make32(v, uint32(mask)))
}

type RHR struct{ mmio.U32 }

func (r *RHR) Bits(mask HR) HR      { return HR(r.U32.Bits(uint32(mask))) }
func (r *RHR) StoreBits(mask, b HR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHR) SetBits(mask HR)      { r.U32.SetBits(uint32(mask)) }
func (r *RHR) ClearBits(mask HR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RHR) Load() HR             { return HR(r.U32.Load()) }
func (r *RHR) Store(b HR)           { r.U32.Store(uint32(b)) }

func (r *RHR) AtomicStoreBits(mask, b HR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RHR) AtomicSetBits(mask HR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RHR) AtomicClearBits(mask HR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMHR struct{ mmio.UM32 }

func (rm RMHR) Load() HR   { return HR(rm.UM32.Load()) }
func (rm RMHR) Store(b HR) { rm.UM32.Store(uint32(b)) }
