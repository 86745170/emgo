// +build f746xx

package usb

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type USB_OTG_INEndpoint_Periph struct {
	DIEPCTL  DIEPCTL
	_        uint32
	DIEPINT  DIEPINT
	_        uint32
	DIEPTSIZ DIEPTSIZ
	DIEPDMA  DIEPDMA
	DTXFSTS  DTXFSTS
}

func (p *USB_OTG_INEndpoint_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type DIEPCTL_Bits uint32

type DIEPCTL struct{ mmio.U32 }

func (r *DIEPCTL) Bits(mask DIEPCTL_Bits) DIEPCTL_Bits { return DIEPCTL_Bits(r.U32.Bits(uint32(mask))) }
func (r *DIEPCTL) StoreBits(mask, b DIEPCTL_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DIEPCTL) SetBits(mask DIEPCTL_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *DIEPCTL) ClearBits(mask DIEPCTL_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *DIEPCTL) Load() DIEPCTL_Bits                  { return DIEPCTL_Bits(r.U32.Load()) }
func (r *DIEPCTL) Store(b DIEPCTL_Bits)                { r.U32.Store(uint32(b)) }

type DIEPCTL_Mask struct{ mmio.UM32 }

func (rm DIEPCTL_Mask) Load() DIEPCTL_Bits   { return DIEPCTL_Bits(rm.UM32.Load()) }
func (rm DIEPCTL_Mask) Store(b DIEPCTL_Bits) { rm.UM32.Store(uint32(b)) }

type DIEPINT_Bits uint32

type DIEPINT struct{ mmio.U32 }

func (r *DIEPINT) Bits(mask DIEPINT_Bits) DIEPINT_Bits { return DIEPINT_Bits(r.U32.Bits(uint32(mask))) }
func (r *DIEPINT) StoreBits(mask, b DIEPINT_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DIEPINT) SetBits(mask DIEPINT_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *DIEPINT) ClearBits(mask DIEPINT_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *DIEPINT) Load() DIEPINT_Bits                  { return DIEPINT_Bits(r.U32.Load()) }
func (r *DIEPINT) Store(b DIEPINT_Bits)                { r.U32.Store(uint32(b)) }

type DIEPINT_Mask struct{ mmio.UM32 }

func (rm DIEPINT_Mask) Load() DIEPINT_Bits   { return DIEPINT_Bits(rm.UM32.Load()) }
func (rm DIEPINT_Mask) Store(b DIEPINT_Bits) { rm.UM32.Store(uint32(b)) }

type DIEPTSIZ_Bits uint32

type DIEPTSIZ struct{ mmio.U32 }

func (r *DIEPTSIZ) Bits(mask DIEPTSIZ_Bits) DIEPTSIZ_Bits {
	return DIEPTSIZ_Bits(r.U32.Bits(uint32(mask)))
}
func (r *DIEPTSIZ) StoreBits(mask, b DIEPTSIZ_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DIEPTSIZ) SetBits(mask DIEPTSIZ_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *DIEPTSIZ) ClearBits(mask DIEPTSIZ_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *DIEPTSIZ) Load() DIEPTSIZ_Bits             { return DIEPTSIZ_Bits(r.U32.Load()) }
func (r *DIEPTSIZ) Store(b DIEPTSIZ_Bits)           { r.U32.Store(uint32(b)) }

type DIEPTSIZ_Mask struct{ mmio.UM32 }

func (rm DIEPTSIZ_Mask) Load() DIEPTSIZ_Bits   { return DIEPTSIZ_Bits(rm.UM32.Load()) }
func (rm DIEPTSIZ_Mask) Store(b DIEPTSIZ_Bits) { rm.UM32.Store(uint32(b)) }

type DIEPDMA_Bits uint32

type DIEPDMA struct{ mmio.U32 }

func (r *DIEPDMA) Bits(mask DIEPDMA_Bits) DIEPDMA_Bits { return DIEPDMA_Bits(r.U32.Bits(uint32(mask))) }
func (r *DIEPDMA) StoreBits(mask, b DIEPDMA_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DIEPDMA) SetBits(mask DIEPDMA_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *DIEPDMA) ClearBits(mask DIEPDMA_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *DIEPDMA) Load() DIEPDMA_Bits                  { return DIEPDMA_Bits(r.U32.Load()) }
func (r *DIEPDMA) Store(b DIEPDMA_Bits)                { r.U32.Store(uint32(b)) }

type DIEPDMA_Mask struct{ mmio.UM32 }

func (rm DIEPDMA_Mask) Load() DIEPDMA_Bits   { return DIEPDMA_Bits(rm.UM32.Load()) }
func (rm DIEPDMA_Mask) Store(b DIEPDMA_Bits) { rm.UM32.Store(uint32(b)) }

type DTXFSTS_Bits uint32

type DTXFSTS struct{ mmio.U32 }

func (r *DTXFSTS) Bits(mask DTXFSTS_Bits) DTXFSTS_Bits { return DTXFSTS_Bits(r.U32.Bits(uint32(mask))) }
func (r *DTXFSTS) StoreBits(mask, b DTXFSTS_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DTXFSTS) SetBits(mask DTXFSTS_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *DTXFSTS) ClearBits(mask DTXFSTS_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *DTXFSTS) Load() DTXFSTS_Bits                  { return DTXFSTS_Bits(r.U32.Load()) }
func (r *DTXFSTS) Store(b DTXFSTS_Bits)                { r.U32.Store(uint32(b)) }

type DTXFSTS_Mask struct{ mmio.UM32 }

func (rm DTXFSTS_Mask) Load() DTXFSTS_Bits   { return DTXFSTS_Bits(rm.UM32.Load()) }
func (rm DTXFSTS_Mask) Store(b DTXFSTS_Bits) { rm.UM32.Store(uint32(b)) }
