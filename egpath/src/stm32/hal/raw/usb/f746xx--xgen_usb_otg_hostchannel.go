// +build f746xx

package usb

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type USB_OTG_HostChannel_Periph struct {
	HCCHAR   HCCHAR
	HCSPLT   HCSPLT
	HCINT    HCINT
	HCINTMSK HCINTMSK
	HCTSIZ   HCTSIZ
	HCDMA    HCDMA
}

func (p *USB_OTG_HostChannel_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type HCCHAR_Bits uint32

type HCCHAR struct{ mmio.U32 }

func (r *HCCHAR) Bits(mask HCCHAR_Bits) HCCHAR_Bits { return HCCHAR_Bits(r.U32.Bits(uint32(mask))) }
func (r *HCCHAR) StoreBits(mask, b HCCHAR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *HCCHAR) SetBits(mask HCCHAR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *HCCHAR) ClearBits(mask HCCHAR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *HCCHAR) Load() HCCHAR_Bits                 { return HCCHAR_Bits(r.U32.Load()) }
func (r *HCCHAR) Store(b HCCHAR_Bits)               { r.U32.Store(uint32(b)) }

type HCCHAR_Mask struct{ mmio.UM32 }

func (rm HCCHAR_Mask) Load() HCCHAR_Bits   { return HCCHAR_Bits(rm.UM32.Load()) }
func (rm HCCHAR_Mask) Store(b HCCHAR_Bits) { rm.UM32.Store(uint32(b)) }

type HCSPLT_Bits uint32

type HCSPLT struct{ mmio.U32 }

func (r *HCSPLT) Bits(mask HCSPLT_Bits) HCSPLT_Bits { return HCSPLT_Bits(r.U32.Bits(uint32(mask))) }
func (r *HCSPLT) StoreBits(mask, b HCSPLT_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *HCSPLT) SetBits(mask HCSPLT_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *HCSPLT) ClearBits(mask HCSPLT_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *HCSPLT) Load() HCSPLT_Bits                 { return HCSPLT_Bits(r.U32.Load()) }
func (r *HCSPLT) Store(b HCSPLT_Bits)               { r.U32.Store(uint32(b)) }

type HCSPLT_Mask struct{ mmio.UM32 }

func (rm HCSPLT_Mask) Load() HCSPLT_Bits   { return HCSPLT_Bits(rm.UM32.Load()) }
func (rm HCSPLT_Mask) Store(b HCSPLT_Bits) { rm.UM32.Store(uint32(b)) }

type HCINT_Bits uint32

type HCINT struct{ mmio.U32 }

func (r *HCINT) Bits(mask HCINT_Bits) HCINT_Bits { return HCINT_Bits(r.U32.Bits(uint32(mask))) }
func (r *HCINT) StoreBits(mask, b HCINT_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *HCINT) SetBits(mask HCINT_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *HCINT) ClearBits(mask HCINT_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *HCINT) Load() HCINT_Bits                { return HCINT_Bits(r.U32.Load()) }
func (r *HCINT) Store(b HCINT_Bits)              { r.U32.Store(uint32(b)) }

type HCINT_Mask struct{ mmio.UM32 }

func (rm HCINT_Mask) Load() HCINT_Bits   { return HCINT_Bits(rm.UM32.Load()) }
func (rm HCINT_Mask) Store(b HCINT_Bits) { rm.UM32.Store(uint32(b)) }

type HCINTMSK_Bits uint32

type HCINTMSK struct{ mmio.U32 }

func (r *HCINTMSK) Bits(mask HCINTMSK_Bits) HCINTMSK_Bits {
	return HCINTMSK_Bits(r.U32.Bits(uint32(mask)))
}
func (r *HCINTMSK) StoreBits(mask, b HCINTMSK_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *HCINTMSK) SetBits(mask HCINTMSK_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *HCINTMSK) ClearBits(mask HCINTMSK_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *HCINTMSK) Load() HCINTMSK_Bits             { return HCINTMSK_Bits(r.U32.Load()) }
func (r *HCINTMSK) Store(b HCINTMSK_Bits)           { r.U32.Store(uint32(b)) }

type HCINTMSK_Mask struct{ mmio.UM32 }

func (rm HCINTMSK_Mask) Load() HCINTMSK_Bits   { return HCINTMSK_Bits(rm.UM32.Load()) }
func (rm HCINTMSK_Mask) Store(b HCINTMSK_Bits) { rm.UM32.Store(uint32(b)) }

type HCTSIZ_Bits uint32

type HCTSIZ struct{ mmio.U32 }

func (r *HCTSIZ) Bits(mask HCTSIZ_Bits) HCTSIZ_Bits { return HCTSIZ_Bits(r.U32.Bits(uint32(mask))) }
func (r *HCTSIZ) StoreBits(mask, b HCTSIZ_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *HCTSIZ) SetBits(mask HCTSIZ_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *HCTSIZ) ClearBits(mask HCTSIZ_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *HCTSIZ) Load() HCTSIZ_Bits                 { return HCTSIZ_Bits(r.U32.Load()) }
func (r *HCTSIZ) Store(b HCTSIZ_Bits)               { r.U32.Store(uint32(b)) }

type HCTSIZ_Mask struct{ mmio.UM32 }

func (rm HCTSIZ_Mask) Load() HCTSIZ_Bits   { return HCTSIZ_Bits(rm.UM32.Load()) }
func (rm HCTSIZ_Mask) Store(b HCTSIZ_Bits) { rm.UM32.Store(uint32(b)) }

type HCDMA_Bits uint32

type HCDMA struct{ mmio.U32 }

func (r *HCDMA) Bits(mask HCDMA_Bits) HCDMA_Bits { return HCDMA_Bits(r.U32.Bits(uint32(mask))) }
func (r *HCDMA) StoreBits(mask, b HCDMA_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *HCDMA) SetBits(mask HCDMA_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *HCDMA) ClearBits(mask HCDMA_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *HCDMA) Load() HCDMA_Bits                { return HCDMA_Bits(r.U32.Load()) }
func (r *HCDMA) Store(b HCDMA_Bits)              { r.U32.Store(uint32(b)) }

type HCDMA_Mask struct{ mmio.UM32 }

func (rm HCDMA_Mask) Load() HCDMA_Bits   { return HCDMA_Bits(rm.UM32.Load()) }
func (rm HCDMA_Mask) Store(b HCDMA_Bits) { rm.UM32.Store(uint32(b)) }
