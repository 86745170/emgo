// +build l476xx

package rcc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type RCC_Periph struct {
	CR          CR
	ICSCR       ICSCR
	CFGR        CFGR
	PLLCFGR     PLLCFGR
	PLLSAI1CFGR PLLSAI1CFGR
	PLLSAI2CFGR PLLSAI2CFGR
	CIER        CIER
	CIFR        CIFR
	CICR        CICR
	_           uint32
	AHB1RSTR    AHB1RSTR
	AHB2RSTR    AHB2RSTR
	AHB3RSTR    AHB3RSTR
	_           uint32
	APB1RSTR1   APB1RSTR1
	APB1RSTR2   APB1RSTR2
	APB2RSTR    APB2RSTR
	_           uint32
	AHB1ENR     AHB1ENR
	AHB2ENR     AHB2ENR
	AHB3ENR     AHB3ENR
	_           uint32
	APB1ENR1    APB1ENR1
	APB1ENR2    APB1ENR2
	APB2ENR     APB2ENR
	_           uint32
	AHB1SMENR   AHB1SMENR
	AHB2SMENR   AHB2SMENR
	AHB3SMENR   AHB3SMENR
	_           uint32
	APB1SMENR1  APB1SMENR1
	APB1SMENR2  APB1SMENR2
	APB2SMENR   APB2SMENR
	_           uint32
	CCIPR       CCIPR
	_           uint32
	BDCR        BDCR
	CSR         CSR
}

func (p *RCC_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var RCC = (*RCC_Periph)(unsafe.Pointer(uintptr(mmap.RCC_BASE)))

type CR_Bits uint32

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR_Bits) J(v int) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}

type CR struct{ mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.U32.Load()) }
func (r *CR) Store(b CR_Bits)           { r.U32.Store(uint32(b)) }

func (r *CR) AtomicSetBits(mask CR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CR) AtomicClearBits(mask CR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CR_Mask struct{ mmio.UM32 }

func (rm CR_Mask) Load() CR_Bits   { return CR_Bits(rm.UM32.Load()) }
func (rm CR_Mask) Store(b CR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) MSION() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(MSION)}}
}

func (p *RCC_Periph) MSIRDY() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(MSIRDY)}}
}

func (p *RCC_Periph) MSIPLLEN() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(MSIPLLEN)}}
}

func (p *RCC_Periph) MSIRGSEL() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(MSIRGSEL)}}
}

func (p *RCC_Periph) MSIRANGE() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(MSIRANGE)}}
}

func (p *RCC_Periph) HSION() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(HSION)}}
}

func (p *RCC_Periph) HSIKERON() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(HSIKERON)}}
}

func (p *RCC_Periph) HSIRDY() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(HSIRDY)}}
}

func (p *RCC_Periph) HSIASFS() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(HSIASFS)}}
}

func (p *RCC_Periph) HSEON() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(HSEON)}}
}

func (p *RCC_Periph) HSERDY() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(HSERDY)}}
}

func (p *RCC_Periph) HSEBYP() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(HSEBYP)}}
}

func (p *RCC_Periph) CSSON() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(CSSON)}}
}

func (p *RCC_Periph) PLLON() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(PLLON)}}
}

func (p *RCC_Periph) PLLRDY() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(PLLRDY)}}
}

func (p *RCC_Periph) PLLSAI1ON() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(PLLSAI1ON)}}
}

func (p *RCC_Periph) PLLSAI1RDY() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(PLLSAI1RDY)}}
}

func (p *RCC_Periph) PLLSAI2ON() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(PLLSAI2ON)}}
}

func (p *RCC_Periph) PLLSAI2RDY() CR_Mask {
	return CR_Mask{mmio.UM32{&p.CR.U32, uint32(PLLSAI2RDY)}}
}

type ICSCR_Bits uint32

func (b ICSCR_Bits) Field(mask ICSCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICSCR_Bits) J(v int) ICSCR_Bits {
	return ICSCR_Bits(bits.Make32(v, uint32(mask)))
}

type ICSCR struct{ mmio.U32 }

func (r *ICSCR) Bits(mask ICSCR_Bits) ICSCR_Bits { return ICSCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ICSCR) StoreBits(mask, b ICSCR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ICSCR) SetBits(mask ICSCR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *ICSCR) ClearBits(mask ICSCR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *ICSCR) Load() ICSCR_Bits                { return ICSCR_Bits(r.U32.Load()) }
func (r *ICSCR) Store(b ICSCR_Bits)              { r.U32.Store(uint32(b)) }

func (r *ICSCR) AtomicSetBits(mask ICSCR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *ICSCR) AtomicClearBits(mask ICSCR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type ICSCR_Mask struct{ mmio.UM32 }

func (rm ICSCR_Mask) Load() ICSCR_Bits   { return ICSCR_Bits(rm.UM32.Load()) }
func (rm ICSCR_Mask) Store(b ICSCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) MSICAL() ICSCR_Mask {
	return ICSCR_Mask{mmio.UM32{&p.ICSCR.U32, uint32(MSICAL)}}
}

func (p *RCC_Periph) MSITRIM() ICSCR_Mask {
	return ICSCR_Mask{mmio.UM32{&p.ICSCR.U32, uint32(MSITRIM)}}
}

func (p *RCC_Periph) HSICAL() ICSCR_Mask {
	return ICSCR_Mask{mmio.UM32{&p.ICSCR.U32, uint32(HSICAL)}}
}

func (p *RCC_Periph) HSITRIM() ICSCR_Mask {
	return ICSCR_Mask{mmio.UM32{&p.ICSCR.U32, uint32(HSITRIM)}}
}

type CFGR_Bits uint32

func (b CFGR_Bits) Field(mask CFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR_Bits) J(v int) CFGR_Bits {
	return CFGR_Bits(bits.Make32(v, uint32(mask)))
}

type CFGR struct{ mmio.U32 }

func (r *CFGR) Bits(mask CFGR_Bits) CFGR_Bits { return CFGR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CFGR) StoreBits(mask, b CFGR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CFGR) SetBits(mask CFGR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *CFGR) ClearBits(mask CFGR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *CFGR) Load() CFGR_Bits               { return CFGR_Bits(r.U32.Load()) }
func (r *CFGR) Store(b CFGR_Bits)             { r.U32.Store(uint32(b)) }

func (r *CFGR) AtomicSetBits(mask CFGR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CFGR) AtomicClearBits(mask CFGR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CFGR_Mask struct{ mmio.UM32 }

func (rm CFGR_Mask) Load() CFGR_Bits   { return CFGR_Bits(rm.UM32.Load()) }
func (rm CFGR_Mask) Store(b CFGR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SW() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(SW)}}
}

func (p *RCC_Periph) SWS() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(SWS)}}
}

func (p *RCC_Periph) HPRE() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(HPRE)}}
}

func (p *RCC_Periph) PPRE1() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(PPRE1)}}
}

func (p *RCC_Periph) PPRE2() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(PPRE2)}}
}

func (p *RCC_Periph) STOPWUCK() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(STOPWUCK)}}
}

func (p *RCC_Periph) MCOSEL() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(MCOSEL)}}
}

func (p *RCC_Periph) MCOPRE() CFGR_Mask {
	return CFGR_Mask{mmio.UM32{&p.CFGR.U32, uint32(MCOPRE)}}
}

type PLLCFGR_Bits uint32

func (b PLLCFGR_Bits) Field(mask PLLCFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLCFGR_Bits) J(v int) PLLCFGR_Bits {
	return PLLCFGR_Bits(bits.Make32(v, uint32(mask)))
}

type PLLCFGR struct{ mmio.U32 }

func (r *PLLCFGR) Bits(mask PLLCFGR_Bits) PLLCFGR_Bits { return PLLCFGR_Bits(r.U32.Bits(uint32(mask))) }
func (r *PLLCFGR) StoreBits(mask, b PLLCFGR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *PLLCFGR) SetBits(mask PLLCFGR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *PLLCFGR) ClearBits(mask PLLCFGR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *PLLCFGR) Load() PLLCFGR_Bits                  { return PLLCFGR_Bits(r.U32.Load()) }
func (r *PLLCFGR) Store(b PLLCFGR_Bits)                { r.U32.Store(uint32(b)) }

func (r *PLLCFGR) AtomicSetBits(mask PLLCFGR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *PLLCFGR) AtomicClearBits(mask PLLCFGR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type PLLCFGR_Mask struct{ mmio.UM32 }

func (rm PLLCFGR_Mask) Load() PLLCFGR_Bits   { return PLLCFGR_Bits(rm.UM32.Load()) }
func (rm PLLCFGR_Mask) Store(b PLLCFGR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) PLLSRC() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLSRC)}}
}

func (p *RCC_Periph) PLLM() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLM)}}
}

func (p *RCC_Periph) PLLN() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLN)}}
}

func (p *RCC_Periph) PLLPEN() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLPEN)}}
}

func (p *RCC_Periph) PLLP() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLP)}}
}

func (p *RCC_Periph) PLLQEN() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLQEN)}}
}

func (p *RCC_Periph) PLLQ() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLQ)}}
}

func (p *RCC_Periph) PLLREN() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLREN)}}
}

func (p *RCC_Periph) PLLR() PLLCFGR_Mask {
	return PLLCFGR_Mask{mmio.UM32{&p.PLLCFGR.U32, uint32(PLLR)}}
}

type PLLSAI1CFGR_Bits uint32

func (b PLLSAI1CFGR_Bits) Field(mask PLLSAI1CFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLSAI1CFGR_Bits) J(v int) PLLSAI1CFGR_Bits {
	return PLLSAI1CFGR_Bits(bits.Make32(v, uint32(mask)))
}

type PLLSAI1CFGR struct{ mmio.U32 }

func (r *PLLSAI1CFGR) Bits(mask PLLSAI1CFGR_Bits) PLLSAI1CFGR_Bits {
	return PLLSAI1CFGR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *PLLSAI1CFGR) StoreBits(mask, b PLLSAI1CFGR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *PLLSAI1CFGR) SetBits(mask PLLSAI1CFGR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *PLLSAI1CFGR) ClearBits(mask PLLSAI1CFGR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *PLLSAI1CFGR) Load() PLLSAI1CFGR_Bits             { return PLLSAI1CFGR_Bits(r.U32.Load()) }
func (r *PLLSAI1CFGR) Store(b PLLSAI1CFGR_Bits)           { r.U32.Store(uint32(b)) }

func (r *PLLSAI1CFGR) AtomicSetBits(mask PLLSAI1CFGR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *PLLSAI1CFGR) AtomicClearBits(mask PLLSAI1CFGR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type PLLSAI1CFGR_Mask struct{ mmio.UM32 }

func (rm PLLSAI1CFGR_Mask) Load() PLLSAI1CFGR_Bits   { return PLLSAI1CFGR_Bits(rm.UM32.Load()) }
func (rm PLLSAI1CFGR_Mask) Store(b PLLSAI1CFGR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) PLLSAI1N() PLLSAI1CFGR_Mask {
	return PLLSAI1CFGR_Mask{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1N)}}
}

func (p *RCC_Periph) PLLSAI1PEN() PLLSAI1CFGR_Mask {
	return PLLSAI1CFGR_Mask{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1PEN)}}
}

func (p *RCC_Periph) PLLSAI1P() PLLSAI1CFGR_Mask {
	return PLLSAI1CFGR_Mask{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1P)}}
}

func (p *RCC_Periph) PLLSAI1QEN() PLLSAI1CFGR_Mask {
	return PLLSAI1CFGR_Mask{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1QEN)}}
}

func (p *RCC_Periph) PLLSAI1Q() PLLSAI1CFGR_Mask {
	return PLLSAI1CFGR_Mask{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1Q)}}
}

func (p *RCC_Periph) PLLSAI1REN() PLLSAI1CFGR_Mask {
	return PLLSAI1CFGR_Mask{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1REN)}}
}

func (p *RCC_Periph) PLLSAI1R() PLLSAI1CFGR_Mask {
	return PLLSAI1CFGR_Mask{mmio.UM32{&p.PLLSAI1CFGR.U32, uint32(PLLSAI1R)}}
}

type PLLSAI2CFGR_Bits uint32

func (b PLLSAI2CFGR_Bits) Field(mask PLLSAI2CFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLSAI2CFGR_Bits) J(v int) PLLSAI2CFGR_Bits {
	return PLLSAI2CFGR_Bits(bits.Make32(v, uint32(mask)))
}

type PLLSAI2CFGR struct{ mmio.U32 }

func (r *PLLSAI2CFGR) Bits(mask PLLSAI2CFGR_Bits) PLLSAI2CFGR_Bits {
	return PLLSAI2CFGR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *PLLSAI2CFGR) StoreBits(mask, b PLLSAI2CFGR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *PLLSAI2CFGR) SetBits(mask PLLSAI2CFGR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *PLLSAI2CFGR) ClearBits(mask PLLSAI2CFGR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *PLLSAI2CFGR) Load() PLLSAI2CFGR_Bits             { return PLLSAI2CFGR_Bits(r.U32.Load()) }
func (r *PLLSAI2CFGR) Store(b PLLSAI2CFGR_Bits)           { r.U32.Store(uint32(b)) }

func (r *PLLSAI2CFGR) AtomicSetBits(mask PLLSAI2CFGR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *PLLSAI2CFGR) AtomicClearBits(mask PLLSAI2CFGR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type PLLSAI2CFGR_Mask struct{ mmio.UM32 }

func (rm PLLSAI2CFGR_Mask) Load() PLLSAI2CFGR_Bits   { return PLLSAI2CFGR_Bits(rm.UM32.Load()) }
func (rm PLLSAI2CFGR_Mask) Store(b PLLSAI2CFGR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) PLLSAI2N() PLLSAI2CFGR_Mask {
	return PLLSAI2CFGR_Mask{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2N)}}
}

func (p *RCC_Periph) PLLSAI2PEN() PLLSAI2CFGR_Mask {
	return PLLSAI2CFGR_Mask{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2PEN)}}
}

func (p *RCC_Periph) PLLSAI2P() PLLSAI2CFGR_Mask {
	return PLLSAI2CFGR_Mask{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2P)}}
}

func (p *RCC_Periph) PLLSAI2REN() PLLSAI2CFGR_Mask {
	return PLLSAI2CFGR_Mask{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2REN)}}
}

func (p *RCC_Periph) PLLSAI2R() PLLSAI2CFGR_Mask {
	return PLLSAI2CFGR_Mask{mmio.UM32{&p.PLLSAI2CFGR.U32, uint32(PLLSAI2R)}}
}

type CIER_Bits uint32

func (b CIER_Bits) Field(mask CIER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CIER_Bits) J(v int) CIER_Bits {
	return CIER_Bits(bits.Make32(v, uint32(mask)))
}

type CIER struct{ mmio.U32 }

func (r *CIER) Bits(mask CIER_Bits) CIER_Bits { return CIER_Bits(r.U32.Bits(uint32(mask))) }
func (r *CIER) StoreBits(mask, b CIER_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CIER) SetBits(mask CIER_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *CIER) ClearBits(mask CIER_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *CIER) Load() CIER_Bits               { return CIER_Bits(r.U32.Load()) }
func (r *CIER) Store(b CIER_Bits)             { r.U32.Store(uint32(b)) }

func (r *CIER) AtomicSetBits(mask CIER_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CIER) AtomicClearBits(mask CIER_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CIER_Mask struct{ mmio.UM32 }

func (rm CIER_Mask) Load() CIER_Bits   { return CIER_Bits(rm.UM32.Load()) }
func (rm CIER_Mask) Store(b CIER_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSIRDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(LSIRDYIE)}}
}

func (p *RCC_Periph) LSERDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(LSERDYIE)}}
}

func (p *RCC_Periph) MSIRDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(MSIRDYIE)}}
}

func (p *RCC_Periph) HSIRDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(HSIRDYIE)}}
}

func (p *RCC_Periph) HSERDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(HSERDYIE)}}
}

func (p *RCC_Periph) PLLRDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(PLLRDYIE)}}
}

func (p *RCC_Periph) PLLSAI1RDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(PLLSAI1RDYIE)}}
}

func (p *RCC_Periph) PLLSAI2RDYIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(PLLSAI2RDYIE)}}
}

func (p *RCC_Periph) LSECSSIE() CIER_Mask {
	return CIER_Mask{mmio.UM32{&p.CIER.U32, uint32(LSECSSIE)}}
}

type CIFR_Bits uint32

func (b CIFR_Bits) Field(mask CIFR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CIFR_Bits) J(v int) CIFR_Bits {
	return CIFR_Bits(bits.Make32(v, uint32(mask)))
}

type CIFR struct{ mmio.U32 }

func (r *CIFR) Bits(mask CIFR_Bits) CIFR_Bits { return CIFR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CIFR) StoreBits(mask, b CIFR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CIFR) SetBits(mask CIFR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *CIFR) ClearBits(mask CIFR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *CIFR) Load() CIFR_Bits               { return CIFR_Bits(r.U32.Load()) }
func (r *CIFR) Store(b CIFR_Bits)             { r.U32.Store(uint32(b)) }

func (r *CIFR) AtomicSetBits(mask CIFR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CIFR) AtomicClearBits(mask CIFR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CIFR_Mask struct{ mmio.UM32 }

func (rm CIFR_Mask) Load() CIFR_Bits   { return CIFR_Bits(rm.UM32.Load()) }
func (rm CIFR_Mask) Store(b CIFR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSIRDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(LSIRDYF)}}
}

func (p *RCC_Periph) LSERDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(LSERDYF)}}
}

func (p *RCC_Periph) MSIRDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(MSIRDYF)}}
}

func (p *RCC_Periph) HSIRDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(HSIRDYF)}}
}

func (p *RCC_Periph) HSERDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(HSERDYF)}}
}

func (p *RCC_Periph) PLLRDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(PLLRDYF)}}
}

func (p *RCC_Periph) PLLSAI1RDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(PLLSAI1RDYF)}}
}

func (p *RCC_Periph) PLLSAI2RDYF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(PLLSAI2RDYF)}}
}

func (p *RCC_Periph) CSSF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(CSSF)}}
}

func (p *RCC_Periph) LSECSSF() CIFR_Mask {
	return CIFR_Mask{mmio.UM32{&p.CIFR.U32, uint32(LSECSSF)}}
}

type CICR_Bits uint32

func (b CICR_Bits) Field(mask CICR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CICR_Bits) J(v int) CICR_Bits {
	return CICR_Bits(bits.Make32(v, uint32(mask)))
}

type CICR struct{ mmio.U32 }

func (r *CICR) Bits(mask CICR_Bits) CICR_Bits { return CICR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CICR) StoreBits(mask, b CICR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CICR) SetBits(mask CICR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *CICR) ClearBits(mask CICR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *CICR) Load() CICR_Bits               { return CICR_Bits(r.U32.Load()) }
func (r *CICR) Store(b CICR_Bits)             { r.U32.Store(uint32(b)) }

func (r *CICR) AtomicSetBits(mask CICR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CICR) AtomicClearBits(mask CICR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CICR_Mask struct{ mmio.UM32 }

func (rm CICR_Mask) Load() CICR_Bits   { return CICR_Bits(rm.UM32.Load()) }
func (rm CICR_Mask) Store(b CICR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSIRDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(LSIRDYC)}}
}

func (p *RCC_Periph) LSERDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(LSERDYC)}}
}

func (p *RCC_Periph) MSIRDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(MSIRDYC)}}
}

func (p *RCC_Periph) HSIRDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(HSIRDYC)}}
}

func (p *RCC_Periph) HSERDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(HSERDYC)}}
}

func (p *RCC_Periph) PLLRDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(PLLRDYC)}}
}

func (p *RCC_Periph) PLLSAI1RDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(PLLSAI1RDYC)}}
}

func (p *RCC_Periph) PLLSAI2RDYC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(PLLSAI2RDYC)}}
}

func (p *RCC_Periph) CSSC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(CSSC)}}
}

func (p *RCC_Periph) LSECSSC() CICR_Mask {
	return CICR_Mask{mmio.UM32{&p.CICR.U32, uint32(LSECSSC)}}
}

type AHB1RSTR_Bits uint32

func (b AHB1RSTR_Bits) Field(mask AHB1RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1RSTR_Bits) J(v int) AHB1RSTR_Bits {
	return AHB1RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB1RSTR struct{ mmio.U32 }

func (r *AHB1RSTR) Bits(mask AHB1RSTR_Bits) AHB1RSTR_Bits {
	return AHB1RSTR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *AHB1RSTR) StoreBits(mask, b AHB1RSTR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB1RSTR) SetBits(mask AHB1RSTR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *AHB1RSTR) ClearBits(mask AHB1RSTR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *AHB1RSTR) Load() AHB1RSTR_Bits             { return AHB1RSTR_Bits(r.U32.Load()) }
func (r *AHB1RSTR) Store(b AHB1RSTR_Bits)           { r.U32.Store(uint32(b)) }

func (r *AHB1RSTR) AtomicSetBits(mask AHB1RSTR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB1RSTR) AtomicClearBits(mask AHB1RSTR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB1RSTR_Mask struct{ mmio.UM32 }

func (rm AHB1RSTR_Mask) Load() AHB1RSTR_Bits   { return AHB1RSTR_Bits(rm.UM32.Load()) }
func (rm AHB1RSTR_Mask) Store(b AHB1RSTR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) DMA1RST() AHB1RSTR_Mask {
	return AHB1RSTR_Mask{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA1RST)}}
}

func (p *RCC_Periph) DMA2RST() AHB1RSTR_Mask {
	return AHB1RSTR_Mask{mmio.UM32{&p.AHB1RSTR.U32, uint32(DMA2RST)}}
}

func (p *RCC_Periph) FLASHRST() AHB1RSTR_Mask {
	return AHB1RSTR_Mask{mmio.UM32{&p.AHB1RSTR.U32, uint32(FLASHRST)}}
}

func (p *RCC_Periph) CRCRST() AHB1RSTR_Mask {
	return AHB1RSTR_Mask{mmio.UM32{&p.AHB1RSTR.U32, uint32(CRCRST)}}
}

func (p *RCC_Periph) TSCRST() AHB1RSTR_Mask {
	return AHB1RSTR_Mask{mmio.UM32{&p.AHB1RSTR.U32, uint32(TSCRST)}}
}

type AHB2RSTR_Bits uint32

func (b AHB2RSTR_Bits) Field(mask AHB2RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2RSTR_Bits) J(v int) AHB2RSTR_Bits {
	return AHB2RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB2RSTR struct{ mmio.U32 }

func (r *AHB2RSTR) Bits(mask AHB2RSTR_Bits) AHB2RSTR_Bits {
	return AHB2RSTR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *AHB2RSTR) StoreBits(mask, b AHB2RSTR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB2RSTR) SetBits(mask AHB2RSTR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *AHB2RSTR) ClearBits(mask AHB2RSTR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *AHB2RSTR) Load() AHB2RSTR_Bits             { return AHB2RSTR_Bits(r.U32.Load()) }
func (r *AHB2RSTR) Store(b AHB2RSTR_Bits)           { r.U32.Store(uint32(b)) }

func (r *AHB2RSTR) AtomicSetBits(mask AHB2RSTR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB2RSTR) AtomicClearBits(mask AHB2RSTR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB2RSTR_Mask struct{ mmio.UM32 }

func (rm AHB2RSTR_Mask) Load() AHB2RSTR_Bits   { return AHB2RSTR_Bits(rm.UM32.Load()) }
func (rm AHB2RSTR_Mask) Store(b AHB2RSTR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) GPIOARST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOARST)}}
}

func (p *RCC_Periph) GPIOBRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOBRST)}}
}

func (p *RCC_Periph) GPIOCRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOCRST)}}
}

func (p *RCC_Periph) GPIODRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIODRST)}}
}

func (p *RCC_Periph) GPIOERST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOERST)}}
}

func (p *RCC_Periph) GPIOFRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOFRST)}}
}

func (p *RCC_Periph) GPIOGRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOGRST)}}
}

func (p *RCC_Periph) GPIOHRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(GPIOHRST)}}
}

func (p *RCC_Periph) OTGFSRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(OTGFSRST)}}
}

func (p *RCC_Periph) ADCRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(ADCRST)}}
}

func (p *RCC_Periph) RNGRST() AHB2RSTR_Mask {
	return AHB2RSTR_Mask{mmio.UM32{&p.AHB2RSTR.U32, uint32(RNGRST)}}
}

type AHB3RSTR_Bits uint32

func (b AHB3RSTR_Bits) Field(mask AHB3RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB3RSTR_Bits) J(v int) AHB3RSTR_Bits {
	return AHB3RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB3RSTR struct{ mmio.U32 }

func (r *AHB3RSTR) Bits(mask AHB3RSTR_Bits) AHB3RSTR_Bits {
	return AHB3RSTR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *AHB3RSTR) StoreBits(mask, b AHB3RSTR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB3RSTR) SetBits(mask AHB3RSTR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *AHB3RSTR) ClearBits(mask AHB3RSTR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *AHB3RSTR) Load() AHB3RSTR_Bits             { return AHB3RSTR_Bits(r.U32.Load()) }
func (r *AHB3RSTR) Store(b AHB3RSTR_Bits)           { r.U32.Store(uint32(b)) }

func (r *AHB3RSTR) AtomicSetBits(mask AHB3RSTR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB3RSTR) AtomicClearBits(mask AHB3RSTR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB3RSTR_Mask struct{ mmio.UM32 }

func (rm AHB3RSTR_Mask) Load() AHB3RSTR_Bits   { return AHB3RSTR_Bits(rm.UM32.Load()) }
func (rm AHB3RSTR_Mask) Store(b AHB3RSTR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) FMCRST() AHB3RSTR_Mask {
	return AHB3RSTR_Mask{mmio.UM32{&p.AHB3RSTR.U32, uint32(FMCRST)}}
}

func (p *RCC_Periph) QSPIRST() AHB3RSTR_Mask {
	return AHB3RSTR_Mask{mmio.UM32{&p.AHB3RSTR.U32, uint32(QSPIRST)}}
}

type APB1RSTR1_Bits uint32

func (b APB1RSTR1_Bits) Field(mask APB1RSTR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1RSTR1_Bits) J(v int) APB1RSTR1_Bits {
	return APB1RSTR1_Bits(bits.Make32(v, uint32(mask)))
}

type APB1RSTR1 struct{ mmio.U32 }

func (r *APB1RSTR1) Bits(mask APB1RSTR1_Bits) APB1RSTR1_Bits {
	return APB1RSTR1_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB1RSTR1) StoreBits(mask, b APB1RSTR1_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1RSTR1) SetBits(mask APB1RSTR1_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB1RSTR1) ClearBits(mask APB1RSTR1_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB1RSTR1) Load() APB1RSTR1_Bits             { return APB1RSTR1_Bits(r.U32.Load()) }
func (r *APB1RSTR1) Store(b APB1RSTR1_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB1RSTR1) AtomicSetBits(mask APB1RSTR1_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB1RSTR1) AtomicClearBits(mask APB1RSTR1_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB1RSTR1_Mask struct{ mmio.UM32 }

func (rm APB1RSTR1_Mask) Load() APB1RSTR1_Bits   { return APB1RSTR1_Bits(rm.UM32.Load()) }
func (rm APB1RSTR1_Mask) Store(b APB1RSTR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) TIM2RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM2RST)}}
}

func (p *RCC_Periph) TIM3RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM3RST)}}
}

func (p *RCC_Periph) TIM4RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM4RST)}}
}

func (p *RCC_Periph) TIM5RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM5RST)}}
}

func (p *RCC_Periph) TIM6RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM6RST)}}
}

func (p *RCC_Periph) TIM7RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(TIM7RST)}}
}

func (p *RCC_Periph) LCDRST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(LCDRST)}}
}

func (p *RCC_Periph) SPI2RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(SPI2RST)}}
}

func (p *RCC_Periph) SPI3RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(SPI3RST)}}
}

func (p *RCC_Periph) USART2RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(USART2RST)}}
}

func (p *RCC_Periph) USART3RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(USART3RST)}}
}

func (p *RCC_Periph) UART4RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(UART4RST)}}
}

func (p *RCC_Periph) UART5RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(UART5RST)}}
}

func (p *RCC_Periph) I2C1RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C1RST)}}
}

func (p *RCC_Periph) I2C2RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C2RST)}}
}

func (p *RCC_Periph) I2C3RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(I2C3RST)}}
}

func (p *RCC_Periph) CAN1RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(CAN1RST)}}
}

func (p *RCC_Periph) PWRRST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(PWRRST)}}
}

func (p *RCC_Periph) DAC1RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(DAC1RST)}}
}

func (p *RCC_Periph) OPAMPRST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(OPAMPRST)}}
}

func (p *RCC_Periph) LPTIM1RST() APB1RSTR1_Mask {
	return APB1RSTR1_Mask{mmio.UM32{&p.APB1RSTR1.U32, uint32(LPTIM1RST)}}
}

type APB1RSTR2_Bits uint32

func (b APB1RSTR2_Bits) Field(mask APB1RSTR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1RSTR2_Bits) J(v int) APB1RSTR2_Bits {
	return APB1RSTR2_Bits(bits.Make32(v, uint32(mask)))
}

type APB1RSTR2 struct{ mmio.U32 }

func (r *APB1RSTR2) Bits(mask APB1RSTR2_Bits) APB1RSTR2_Bits {
	return APB1RSTR2_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB1RSTR2) StoreBits(mask, b APB1RSTR2_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1RSTR2) SetBits(mask APB1RSTR2_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB1RSTR2) ClearBits(mask APB1RSTR2_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB1RSTR2) Load() APB1RSTR2_Bits             { return APB1RSTR2_Bits(r.U32.Load()) }
func (r *APB1RSTR2) Store(b APB1RSTR2_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB1RSTR2) AtomicSetBits(mask APB1RSTR2_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB1RSTR2) AtomicClearBits(mask APB1RSTR2_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB1RSTR2_Mask struct{ mmio.UM32 }

func (rm APB1RSTR2_Mask) Load() APB1RSTR2_Bits   { return APB1RSTR2_Bits(rm.UM32.Load()) }
func (rm APB1RSTR2_Mask) Store(b APB1RSTR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LPUART1RST() APB1RSTR2_Mask {
	return APB1RSTR2_Mask{mmio.UM32{&p.APB1RSTR2.U32, uint32(LPUART1RST)}}
}

func (p *RCC_Periph) SWPMI1RST() APB1RSTR2_Mask {
	return APB1RSTR2_Mask{mmio.UM32{&p.APB1RSTR2.U32, uint32(SWPMI1RST)}}
}

func (p *RCC_Periph) LPTIM2RST() APB1RSTR2_Mask {
	return APB1RSTR2_Mask{mmio.UM32{&p.APB1RSTR2.U32, uint32(LPTIM2RST)}}
}

type APB2RSTR_Bits uint32

func (b APB2RSTR_Bits) Field(mask APB2RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2RSTR_Bits) J(v int) APB2RSTR_Bits {
	return APB2RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type APB2RSTR struct{ mmio.U32 }

func (r *APB2RSTR) Bits(mask APB2RSTR_Bits) APB2RSTR_Bits {
	return APB2RSTR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB2RSTR) StoreBits(mask, b APB2RSTR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB2RSTR) SetBits(mask APB2RSTR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB2RSTR) ClearBits(mask APB2RSTR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB2RSTR) Load() APB2RSTR_Bits             { return APB2RSTR_Bits(r.U32.Load()) }
func (r *APB2RSTR) Store(b APB2RSTR_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB2RSTR) AtomicSetBits(mask APB2RSTR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB2RSTR) AtomicClearBits(mask APB2RSTR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB2RSTR_Mask struct{ mmio.UM32 }

func (rm APB2RSTR_Mask) Load() APB2RSTR_Bits   { return APB2RSTR_Bits(rm.UM32.Load()) }
func (rm APB2RSTR_Mask) Store(b APB2RSTR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SYSCFGRST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(SYSCFGRST)}}
}

func (p *RCC_Periph) SDMMC1RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(SDMMC1RST)}}
}

func (p *RCC_Periph) TIM1RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM1RST)}}
}

func (p *RCC_Periph) SPI1RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(SPI1RST)}}
}

func (p *RCC_Periph) TIM8RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM8RST)}}
}

func (p *RCC_Periph) USART1RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(USART1RST)}}
}

func (p *RCC_Periph) TIM15RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM15RST)}}
}

func (p *RCC_Periph) TIM16RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM16RST)}}
}

func (p *RCC_Periph) TIM17RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(TIM17RST)}}
}

func (p *RCC_Periph) SAI1RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI1RST)}}
}

func (p *RCC_Periph) SAI2RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(SAI2RST)}}
}

func (p *RCC_Periph) DFSDM1RST() APB2RSTR_Mask {
	return APB2RSTR_Mask{mmio.UM32{&p.APB2RSTR.U32, uint32(DFSDM1RST)}}
}

type AHB1ENR_Bits uint32

func (b AHB1ENR_Bits) Field(mask AHB1ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1ENR_Bits) J(v int) AHB1ENR_Bits {
	return AHB1ENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB1ENR struct{ mmio.U32 }

func (r *AHB1ENR) Bits(mask AHB1ENR_Bits) AHB1ENR_Bits { return AHB1ENR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AHB1ENR) StoreBits(mask, b AHB1ENR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB1ENR) SetBits(mask AHB1ENR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *AHB1ENR) ClearBits(mask AHB1ENR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *AHB1ENR) Load() AHB1ENR_Bits                  { return AHB1ENR_Bits(r.U32.Load()) }
func (r *AHB1ENR) Store(b AHB1ENR_Bits)                { r.U32.Store(uint32(b)) }

func (r *AHB1ENR) AtomicSetBits(mask AHB1ENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB1ENR) AtomicClearBits(mask AHB1ENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB1ENR_Mask struct{ mmio.UM32 }

func (rm AHB1ENR_Mask) Load() AHB1ENR_Bits   { return AHB1ENR_Bits(rm.UM32.Load()) }
func (rm AHB1ENR_Mask) Store(b AHB1ENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) DMA1EN() AHB1ENR_Mask {
	return AHB1ENR_Mask{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA1EN)}}
}

func (p *RCC_Periph) DMA2EN() AHB1ENR_Mask {
	return AHB1ENR_Mask{mmio.UM32{&p.AHB1ENR.U32, uint32(DMA2EN)}}
}

func (p *RCC_Periph) FLASHEN() AHB1ENR_Mask {
	return AHB1ENR_Mask{mmio.UM32{&p.AHB1ENR.U32, uint32(FLASHEN)}}
}

func (p *RCC_Periph) CRCEN() AHB1ENR_Mask {
	return AHB1ENR_Mask{mmio.UM32{&p.AHB1ENR.U32, uint32(CRCEN)}}
}

func (p *RCC_Periph) TSCEN() AHB1ENR_Mask {
	return AHB1ENR_Mask{mmio.UM32{&p.AHB1ENR.U32, uint32(TSCEN)}}
}

type AHB2ENR_Bits uint32

func (b AHB2ENR_Bits) Field(mask AHB2ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2ENR_Bits) J(v int) AHB2ENR_Bits {
	return AHB2ENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB2ENR struct{ mmio.U32 }

func (r *AHB2ENR) Bits(mask AHB2ENR_Bits) AHB2ENR_Bits { return AHB2ENR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AHB2ENR) StoreBits(mask, b AHB2ENR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB2ENR) SetBits(mask AHB2ENR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *AHB2ENR) ClearBits(mask AHB2ENR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *AHB2ENR) Load() AHB2ENR_Bits                  { return AHB2ENR_Bits(r.U32.Load()) }
func (r *AHB2ENR) Store(b AHB2ENR_Bits)                { r.U32.Store(uint32(b)) }

func (r *AHB2ENR) AtomicSetBits(mask AHB2ENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB2ENR) AtomicClearBits(mask AHB2ENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB2ENR_Mask struct{ mmio.UM32 }

func (rm AHB2ENR_Mask) Load() AHB2ENR_Bits   { return AHB2ENR_Bits(rm.UM32.Load()) }
func (rm AHB2ENR_Mask) Store(b AHB2ENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) GPIOAEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOAEN)}}
}

func (p *RCC_Periph) GPIOBEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOBEN)}}
}

func (p *RCC_Periph) GPIOCEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOCEN)}}
}

func (p *RCC_Periph) GPIODEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIODEN)}}
}

func (p *RCC_Periph) GPIOEEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOEEN)}}
}

func (p *RCC_Periph) GPIOFEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOFEN)}}
}

func (p *RCC_Periph) GPIOGEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOGEN)}}
}

func (p *RCC_Periph) GPIOHEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(GPIOHEN)}}
}

func (p *RCC_Periph) OTGFSEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(OTGFSEN)}}
}

func (p *RCC_Periph) ADCEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(ADCEN)}}
}

func (p *RCC_Periph) RNGEN() AHB2ENR_Mask {
	return AHB2ENR_Mask{mmio.UM32{&p.AHB2ENR.U32, uint32(RNGEN)}}
}

type AHB3ENR_Bits uint32

func (b AHB3ENR_Bits) Field(mask AHB3ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB3ENR_Bits) J(v int) AHB3ENR_Bits {
	return AHB3ENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB3ENR struct{ mmio.U32 }

func (r *AHB3ENR) Bits(mask AHB3ENR_Bits) AHB3ENR_Bits { return AHB3ENR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AHB3ENR) StoreBits(mask, b AHB3ENR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB3ENR) SetBits(mask AHB3ENR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *AHB3ENR) ClearBits(mask AHB3ENR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *AHB3ENR) Load() AHB3ENR_Bits                  { return AHB3ENR_Bits(r.U32.Load()) }
func (r *AHB3ENR) Store(b AHB3ENR_Bits)                { r.U32.Store(uint32(b)) }

func (r *AHB3ENR) AtomicSetBits(mask AHB3ENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB3ENR) AtomicClearBits(mask AHB3ENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB3ENR_Mask struct{ mmio.UM32 }

func (rm AHB3ENR_Mask) Load() AHB3ENR_Bits   { return AHB3ENR_Bits(rm.UM32.Load()) }
func (rm AHB3ENR_Mask) Store(b AHB3ENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) FMCEN() AHB3ENR_Mask {
	return AHB3ENR_Mask{mmio.UM32{&p.AHB3ENR.U32, uint32(FMCEN)}}
}

func (p *RCC_Periph) QSPIEN() AHB3ENR_Mask {
	return AHB3ENR_Mask{mmio.UM32{&p.AHB3ENR.U32, uint32(QSPIEN)}}
}

type APB1ENR1_Bits uint32

func (b APB1ENR1_Bits) Field(mask APB1ENR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1ENR1_Bits) J(v int) APB1ENR1_Bits {
	return APB1ENR1_Bits(bits.Make32(v, uint32(mask)))
}

type APB1ENR1 struct{ mmio.U32 }

func (r *APB1ENR1) Bits(mask APB1ENR1_Bits) APB1ENR1_Bits {
	return APB1ENR1_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB1ENR1) StoreBits(mask, b APB1ENR1_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1ENR1) SetBits(mask APB1ENR1_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB1ENR1) ClearBits(mask APB1ENR1_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB1ENR1) Load() APB1ENR1_Bits             { return APB1ENR1_Bits(r.U32.Load()) }
func (r *APB1ENR1) Store(b APB1ENR1_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB1ENR1) AtomicSetBits(mask APB1ENR1_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB1ENR1) AtomicClearBits(mask APB1ENR1_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB1ENR1_Mask struct{ mmio.UM32 }

func (rm APB1ENR1_Mask) Load() APB1ENR1_Bits   { return APB1ENR1_Bits(rm.UM32.Load()) }
func (rm APB1ENR1_Mask) Store(b APB1ENR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) TIM2EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM2EN)}}
}

func (p *RCC_Periph) TIM3EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM3EN)}}
}

func (p *RCC_Periph) TIM4EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM4EN)}}
}

func (p *RCC_Periph) TIM5EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM5EN)}}
}

func (p *RCC_Periph) TIM6EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM6EN)}}
}

func (p *RCC_Periph) TIM7EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(TIM7EN)}}
}

func (p *RCC_Periph) LCDEN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(LCDEN)}}
}

func (p *RCC_Periph) WWDGEN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(WWDGEN)}}
}

func (p *RCC_Periph) SPI2EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(SPI2EN)}}
}

func (p *RCC_Periph) SPI3EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(SPI3EN)}}
}

func (p *RCC_Periph) USART2EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(USART2EN)}}
}

func (p *RCC_Periph) USART3EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(USART3EN)}}
}

func (p *RCC_Periph) UART4EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(UART4EN)}}
}

func (p *RCC_Periph) UART5EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(UART5EN)}}
}

func (p *RCC_Periph) I2C1EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C1EN)}}
}

func (p *RCC_Periph) I2C2EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C2EN)}}
}

func (p *RCC_Periph) I2C3EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(I2C3EN)}}
}

func (p *RCC_Periph) CAN1EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(CAN1EN)}}
}

func (p *RCC_Periph) PWREN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(PWREN)}}
}

func (p *RCC_Periph) DAC1EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(DAC1EN)}}
}

func (p *RCC_Periph) OPAMPEN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(OPAMPEN)}}
}

func (p *RCC_Periph) LPTIM1EN() APB1ENR1_Mask {
	return APB1ENR1_Mask{mmio.UM32{&p.APB1ENR1.U32, uint32(LPTIM1EN)}}
}

type APB1ENR2_Bits uint32

func (b APB1ENR2_Bits) Field(mask APB1ENR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1ENR2_Bits) J(v int) APB1ENR2_Bits {
	return APB1ENR2_Bits(bits.Make32(v, uint32(mask)))
}

type APB1ENR2 struct{ mmio.U32 }

func (r *APB1ENR2) Bits(mask APB1ENR2_Bits) APB1ENR2_Bits {
	return APB1ENR2_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB1ENR2) StoreBits(mask, b APB1ENR2_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1ENR2) SetBits(mask APB1ENR2_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB1ENR2) ClearBits(mask APB1ENR2_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB1ENR2) Load() APB1ENR2_Bits             { return APB1ENR2_Bits(r.U32.Load()) }
func (r *APB1ENR2) Store(b APB1ENR2_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB1ENR2) AtomicSetBits(mask APB1ENR2_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB1ENR2) AtomicClearBits(mask APB1ENR2_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB1ENR2_Mask struct{ mmio.UM32 }

func (rm APB1ENR2_Mask) Load() APB1ENR2_Bits   { return APB1ENR2_Bits(rm.UM32.Load()) }
func (rm APB1ENR2_Mask) Store(b APB1ENR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LPUART1EN() APB1ENR2_Mask {
	return APB1ENR2_Mask{mmio.UM32{&p.APB1ENR2.U32, uint32(LPUART1EN)}}
}

func (p *RCC_Periph) SWPMI1EN() APB1ENR2_Mask {
	return APB1ENR2_Mask{mmio.UM32{&p.APB1ENR2.U32, uint32(SWPMI1EN)}}
}

func (p *RCC_Periph) LPTIM2EN() APB1ENR2_Mask {
	return APB1ENR2_Mask{mmio.UM32{&p.APB1ENR2.U32, uint32(LPTIM2EN)}}
}

type APB2ENR_Bits uint32

func (b APB2ENR_Bits) Field(mask APB2ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2ENR_Bits) J(v int) APB2ENR_Bits {
	return APB2ENR_Bits(bits.Make32(v, uint32(mask)))
}

type APB2ENR struct{ mmio.U32 }

func (r *APB2ENR) Bits(mask APB2ENR_Bits) APB2ENR_Bits { return APB2ENR_Bits(r.U32.Bits(uint32(mask))) }
func (r *APB2ENR) StoreBits(mask, b APB2ENR_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB2ENR) SetBits(mask APB2ENR_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *APB2ENR) ClearBits(mask APB2ENR_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *APB2ENR) Load() APB2ENR_Bits                  { return APB2ENR_Bits(r.U32.Load()) }
func (r *APB2ENR) Store(b APB2ENR_Bits)                { r.U32.Store(uint32(b)) }

func (r *APB2ENR) AtomicSetBits(mask APB2ENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB2ENR) AtomicClearBits(mask APB2ENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB2ENR_Mask struct{ mmio.UM32 }

func (rm APB2ENR_Mask) Load() APB2ENR_Bits   { return APB2ENR_Bits(rm.UM32.Load()) }
func (rm APB2ENR_Mask) Store(b APB2ENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SYSCFGEN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(SYSCFGEN)}}
}

func (p *RCC_Periph) FWEN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(FWEN)}}
}

func (p *RCC_Periph) SDMMC1EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(SDMMC1EN)}}
}

func (p *RCC_Periph) TIM1EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(TIM1EN)}}
}

func (p *RCC_Periph) SPI1EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(SPI1EN)}}
}

func (p *RCC_Periph) TIM8EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(TIM8EN)}}
}

func (p *RCC_Periph) USART1EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(USART1EN)}}
}

func (p *RCC_Periph) TIM15EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(TIM15EN)}}
}

func (p *RCC_Periph) TIM16EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(TIM16EN)}}
}

func (p *RCC_Periph) TIM17EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(TIM17EN)}}
}

func (p *RCC_Periph) SAI1EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(SAI1EN)}}
}

func (p *RCC_Periph) SAI2EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(SAI2EN)}}
}

func (p *RCC_Periph) DFSDM1EN() APB2ENR_Mask {
	return APB2ENR_Mask{mmio.UM32{&p.APB2ENR.U32, uint32(DFSDM1EN)}}
}

type AHB1SMENR_Bits uint32

func (b AHB1SMENR_Bits) Field(mask AHB1SMENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1SMENR_Bits) J(v int) AHB1SMENR_Bits {
	return AHB1SMENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB1SMENR struct{ mmio.U32 }

func (r *AHB1SMENR) Bits(mask AHB1SMENR_Bits) AHB1SMENR_Bits {
	return AHB1SMENR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *AHB1SMENR) StoreBits(mask, b AHB1SMENR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB1SMENR) SetBits(mask AHB1SMENR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *AHB1SMENR) ClearBits(mask AHB1SMENR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *AHB1SMENR) Load() AHB1SMENR_Bits             { return AHB1SMENR_Bits(r.U32.Load()) }
func (r *AHB1SMENR) Store(b AHB1SMENR_Bits)           { r.U32.Store(uint32(b)) }

func (r *AHB1SMENR) AtomicSetBits(mask AHB1SMENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB1SMENR) AtomicClearBits(mask AHB1SMENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB1SMENR_Mask struct{ mmio.UM32 }

func (rm AHB1SMENR_Mask) Load() AHB1SMENR_Bits   { return AHB1SMENR_Bits(rm.UM32.Load()) }
func (rm AHB1SMENR_Mask) Store(b AHB1SMENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) DMA1SMEN() AHB1SMENR_Mask {
	return AHB1SMENR_Mask{mmio.UM32{&p.AHB1SMENR.U32, uint32(DMA1SMEN)}}
}

func (p *RCC_Periph) DMA2SMEN() AHB1SMENR_Mask {
	return AHB1SMENR_Mask{mmio.UM32{&p.AHB1SMENR.U32, uint32(DMA2SMEN)}}
}

func (p *RCC_Periph) FLASHSMEN() AHB1SMENR_Mask {
	return AHB1SMENR_Mask{mmio.UM32{&p.AHB1SMENR.U32, uint32(FLASHSMEN)}}
}

func (p *RCC_Periph) SRAM1SMEN() AHB1SMENR_Mask {
	return AHB1SMENR_Mask{mmio.UM32{&p.AHB1SMENR.U32, uint32(SRAM1SMEN)}}
}

func (p *RCC_Periph) CRCSMEN() AHB1SMENR_Mask {
	return AHB1SMENR_Mask{mmio.UM32{&p.AHB1SMENR.U32, uint32(CRCSMEN)}}
}

func (p *RCC_Periph) TSCSMEN() AHB1SMENR_Mask {
	return AHB1SMENR_Mask{mmio.UM32{&p.AHB1SMENR.U32, uint32(TSCSMEN)}}
}

type AHB2SMENR_Bits uint32

func (b AHB2SMENR_Bits) Field(mask AHB2SMENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2SMENR_Bits) J(v int) AHB2SMENR_Bits {
	return AHB2SMENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB2SMENR struct{ mmio.U32 }

func (r *AHB2SMENR) Bits(mask AHB2SMENR_Bits) AHB2SMENR_Bits {
	return AHB2SMENR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *AHB2SMENR) StoreBits(mask, b AHB2SMENR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB2SMENR) SetBits(mask AHB2SMENR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *AHB2SMENR) ClearBits(mask AHB2SMENR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *AHB2SMENR) Load() AHB2SMENR_Bits             { return AHB2SMENR_Bits(r.U32.Load()) }
func (r *AHB2SMENR) Store(b AHB2SMENR_Bits)           { r.U32.Store(uint32(b)) }

func (r *AHB2SMENR) AtomicSetBits(mask AHB2SMENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB2SMENR) AtomicClearBits(mask AHB2SMENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB2SMENR_Mask struct{ mmio.UM32 }

func (rm AHB2SMENR_Mask) Load() AHB2SMENR_Bits   { return AHB2SMENR_Bits(rm.UM32.Load()) }
func (rm AHB2SMENR_Mask) Store(b AHB2SMENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) GPIOASMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOASMEN)}}
}

func (p *RCC_Periph) GPIOBSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOBSMEN)}}
}

func (p *RCC_Periph) GPIOCSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOCSMEN)}}
}

func (p *RCC_Periph) GPIODSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIODSMEN)}}
}

func (p *RCC_Periph) GPIOESMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOESMEN)}}
}

func (p *RCC_Periph) GPIOFSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOFSMEN)}}
}

func (p *RCC_Periph) GPIOGSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOGSMEN)}}
}

func (p *RCC_Periph) GPIOHSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(GPIOHSMEN)}}
}

func (p *RCC_Periph) SRAM2SMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(SRAM2SMEN)}}
}

func (p *RCC_Periph) OTGFSSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(OTGFSSMEN)}}
}

func (p *RCC_Periph) ADCSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(ADCSMEN)}}
}

func (p *RCC_Periph) RNGSMEN() AHB2SMENR_Mask {
	return AHB2SMENR_Mask{mmio.UM32{&p.AHB2SMENR.U32, uint32(RNGSMEN)}}
}

type AHB3SMENR_Bits uint32

func (b AHB3SMENR_Bits) Field(mask AHB3SMENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB3SMENR_Bits) J(v int) AHB3SMENR_Bits {
	return AHB3SMENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB3SMENR struct{ mmio.U32 }

func (r *AHB3SMENR) Bits(mask AHB3SMENR_Bits) AHB3SMENR_Bits {
	return AHB3SMENR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *AHB3SMENR) StoreBits(mask, b AHB3SMENR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB3SMENR) SetBits(mask AHB3SMENR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *AHB3SMENR) ClearBits(mask AHB3SMENR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *AHB3SMENR) Load() AHB3SMENR_Bits             { return AHB3SMENR_Bits(r.U32.Load()) }
func (r *AHB3SMENR) Store(b AHB3SMENR_Bits)           { r.U32.Store(uint32(b)) }

func (r *AHB3SMENR) AtomicSetBits(mask AHB3SMENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *AHB3SMENR) AtomicClearBits(mask AHB3SMENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type AHB3SMENR_Mask struct{ mmio.UM32 }

func (rm AHB3SMENR_Mask) Load() AHB3SMENR_Bits   { return AHB3SMENR_Bits(rm.UM32.Load()) }
func (rm AHB3SMENR_Mask) Store(b AHB3SMENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) FMCSMEN() AHB3SMENR_Mask {
	return AHB3SMENR_Mask{mmio.UM32{&p.AHB3SMENR.U32, uint32(FMCSMEN)}}
}

func (p *RCC_Periph) QSPISMEN() AHB3SMENR_Mask {
	return AHB3SMENR_Mask{mmio.UM32{&p.AHB3SMENR.U32, uint32(QSPISMEN)}}
}

type APB1SMENR1_Bits uint32

func (b APB1SMENR1_Bits) Field(mask APB1SMENR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1SMENR1_Bits) J(v int) APB1SMENR1_Bits {
	return APB1SMENR1_Bits(bits.Make32(v, uint32(mask)))
}

type APB1SMENR1 struct{ mmio.U32 }

func (r *APB1SMENR1) Bits(mask APB1SMENR1_Bits) APB1SMENR1_Bits {
	return APB1SMENR1_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB1SMENR1) StoreBits(mask, b APB1SMENR1_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1SMENR1) SetBits(mask APB1SMENR1_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB1SMENR1) ClearBits(mask APB1SMENR1_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB1SMENR1) Load() APB1SMENR1_Bits             { return APB1SMENR1_Bits(r.U32.Load()) }
func (r *APB1SMENR1) Store(b APB1SMENR1_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB1SMENR1) AtomicSetBits(mask APB1SMENR1_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB1SMENR1) AtomicClearBits(mask APB1SMENR1_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB1SMENR1_Mask struct{ mmio.UM32 }

func (rm APB1SMENR1_Mask) Load() APB1SMENR1_Bits   { return APB1SMENR1_Bits(rm.UM32.Load()) }
func (rm APB1SMENR1_Mask) Store(b APB1SMENR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) TIM2SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM2SMEN)}}
}

func (p *RCC_Periph) TIM3SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM3SMEN)}}
}

func (p *RCC_Periph) TIM4SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM4SMEN)}}
}

func (p *RCC_Periph) TIM5SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM5SMEN)}}
}

func (p *RCC_Periph) TIM6SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM6SMEN)}}
}

func (p *RCC_Periph) TIM7SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(TIM7SMEN)}}
}

func (p *RCC_Periph) LCDSMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(LCDSMEN)}}
}

func (p *RCC_Periph) WWDGSMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(WWDGSMEN)}}
}

func (p *RCC_Periph) SPI2SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(SPI2SMEN)}}
}

func (p *RCC_Periph) SPI3SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(SPI3SMEN)}}
}

func (p *RCC_Periph) USART2SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(USART2SMEN)}}
}

func (p *RCC_Periph) USART3SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(USART3SMEN)}}
}

func (p *RCC_Periph) UART4SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(UART4SMEN)}}
}

func (p *RCC_Periph) UART5SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(UART5SMEN)}}
}

func (p *RCC_Periph) I2C1SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C1SMEN)}}
}

func (p *RCC_Periph) I2C2SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C2SMEN)}}
}

func (p *RCC_Periph) I2C3SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(I2C3SMEN)}}
}

func (p *RCC_Periph) CAN1SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(CAN1SMEN)}}
}

func (p *RCC_Periph) PWRSMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(PWRSMEN)}}
}

func (p *RCC_Periph) DAC1SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(DAC1SMEN)}}
}

func (p *RCC_Periph) OPAMPSMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(OPAMPSMEN)}}
}

func (p *RCC_Periph) LPTIM1SMEN() APB1SMENR1_Mask {
	return APB1SMENR1_Mask{mmio.UM32{&p.APB1SMENR1.U32, uint32(LPTIM1SMEN)}}
}

type APB1SMENR2_Bits uint32

func (b APB1SMENR2_Bits) Field(mask APB1SMENR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1SMENR2_Bits) J(v int) APB1SMENR2_Bits {
	return APB1SMENR2_Bits(bits.Make32(v, uint32(mask)))
}

type APB1SMENR2 struct{ mmio.U32 }

func (r *APB1SMENR2) Bits(mask APB1SMENR2_Bits) APB1SMENR2_Bits {
	return APB1SMENR2_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB1SMENR2) StoreBits(mask, b APB1SMENR2_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1SMENR2) SetBits(mask APB1SMENR2_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB1SMENR2) ClearBits(mask APB1SMENR2_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB1SMENR2) Load() APB1SMENR2_Bits             { return APB1SMENR2_Bits(r.U32.Load()) }
func (r *APB1SMENR2) Store(b APB1SMENR2_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB1SMENR2) AtomicSetBits(mask APB1SMENR2_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB1SMENR2) AtomicClearBits(mask APB1SMENR2_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB1SMENR2_Mask struct{ mmio.UM32 }

func (rm APB1SMENR2_Mask) Load() APB1SMENR2_Bits   { return APB1SMENR2_Bits(rm.UM32.Load()) }
func (rm APB1SMENR2_Mask) Store(b APB1SMENR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LPUART1SMEN() APB1SMENR2_Mask {
	return APB1SMENR2_Mask{mmio.UM32{&p.APB1SMENR2.U32, uint32(LPUART1SMEN)}}
}

func (p *RCC_Periph) SWPMI1SMEN() APB1SMENR2_Mask {
	return APB1SMENR2_Mask{mmio.UM32{&p.APB1SMENR2.U32, uint32(SWPMI1SMEN)}}
}

func (p *RCC_Periph) LPTIM2SMEN() APB1SMENR2_Mask {
	return APB1SMENR2_Mask{mmio.UM32{&p.APB1SMENR2.U32, uint32(LPTIM2SMEN)}}
}

type APB2SMENR_Bits uint32

func (b APB2SMENR_Bits) Field(mask APB2SMENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2SMENR_Bits) J(v int) APB2SMENR_Bits {
	return APB2SMENR_Bits(bits.Make32(v, uint32(mask)))
}

type APB2SMENR struct{ mmio.U32 }

func (r *APB2SMENR) Bits(mask APB2SMENR_Bits) APB2SMENR_Bits {
	return APB2SMENR_Bits(r.U32.Bits(uint32(mask)))
}
func (r *APB2SMENR) StoreBits(mask, b APB2SMENR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *APB2SMENR) SetBits(mask APB2SMENR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *APB2SMENR) ClearBits(mask APB2SMENR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *APB2SMENR) Load() APB2SMENR_Bits             { return APB2SMENR_Bits(r.U32.Load()) }
func (r *APB2SMENR) Store(b APB2SMENR_Bits)           { r.U32.Store(uint32(b)) }

func (r *APB2SMENR) AtomicSetBits(mask APB2SMENR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *APB2SMENR) AtomicClearBits(mask APB2SMENR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type APB2SMENR_Mask struct{ mmio.UM32 }

func (rm APB2SMENR_Mask) Load() APB2SMENR_Bits   { return APB2SMENR_Bits(rm.UM32.Load()) }
func (rm APB2SMENR_Mask) Store(b APB2SMENR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) SYSCFGSMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(SYSCFGSMEN)}}
}

func (p *RCC_Periph) SDMMC1SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(SDMMC1SMEN)}}
}

func (p *RCC_Periph) TIM1SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM1SMEN)}}
}

func (p *RCC_Periph) SPI1SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(SPI1SMEN)}}
}

func (p *RCC_Periph) TIM8SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM8SMEN)}}
}

func (p *RCC_Periph) USART1SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(USART1SMEN)}}
}

func (p *RCC_Periph) TIM15SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM15SMEN)}}
}

func (p *RCC_Periph) TIM16SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM16SMEN)}}
}

func (p *RCC_Periph) TIM17SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(TIM17SMEN)}}
}

func (p *RCC_Periph) SAI1SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(SAI1SMEN)}}
}

func (p *RCC_Periph) SAI2SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(SAI2SMEN)}}
}

func (p *RCC_Periph) DFSDM1SMEN() APB2SMENR_Mask {
	return APB2SMENR_Mask{mmio.UM32{&p.APB2SMENR.U32, uint32(DFSDM1SMEN)}}
}

type CCIPR_Bits uint32

func (b CCIPR_Bits) Field(mask CCIPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CCIPR_Bits) J(v int) CCIPR_Bits {
	return CCIPR_Bits(bits.Make32(v, uint32(mask)))
}

type CCIPR struct{ mmio.U32 }

func (r *CCIPR) Bits(mask CCIPR_Bits) CCIPR_Bits { return CCIPR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CCIPR) StoreBits(mask, b CCIPR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CCIPR) SetBits(mask CCIPR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *CCIPR) ClearBits(mask CCIPR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *CCIPR) Load() CCIPR_Bits                { return CCIPR_Bits(r.U32.Load()) }
func (r *CCIPR) Store(b CCIPR_Bits)              { r.U32.Store(uint32(b)) }

func (r *CCIPR) AtomicSetBits(mask CCIPR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CCIPR) AtomicClearBits(mask CCIPR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CCIPR_Mask struct{ mmio.UM32 }

func (rm CCIPR_Mask) Load() CCIPR_Bits   { return CCIPR_Bits(rm.UM32.Load()) }
func (rm CCIPR_Mask) Store(b CCIPR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) USART1SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(USART1SEL)}}
}

func (p *RCC_Periph) USART2SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(USART2SEL)}}
}

func (p *RCC_Periph) USART3SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(USART3SEL)}}
}

func (p *RCC_Periph) UART4SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(UART4SEL)}}
}

func (p *RCC_Periph) UART5SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(UART5SEL)}}
}

func (p *RCC_Periph) LPUART1SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(LPUART1SEL)}}
}

func (p *RCC_Periph) I2C1SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(I2C1SEL)}}
}

func (p *RCC_Periph) I2C2SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(I2C2SEL)}}
}

func (p *RCC_Periph) I2C3SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(I2C3SEL)}}
}

func (p *RCC_Periph) LPTIM1SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(LPTIM1SEL)}}
}

func (p *RCC_Periph) LPTIM2SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(LPTIM2SEL)}}
}

func (p *RCC_Periph) SAI1SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(SAI1SEL)}}
}

func (p *RCC_Periph) SAI2SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(SAI2SEL)}}
}

func (p *RCC_Periph) CLK48SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(CLK48SEL)}}
}

func (p *RCC_Periph) ADCSEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(ADCSEL)}}
}

func (p *RCC_Periph) SWPMI1SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(SWPMI1SEL)}}
}

func (p *RCC_Periph) DFSDM1SEL() CCIPR_Mask {
	return CCIPR_Mask{mmio.UM32{&p.CCIPR.U32, uint32(DFSDM1SEL)}}
}

type BDCR_Bits uint32

func (b BDCR_Bits) Field(mask BDCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDCR_Bits) J(v int) BDCR_Bits {
	return BDCR_Bits(bits.Make32(v, uint32(mask)))
}

type BDCR struct{ mmio.U32 }

func (r *BDCR) Bits(mask BDCR_Bits) BDCR_Bits { return BDCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BDCR) StoreBits(mask, b BDCR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BDCR) SetBits(mask BDCR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *BDCR) ClearBits(mask BDCR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *BDCR) Load() BDCR_Bits               { return BDCR_Bits(r.U32.Load()) }
func (r *BDCR) Store(b BDCR_Bits)             { r.U32.Store(uint32(b)) }

func (r *BDCR) AtomicSetBits(mask BDCR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *BDCR) AtomicClearBits(mask BDCR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type BDCR_Mask struct{ mmio.UM32 }

func (rm BDCR_Mask) Load() BDCR_Bits   { return BDCR_Bits(rm.UM32.Load()) }
func (rm BDCR_Mask) Store(b BDCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSEON() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSEON)}}
}

func (p *RCC_Periph) LSERDY() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSERDY)}}
}

func (p *RCC_Periph) LSEBYP() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSEBYP)}}
}

func (p *RCC_Periph) LSEDRV() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSEDRV)}}
}

func (p *RCC_Periph) LSECSSON() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSECSSON)}}
}

func (p *RCC_Periph) LSECSSD() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSECSSD)}}
}

func (p *RCC_Periph) RTCSEL() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(RTCSEL)}}
}

func (p *RCC_Periph) RTCEN() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(RTCEN)}}
}

func (p *RCC_Periph) BDRST() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(BDRST)}}
}

func (p *RCC_Periph) LSCOEN() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSCOEN)}}
}

func (p *RCC_Periph) LSCOSEL() BDCR_Mask {
	return BDCR_Mask{mmio.UM32{&p.BDCR.U32, uint32(LSCOSEL)}}
}

type CSR_Bits uint32

func (b CSR_Bits) Field(mask CSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR_Bits) J(v int) CSR_Bits {
	return CSR_Bits(bits.Make32(v, uint32(mask)))
}

type CSR struct{ mmio.U32 }

func (r *CSR) Bits(mask CSR_Bits) CSR_Bits { return CSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CSR) StoreBits(mask, b CSR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CSR) SetBits(mask CSR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *CSR) ClearBits(mask CSR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *CSR) Load() CSR_Bits              { return CSR_Bits(r.U32.Load()) }
func (r *CSR) Store(b CSR_Bits)            { r.U32.Store(uint32(b)) }

func (r *CSR) AtomicSetBits(mask CSR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *CSR) AtomicClearBits(mask CSR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type CSR_Mask struct{ mmio.UM32 }

func (rm CSR_Mask) Load() CSR_Bits   { return CSR_Bits(rm.UM32.Load()) }
func (rm CSR_Mask) Store(b CSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *RCC_Periph) LSION() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(LSION)}}
}

func (p *RCC_Periph) LSIRDY() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(LSIRDY)}}
}

func (p *RCC_Periph) MSISRANGE() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(MSISRANGE)}}
}

func (p *RCC_Periph) RMVF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(RMVF)}}
}

func (p *RCC_Periph) FWRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(FWRSTF)}}
}

func (p *RCC_Periph) OBLRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(OBLRSTF)}}
}

func (p *RCC_Periph) PINRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(PINRSTF)}}
}

func (p *RCC_Periph) BORRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(BORRSTF)}}
}

func (p *RCC_Periph) SFTRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(SFTRSTF)}}
}

func (p *RCC_Periph) IWDGRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(IWDGRSTF)}}
}

func (p *RCC_Periph) WWDGRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(WWDGRSTF)}}
}

func (p *RCC_Periph) LPWRRSTF() CSR_Mask {
	return CSR_Mask{mmio.UM32{&p.CSR.U32, uint32(LPWRRSTF)}}
}
