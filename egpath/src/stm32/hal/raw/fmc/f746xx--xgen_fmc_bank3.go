// +build f746xx

package fmc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type FMC_Bank3_Periph struct {
	PCR  PCR
	SR   SR
	PMEM PMEM
	PATT PATT
	_    uint32
	ECCR ECCR
}

func (p *FMC_Bank3_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var FMC_Bank3 = (*FMC_Bank3_Periph)(unsafe.Pointer(uintptr(mmap.FMC_Bank3_R_BASE)))

type PCR_Bits uint32

func (b PCR_Bits) Field(mask PCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PCR_Bits) J(v int) PCR_Bits {
	return PCR_Bits(bits.Make32(v, uint32(mask)))
}

type PCR struct{ mmio.U32 }

func (r *PCR) Bits(mask PCR_Bits) PCR_Bits { return PCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *PCR) StoreBits(mask, b PCR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *PCR) SetBits(mask PCR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *PCR) ClearBits(mask PCR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *PCR) Load() PCR_Bits              { return PCR_Bits(r.U32.Load()) }
func (r *PCR) Store(b PCR_Bits)            { r.U32.Store(uint32(b)) }

type PCR_Mask struct{ mmio.UM32 }

func (rm PCR_Mask) Load() PCR_Bits   { return PCR_Bits(rm.UM32.Load()) }
func (rm PCR_Mask) Store(b PCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *FMC_Bank3_Periph) PWAITEN() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(PWAITEN)}}
}

func (p *FMC_Bank3_Periph) PBKEN() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(PBKEN)}}
}

func (p *FMC_Bank3_Periph) PTYP() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(PTYP)}}
}

func (p *FMC_Bank3_Periph) PWID() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(PWID)}}
}

func (p *FMC_Bank3_Periph) ECCEN() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(ECCEN)}}
}

func (p *FMC_Bank3_Periph) TCLR() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(TCLR)}}
}

func (p *FMC_Bank3_Periph) TAR() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(TAR)}}
}

func (p *FMC_Bank3_Periph) ECCPS() PCR_Mask {
	return PCR_Mask{mmio.UM32{&p.PCR.U32, uint32(ECCPS)}}
}

type SR_Bits uint32

func (b SR_Bits) Field(mask SR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SR_Bits) J(v int) SR_Bits {
	return SR_Bits(bits.Make32(v, uint32(mask)))
}

type SR struct{ mmio.U32 }

func (r *SR) Bits(mask SR_Bits) SR_Bits { return SR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SR) StoreBits(mask, b SR_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SR) SetBits(mask SR_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *SR) ClearBits(mask SR_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *SR) Load() SR_Bits             { return SR_Bits(r.U32.Load()) }
func (r *SR) Store(b SR_Bits)           { r.U32.Store(uint32(b)) }

type SR_Mask struct{ mmio.UM32 }

func (rm SR_Mask) Load() SR_Bits   { return SR_Bits(rm.UM32.Load()) }
func (rm SR_Mask) Store(b SR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *FMC_Bank3_Periph) IRS() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(IRS)}}
}

func (p *FMC_Bank3_Periph) ILS() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(ILS)}}
}

func (p *FMC_Bank3_Periph) IFS() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(IFS)}}
}

func (p *FMC_Bank3_Periph) IREN() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(IREN)}}
}

func (p *FMC_Bank3_Periph) ILEN() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(ILEN)}}
}

func (p *FMC_Bank3_Periph) IFEN() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(IFEN)}}
}

func (p *FMC_Bank3_Periph) FEMPT() SR_Mask {
	return SR_Mask{mmio.UM32{&p.SR.U32, uint32(FEMPT)}}
}

type PMEM_Bits uint32

func (b PMEM_Bits) Field(mask PMEM_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PMEM_Bits) J(v int) PMEM_Bits {
	return PMEM_Bits(bits.Make32(v, uint32(mask)))
}

type PMEM struct{ mmio.U32 }

func (r *PMEM) Bits(mask PMEM_Bits) PMEM_Bits { return PMEM_Bits(r.U32.Bits(uint32(mask))) }
func (r *PMEM) StoreBits(mask, b PMEM_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *PMEM) SetBits(mask PMEM_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *PMEM) ClearBits(mask PMEM_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *PMEM) Load() PMEM_Bits               { return PMEM_Bits(r.U32.Load()) }
func (r *PMEM) Store(b PMEM_Bits)             { r.U32.Store(uint32(b)) }

type PMEM_Mask struct{ mmio.UM32 }

func (rm PMEM_Mask) Load() PMEM_Bits   { return PMEM_Bits(rm.UM32.Load()) }
func (rm PMEM_Mask) Store(b PMEM_Bits) { rm.UM32.Store(uint32(b)) }

func (p *FMC_Bank3_Periph) MEMSET3() PMEM_Mask {
	return PMEM_Mask{mmio.UM32{&p.PMEM.U32, uint32(MEMSET3)}}
}

func (p *FMC_Bank3_Periph) MEMWAIT3() PMEM_Mask {
	return PMEM_Mask{mmio.UM32{&p.PMEM.U32, uint32(MEMWAIT3)}}
}

func (p *FMC_Bank3_Periph) MEMHOLD3() PMEM_Mask {
	return PMEM_Mask{mmio.UM32{&p.PMEM.U32, uint32(MEMHOLD3)}}
}

func (p *FMC_Bank3_Periph) MEMHIZ3() PMEM_Mask {
	return PMEM_Mask{mmio.UM32{&p.PMEM.U32, uint32(MEMHIZ3)}}
}

type PATT_Bits uint32

func (b PATT_Bits) Field(mask PATT_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PATT_Bits) J(v int) PATT_Bits {
	return PATT_Bits(bits.Make32(v, uint32(mask)))
}

type PATT struct{ mmio.U32 }

func (r *PATT) Bits(mask PATT_Bits) PATT_Bits { return PATT_Bits(r.U32.Bits(uint32(mask))) }
func (r *PATT) StoreBits(mask, b PATT_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *PATT) SetBits(mask PATT_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *PATT) ClearBits(mask PATT_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *PATT) Load() PATT_Bits               { return PATT_Bits(r.U32.Load()) }
func (r *PATT) Store(b PATT_Bits)             { r.U32.Store(uint32(b)) }

type PATT_Mask struct{ mmio.UM32 }

func (rm PATT_Mask) Load() PATT_Bits   { return PATT_Bits(rm.UM32.Load()) }
func (rm PATT_Mask) Store(b PATT_Bits) { rm.UM32.Store(uint32(b)) }

func (p *FMC_Bank3_Periph) ATTSET3() PATT_Mask {
	return PATT_Mask{mmio.UM32{&p.PATT.U32, uint32(ATTSET3)}}
}

func (p *FMC_Bank3_Periph) ATTWAIT3() PATT_Mask {
	return PATT_Mask{mmio.UM32{&p.PATT.U32, uint32(ATTWAIT3)}}
}

func (p *FMC_Bank3_Periph) ATTHOLD3() PATT_Mask {
	return PATT_Mask{mmio.UM32{&p.PATT.U32, uint32(ATTHOLD3)}}
}

func (p *FMC_Bank3_Periph) ATTHIZ3() PATT_Mask {
	return PATT_Mask{mmio.UM32{&p.PATT.U32, uint32(ATTHIZ3)}}
}

type ECCR_Bits uint32

func (b ECCR_Bits) Field(mask ECCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ECCR_Bits) J(v int) ECCR_Bits {
	return ECCR_Bits(bits.Make32(v, uint32(mask)))
}

type ECCR struct{ mmio.U32 }

func (r *ECCR) Bits(mask ECCR_Bits) ECCR_Bits { return ECCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ECCR) StoreBits(mask, b ECCR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ECCR) SetBits(mask ECCR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *ECCR) ClearBits(mask ECCR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *ECCR) Load() ECCR_Bits               { return ECCR_Bits(r.U32.Load()) }
func (r *ECCR) Store(b ECCR_Bits)             { r.U32.Store(uint32(b)) }

type ECCR_Mask struct{ mmio.UM32 }

func (rm ECCR_Mask) Load() ECCR_Bits   { return ECCR_Bits(rm.UM32.Load()) }
func (rm ECCR_Mask) Store(b ECCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *FMC_Bank3_Periph) ECC3() ECCR_Mask {
	return ECCR_Mask{mmio.UM32{&p.ECCR.U32, uint32(ECC3)}}
}
