// +build f746xx

package fmc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"mmio"
	"unsafe"

	"stm32/o/f746xx/mmap"
)

type FMC_Bank5_6_Periph struct {
	SDCR  [2]SDCR
	SDTR  [2]SDTR
	SDCMR SDCMR
	SDRTR SDRTR
	SDSR  SDSR
}

func (p *FMC_Bank5_6_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var FMC_Bank5_6 = (*FMC_Bank5_6_Periph)(unsafe.Pointer(uintptr(mmap.FMC_Bank5_6_R_BASE)))

type SDCR_Bits uint32

type SDCR struct{ mmio.U32 }

func (r *SDCR) Bits(mask SDCR_Bits) SDCR_Bits { return SDCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SDCR) StoreBits(mask, b SDCR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SDCR) SetBits(mask SDCR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *SDCR) ClearBits(mask SDCR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *SDCR) Load() SDCR_Bits               { return SDCR_Bits(r.U32.Load()) }
func (r *SDCR) Store(b SDCR_Bits)             { r.U32.Store(uint32(b)) }

type SDCR_Mask struct{ mmio.UM32 }

func (rm SDCR_Mask) Load() SDCR_Bits   { return SDCR_Bits(rm.UM32.Load()) }
func (rm SDCR_Mask) Store(b SDCR_Bits) { rm.UM32.Store(uint32(b)) }

type SDTR_Bits uint32

type SDTR struct{ mmio.U32 }

func (r *SDTR) Bits(mask SDTR_Bits) SDTR_Bits { return SDTR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SDTR) StoreBits(mask, b SDTR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SDTR) SetBits(mask SDTR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *SDTR) ClearBits(mask SDTR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *SDTR) Load() SDTR_Bits               { return SDTR_Bits(r.U32.Load()) }
func (r *SDTR) Store(b SDTR_Bits)             { r.U32.Store(uint32(b)) }

type SDTR_Mask struct{ mmio.UM32 }

func (rm SDTR_Mask) Load() SDTR_Bits   { return SDTR_Bits(rm.UM32.Load()) }
func (rm SDTR_Mask) Store(b SDTR_Bits) { rm.UM32.Store(uint32(b)) }

type SDCMR_Bits uint32

type SDCMR struct{ mmio.U32 }

func (r *SDCMR) Bits(mask SDCMR_Bits) SDCMR_Bits { return SDCMR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SDCMR) StoreBits(mask, b SDCMR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SDCMR) SetBits(mask SDCMR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *SDCMR) ClearBits(mask SDCMR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *SDCMR) Load() SDCMR_Bits                { return SDCMR_Bits(r.U32.Load()) }
func (r *SDCMR) Store(b SDCMR_Bits)              { r.U32.Store(uint32(b)) }

type SDCMR_Mask struct{ mmio.UM32 }

func (rm SDCMR_Mask) Load() SDCMR_Bits   { return SDCMR_Bits(rm.UM32.Load()) }
func (rm SDCMR_Mask) Store(b SDCMR_Bits) { rm.UM32.Store(uint32(b)) }

type SDRTR_Bits uint32

type SDRTR struct{ mmio.U32 }

func (r *SDRTR) Bits(mask SDRTR_Bits) SDRTR_Bits { return SDRTR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SDRTR) StoreBits(mask, b SDRTR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SDRTR) SetBits(mask SDRTR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *SDRTR) ClearBits(mask SDRTR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *SDRTR) Load() SDRTR_Bits                { return SDRTR_Bits(r.U32.Load()) }
func (r *SDRTR) Store(b SDRTR_Bits)              { r.U32.Store(uint32(b)) }

type SDRTR_Mask struct{ mmio.UM32 }

func (rm SDRTR_Mask) Load() SDRTR_Bits   { return SDRTR_Bits(rm.UM32.Load()) }
func (rm SDRTR_Mask) Store(b SDRTR_Bits) { rm.UM32.Store(uint32(b)) }

type SDSR_Bits uint32

type SDSR struct{ mmio.U32 }

func (r *SDSR) Bits(mask SDSR_Bits) SDSR_Bits { return SDSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SDSR) StoreBits(mask, b SDSR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SDSR) SetBits(mask SDSR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *SDSR) ClearBits(mask SDSR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *SDSR) Load() SDSR_Bits               { return SDSR_Bits(r.U32.Load()) }
func (r *SDSR) Store(b SDSR_Bits)             { r.U32.Store(uint32(b)) }

type SDSR_Mask struct{ mmio.UM32 }

func (rm SDSR_Mask) Load() SDSR_Bits   { return SDSR_Bits(rm.UM32.Load()) }
func (rm SDSR_Mask) Store(b SDSR_Bits) { rm.UM32.Store(uint32(b)) }
