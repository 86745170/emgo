// +build l1xx_md

package ob

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l1xx_md/mmap"
)

type OB_Periph struct {
	RDP     RRDP
	USER    RUSER
	WRP01   RWRP01
	WRP23   RWRP23
	WRP45   RWRP45
	WRP67   RWRP67
	WRP89   RWRP89
	WRP1011 RWRP1011
	_       [24]uint32
	WRP1213 RWRP1213
	WRP1415 RWRP1415
}

func (p *OB_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var OB = (*OB_Periph)(unsafe.Pointer(uintptr(mmap.OB_BASE)))

type RDP uint32

func (b RDP) Field(mask RDP) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RDP) J(v int) RDP {
	return RDP(bits.Make32(v, uint32(mask)))
}

type RRDP struct{ mmio.U32 }

func (r *RRDP) Bits(mask RDP) RDP     { return RDP(r.U32.Bits(uint32(mask))) }
func (r *RRDP) StoreBits(mask, b RDP) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRDP) SetBits(mask RDP)      { r.U32.SetBits(uint32(mask)) }
func (r *RRDP) ClearBits(mask RDP)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRDP) Load() RDP             { return RDP(r.U32.Load()) }
func (r *RRDP) Store(b RDP)           { r.U32.Store(uint32(b)) }

func (r *RRDP) AtomicStoreBits(mask, b RDP) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RRDP) AtomicSetBits(mask RDP)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RRDP) AtomicClearBits(mask RDP)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMRDP struct{ mmio.UM32 }

func (rm RMRDP) Load() RDP   { return RDP(rm.UM32.Load()) }
func (rm RMRDP) Store(b RDP) { rm.UM32.Store(uint32(b)) }

type USER uint32

func (b USER) Field(mask USER) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask USER) J(v int) USER {
	return USER(bits.Make32(v, uint32(mask)))
}

type RUSER struct{ mmio.U32 }

func (r *RUSER) Bits(mask USER) USER    { return USER(r.U32.Bits(uint32(mask))) }
func (r *RUSER) StoreBits(mask, b USER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RUSER) SetBits(mask USER)      { r.U32.SetBits(uint32(mask)) }
func (r *RUSER) ClearBits(mask USER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RUSER) Load() USER             { return USER(r.U32.Load()) }
func (r *RUSER) Store(b USER)           { r.U32.Store(uint32(b)) }

func (r *RUSER) AtomicStoreBits(mask, b USER) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RUSER) AtomicSetBits(mask USER)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RUSER) AtomicClearBits(mask USER)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMUSER struct{ mmio.UM32 }

func (rm RMUSER) Load() USER   { return USER(rm.UM32.Load()) }
func (rm RMUSER) Store(b USER) { rm.UM32.Store(uint32(b)) }

type WRP01 uint32

func (b WRP01) Field(mask WRP01) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP01) J(v int) WRP01 {
	return WRP01(bits.Make32(v, uint32(mask)))
}

type RWRP01 struct{ mmio.U32 }

func (r *RWRP01) Bits(mask WRP01) WRP01   { return WRP01(r.U32.Bits(uint32(mask))) }
func (r *RWRP01) StoreBits(mask, b WRP01) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP01) SetBits(mask WRP01)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP01) ClearBits(mask WRP01)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP01) Load() WRP01             { return WRP01(r.U32.Load()) }
func (r *RWRP01) Store(b WRP01)           { r.U32.Store(uint32(b)) }

func (r *RWRP01) AtomicStoreBits(mask, b WRP01) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP01) AtomicSetBits(mask WRP01)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP01) AtomicClearBits(mask WRP01)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP01 struct{ mmio.UM32 }

func (rm RMWRP01) Load() WRP01   { return WRP01(rm.UM32.Load()) }
func (rm RMWRP01) Store(b WRP01) { rm.UM32.Store(uint32(b)) }

type WRP23 uint32

func (b WRP23) Field(mask WRP23) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP23) J(v int) WRP23 {
	return WRP23(bits.Make32(v, uint32(mask)))
}

type RWRP23 struct{ mmio.U32 }

func (r *RWRP23) Bits(mask WRP23) WRP23   { return WRP23(r.U32.Bits(uint32(mask))) }
func (r *RWRP23) StoreBits(mask, b WRP23) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP23) SetBits(mask WRP23)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP23) ClearBits(mask WRP23)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP23) Load() WRP23             { return WRP23(r.U32.Load()) }
func (r *RWRP23) Store(b WRP23)           { r.U32.Store(uint32(b)) }

func (r *RWRP23) AtomicStoreBits(mask, b WRP23) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP23) AtomicSetBits(mask WRP23)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP23) AtomicClearBits(mask WRP23)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP23 struct{ mmio.UM32 }

func (rm RMWRP23) Load() WRP23   { return WRP23(rm.UM32.Load()) }
func (rm RMWRP23) Store(b WRP23) { rm.UM32.Store(uint32(b)) }

type WRP45 uint32

func (b WRP45) Field(mask WRP45) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP45) J(v int) WRP45 {
	return WRP45(bits.Make32(v, uint32(mask)))
}

type RWRP45 struct{ mmio.U32 }

func (r *RWRP45) Bits(mask WRP45) WRP45   { return WRP45(r.U32.Bits(uint32(mask))) }
func (r *RWRP45) StoreBits(mask, b WRP45) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP45) SetBits(mask WRP45)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP45) ClearBits(mask WRP45)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP45) Load() WRP45             { return WRP45(r.U32.Load()) }
func (r *RWRP45) Store(b WRP45)           { r.U32.Store(uint32(b)) }

func (r *RWRP45) AtomicStoreBits(mask, b WRP45) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP45) AtomicSetBits(mask WRP45)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP45) AtomicClearBits(mask WRP45)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP45 struct{ mmio.UM32 }

func (rm RMWRP45) Load() WRP45   { return WRP45(rm.UM32.Load()) }
func (rm RMWRP45) Store(b WRP45) { rm.UM32.Store(uint32(b)) }

type WRP67 uint32

func (b WRP67) Field(mask WRP67) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP67) J(v int) WRP67 {
	return WRP67(bits.Make32(v, uint32(mask)))
}

type RWRP67 struct{ mmio.U32 }

func (r *RWRP67) Bits(mask WRP67) WRP67   { return WRP67(r.U32.Bits(uint32(mask))) }
func (r *RWRP67) StoreBits(mask, b WRP67) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP67) SetBits(mask WRP67)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP67) ClearBits(mask WRP67)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP67) Load() WRP67             { return WRP67(r.U32.Load()) }
func (r *RWRP67) Store(b WRP67)           { r.U32.Store(uint32(b)) }

func (r *RWRP67) AtomicStoreBits(mask, b WRP67) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP67) AtomicSetBits(mask WRP67)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP67) AtomicClearBits(mask WRP67)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP67 struct{ mmio.UM32 }

func (rm RMWRP67) Load() WRP67   { return WRP67(rm.UM32.Load()) }
func (rm RMWRP67) Store(b WRP67) { rm.UM32.Store(uint32(b)) }

type WRP89 uint32

func (b WRP89) Field(mask WRP89) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP89) J(v int) WRP89 {
	return WRP89(bits.Make32(v, uint32(mask)))
}

type RWRP89 struct{ mmio.U32 }

func (r *RWRP89) Bits(mask WRP89) WRP89   { return WRP89(r.U32.Bits(uint32(mask))) }
func (r *RWRP89) StoreBits(mask, b WRP89) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP89) SetBits(mask WRP89)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP89) ClearBits(mask WRP89)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP89) Load() WRP89             { return WRP89(r.U32.Load()) }
func (r *RWRP89) Store(b WRP89)           { r.U32.Store(uint32(b)) }

func (r *RWRP89) AtomicStoreBits(mask, b WRP89) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP89) AtomicSetBits(mask WRP89)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP89) AtomicClearBits(mask WRP89)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP89 struct{ mmio.UM32 }

func (rm RMWRP89) Load() WRP89   { return WRP89(rm.UM32.Load()) }
func (rm RMWRP89) Store(b WRP89) { rm.UM32.Store(uint32(b)) }

type WRP1011 uint32

func (b WRP1011) Field(mask WRP1011) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP1011) J(v int) WRP1011 {
	return WRP1011(bits.Make32(v, uint32(mask)))
}

type RWRP1011 struct{ mmio.U32 }

func (r *RWRP1011) Bits(mask WRP1011) WRP1011 { return WRP1011(r.U32.Bits(uint32(mask))) }
func (r *RWRP1011) StoreBits(mask, b WRP1011) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP1011) SetBits(mask WRP1011)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP1011) ClearBits(mask WRP1011)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP1011) Load() WRP1011             { return WRP1011(r.U32.Load()) }
func (r *RWRP1011) Store(b WRP1011)           { r.U32.Store(uint32(b)) }

func (r *RWRP1011) AtomicStoreBits(mask, b WRP1011) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP1011) AtomicSetBits(mask WRP1011)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP1011) AtomicClearBits(mask WRP1011)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP1011 struct{ mmio.UM32 }

func (rm RMWRP1011) Load() WRP1011   { return WRP1011(rm.UM32.Load()) }
func (rm RMWRP1011) Store(b WRP1011) { rm.UM32.Store(uint32(b)) }

type WRP1213 uint32

func (b WRP1213) Field(mask WRP1213) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP1213) J(v int) WRP1213 {
	return WRP1213(bits.Make32(v, uint32(mask)))
}

type RWRP1213 struct{ mmio.U32 }

func (r *RWRP1213) Bits(mask WRP1213) WRP1213 { return WRP1213(r.U32.Bits(uint32(mask))) }
func (r *RWRP1213) StoreBits(mask, b WRP1213) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP1213) SetBits(mask WRP1213)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP1213) ClearBits(mask WRP1213)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP1213) Load() WRP1213             { return WRP1213(r.U32.Load()) }
func (r *RWRP1213) Store(b WRP1213)           { r.U32.Store(uint32(b)) }

func (r *RWRP1213) AtomicStoreBits(mask, b WRP1213) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP1213) AtomicSetBits(mask WRP1213)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP1213) AtomicClearBits(mask WRP1213)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP1213 struct{ mmio.UM32 }

func (rm RMWRP1213) Load() WRP1213   { return WRP1213(rm.UM32.Load()) }
func (rm RMWRP1213) Store(b WRP1213) { rm.UM32.Store(uint32(b)) }

type WRP1415 uint32

func (b WRP1415) Field(mask WRP1415) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WRP1415) J(v int) WRP1415 {
	return WRP1415(bits.Make32(v, uint32(mask)))
}

type RWRP1415 struct{ mmio.U32 }

func (r *RWRP1415) Bits(mask WRP1415) WRP1415 { return WRP1415(r.U32.Bits(uint32(mask))) }
func (r *RWRP1415) StoreBits(mask, b WRP1415) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RWRP1415) SetBits(mask WRP1415)      { r.U32.SetBits(uint32(mask)) }
func (r *RWRP1415) ClearBits(mask WRP1415)    { r.U32.ClearBits(uint32(mask)) }
func (r *RWRP1415) Load() WRP1415             { return WRP1415(r.U32.Load()) }
func (r *RWRP1415) Store(b WRP1415)           { r.U32.Store(uint32(b)) }

func (r *RWRP1415) AtomicStoreBits(mask, b WRP1415) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RWRP1415) AtomicSetBits(mask WRP1415)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RWRP1415) AtomicClearBits(mask WRP1415)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMWRP1415 struct{ mmio.UM32 }

func (rm RMWRP1415) Load() WRP1415   { return WRP1415(rm.UM32.Load()) }
func (rm RMWRP1415) Store(b WRP1415) { rm.UM32.Store(uint32(b)) }
