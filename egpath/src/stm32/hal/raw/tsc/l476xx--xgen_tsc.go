// +build l476xx

package tsc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l476xx/mmap"
)

type TSC_Periph struct {
	CR     RCR
	IER    RIER
	ICR    RICR
	ISR    RISR
	IOHCR  RIOHCR
	_      uint32
	IOASCR RIOASCR
	_      uint32
	IOSCR  RIOSCR
	_      uint32
	IOCCR  RIOCCR
	_      uint32
	IOGCSR RIOGCSR
	IOGXCR [8]RIOGXCR
}

func (p *TSC_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var TSC = (*TSC_Periph)(unsafe.Pointer(uintptr(mmap.TSC_BASE)))

type CR uint32

func (b CR) Field(mask CR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR) J(v int) CR {
	return CR(bits.MakeField32(v, uint32(mask)))
}

type RCR struct{ mmio.U32 }

func (r *RCR) Bits(mask CR) CR      { return CR(r.U32.Bits(uint32(mask))) }
func (r *RCR) StoreBits(mask, b CR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCR) SetBits(mask CR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCR) ClearBits(mask CR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCR) Load() CR             { return CR(r.U32.Load()) }
func (r *RCR) Store(b CR)           { r.U32.Store(uint32(b)) }

func (r *RCR) AtomicStoreBits(mask, b CR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCR) AtomicSetBits(mask CR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCR) AtomicClearBits(mask CR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCR struct{ mmio.UM32 }

func (rm RMCR) Load() CR   { return CR(rm.UM32.Load()) }
func (rm RMCR) Store(b CR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) TSCE() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(TSCE)}}
}

func (p *TSC_Periph) START() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(START)}}
}

func (p *TSC_Periph) AM() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(AM)}}
}

func (p *TSC_Periph) SYNCPOL() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(SYNCPOL)}}
}

func (p *TSC_Periph) IODEF() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(IODEF)}}
}

func (p *TSC_Periph) MCV() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(MCV)}}
}

func (p *TSC_Periph) PGPSC() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(PGPSC)}}
}

func (p *TSC_Periph) SSPSC() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(SSPSC)}}
}

func (p *TSC_Periph) SSE() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(SSE)}}
}

func (p *TSC_Periph) SSD() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(SSD)}}
}

func (p *TSC_Periph) CTPL() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CTPL)}}
}

func (p *TSC_Periph) CTPH() RMCR {
	return RMCR{mmio.UM32{&p.CR.U32, uint32(CTPH)}}
}

type IER uint32

func (b IER) Field(mask IER) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IER) J(v int) IER {
	return IER(bits.MakeField32(v, uint32(mask)))
}

type RIER struct{ mmio.U32 }

func (r *RIER) Bits(mask IER) IER     { return IER(r.U32.Bits(uint32(mask))) }
func (r *RIER) StoreBits(mask, b IER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIER) SetBits(mask IER)      { r.U32.SetBits(uint32(mask)) }
func (r *RIER) ClearBits(mask IER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIER) Load() IER             { return IER(r.U32.Load()) }
func (r *RIER) Store(b IER)           { r.U32.Store(uint32(b)) }

func (r *RIER) AtomicStoreBits(mask, b IER) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIER) AtomicSetBits(mask IER)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIER) AtomicClearBits(mask IER)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIER struct{ mmio.UM32 }

func (rm RMIER) Load() IER   { return IER(rm.UM32.Load()) }
func (rm RMIER) Store(b IER) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) EOAIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(EOAIE)}}
}

func (p *TSC_Periph) MCEIE() RMIER {
	return RMIER{mmio.UM32{&p.IER.U32, uint32(MCEIE)}}
}

type ICR uint32

func (b ICR) Field(mask ICR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICR) J(v int) ICR {
	return ICR(bits.MakeField32(v, uint32(mask)))
}

type RICR struct{ mmio.U32 }

func (r *RICR) Bits(mask ICR) ICR     { return ICR(r.U32.Bits(uint32(mask))) }
func (r *RICR) StoreBits(mask, b ICR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICR) SetBits(mask ICR)      { r.U32.SetBits(uint32(mask)) }
func (r *RICR) ClearBits(mask ICR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RICR) Load() ICR             { return ICR(r.U32.Load()) }
func (r *RICR) Store(b ICR)           { r.U32.Store(uint32(b)) }

func (r *RICR) AtomicStoreBits(mask, b ICR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RICR) AtomicSetBits(mask ICR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RICR) AtomicClearBits(mask ICR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMICR struct{ mmio.UM32 }

func (rm RMICR) Load() ICR   { return ICR(rm.UM32.Load()) }
func (rm RMICR) Store(b ICR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) EOAIC() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(EOAIC)}}
}

func (p *TSC_Periph) MCEIC() RMICR {
	return RMICR{mmio.UM32{&p.ICR.U32, uint32(MCEIC)}}
}

type ISR uint32

func (b ISR) Field(mask ISR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISR) J(v int) ISR {
	return ISR(bits.MakeField32(v, uint32(mask)))
}

type RISR struct{ mmio.U32 }

func (r *RISR) Bits(mask ISR) ISR     { return ISR(r.U32.Bits(uint32(mask))) }
func (r *RISR) StoreBits(mask, b ISR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RISR) SetBits(mask ISR)      { r.U32.SetBits(uint32(mask)) }
func (r *RISR) ClearBits(mask ISR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RISR) Load() ISR             { return ISR(r.U32.Load()) }
func (r *RISR) Store(b ISR)           { r.U32.Store(uint32(b)) }

func (r *RISR) AtomicStoreBits(mask, b ISR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RISR) AtomicSetBits(mask ISR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RISR) AtomicClearBits(mask ISR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMISR struct{ mmio.UM32 }

func (rm RMISR) Load() ISR   { return ISR(rm.UM32.Load()) }
func (rm RMISR) Store(b ISR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) EOAF() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(EOAF)}}
}

func (p *TSC_Periph) MCEF() RMISR {
	return RMISR{mmio.UM32{&p.ISR.U32, uint32(MCEF)}}
}

type IOHCR uint32

func (b IOHCR) Field(mask IOHCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IOHCR) J(v int) IOHCR {
	return IOHCR(bits.MakeField32(v, uint32(mask)))
}

type RIOHCR struct{ mmio.U32 }

func (r *RIOHCR) Bits(mask IOHCR) IOHCR   { return IOHCR(r.U32.Bits(uint32(mask))) }
func (r *RIOHCR) StoreBits(mask, b IOHCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOHCR) SetBits(mask IOHCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIOHCR) ClearBits(mask IOHCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIOHCR) Load() IOHCR             { return IOHCR(r.U32.Load()) }
func (r *RIOHCR) Store(b IOHCR)           { r.U32.Store(uint32(b)) }

func (r *RIOHCR) AtomicStoreBits(mask, b IOHCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIOHCR) AtomicSetBits(mask IOHCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIOHCR) AtomicClearBits(mask IOHCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIOHCR struct{ mmio.UM32 }

func (rm RMIOHCR) Load() IOHCR   { return IOHCR(rm.UM32.Load()) }
func (rm RMIOHCR) Store(b IOHCR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) G1_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G1_IO1)}}
}

func (p *TSC_Periph) G1_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G1_IO2)}}
}

func (p *TSC_Periph) G1_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G1_IO3)}}
}

func (p *TSC_Periph) G1_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G1_IO4)}}
}

func (p *TSC_Periph) G2_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G2_IO1)}}
}

func (p *TSC_Periph) G2_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G2_IO2)}}
}

func (p *TSC_Periph) G2_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G2_IO3)}}
}

func (p *TSC_Periph) G2_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G2_IO4)}}
}

func (p *TSC_Periph) G3_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G3_IO1)}}
}

func (p *TSC_Periph) G3_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G3_IO2)}}
}

func (p *TSC_Periph) G3_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G3_IO3)}}
}

func (p *TSC_Periph) G3_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G3_IO4)}}
}

func (p *TSC_Periph) G4_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G4_IO1)}}
}

func (p *TSC_Periph) G4_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G4_IO2)}}
}

func (p *TSC_Periph) G4_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G4_IO3)}}
}

func (p *TSC_Periph) G4_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G4_IO4)}}
}

func (p *TSC_Periph) G5_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G5_IO1)}}
}

func (p *TSC_Periph) G5_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G5_IO2)}}
}

func (p *TSC_Periph) G5_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G5_IO3)}}
}

func (p *TSC_Periph) G5_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G5_IO4)}}
}

func (p *TSC_Periph) G6_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G6_IO1)}}
}

func (p *TSC_Periph) G6_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G6_IO2)}}
}

func (p *TSC_Periph) G6_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G6_IO3)}}
}

func (p *TSC_Periph) G6_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G6_IO4)}}
}

func (p *TSC_Periph) G7_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G7_IO1)}}
}

func (p *TSC_Periph) G7_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G7_IO2)}}
}

func (p *TSC_Periph) G7_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G7_IO3)}}
}

func (p *TSC_Periph) G7_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G7_IO4)}}
}

func (p *TSC_Periph) G8_IO1() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G8_IO1)}}
}

func (p *TSC_Periph) G8_IO2() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G8_IO2)}}
}

func (p *TSC_Periph) G8_IO3() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G8_IO3)}}
}

func (p *TSC_Periph) G8_IO4() RMIOHCR {
	return RMIOHCR{mmio.UM32{&p.IOHCR.U32, uint32(G8_IO4)}}
}

type IOASCR uint32

func (b IOASCR) Field(mask IOASCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IOASCR) J(v int) IOASCR {
	return IOASCR(bits.MakeField32(v, uint32(mask)))
}

type RIOASCR struct{ mmio.U32 }

func (r *RIOASCR) Bits(mask IOASCR) IOASCR  { return IOASCR(r.U32.Bits(uint32(mask))) }
func (r *RIOASCR) StoreBits(mask, b IOASCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOASCR) SetBits(mask IOASCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIOASCR) ClearBits(mask IOASCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIOASCR) Load() IOASCR             { return IOASCR(r.U32.Load()) }
func (r *RIOASCR) Store(b IOASCR)           { r.U32.Store(uint32(b)) }

func (r *RIOASCR) AtomicStoreBits(mask, b IOASCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIOASCR) AtomicSetBits(mask IOASCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIOASCR) AtomicClearBits(mask IOASCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIOASCR struct{ mmio.UM32 }

func (rm RMIOASCR) Load() IOASCR   { return IOASCR(rm.UM32.Load()) }
func (rm RMIOASCR) Store(b IOASCR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) G1_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G1_IO1)}}
}

func (p *TSC_Periph) G1_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G1_IO2)}}
}

func (p *TSC_Periph) G1_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G1_IO3)}}
}

func (p *TSC_Periph) G1_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G1_IO4)}}
}

func (p *TSC_Periph) G2_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G2_IO1)}}
}

func (p *TSC_Periph) G2_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G2_IO2)}}
}

func (p *TSC_Periph) G2_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G2_IO3)}}
}

func (p *TSC_Periph) G2_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G2_IO4)}}
}

func (p *TSC_Periph) G3_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G3_IO1)}}
}

func (p *TSC_Periph) G3_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G3_IO2)}}
}

func (p *TSC_Periph) G3_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G3_IO3)}}
}

func (p *TSC_Periph) G3_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G3_IO4)}}
}

func (p *TSC_Periph) G4_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G4_IO1)}}
}

func (p *TSC_Periph) G4_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G4_IO2)}}
}

func (p *TSC_Periph) G4_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G4_IO3)}}
}

func (p *TSC_Periph) G4_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G4_IO4)}}
}

func (p *TSC_Periph) G5_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G5_IO1)}}
}

func (p *TSC_Periph) G5_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G5_IO2)}}
}

func (p *TSC_Periph) G5_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G5_IO3)}}
}

func (p *TSC_Periph) G5_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G5_IO4)}}
}

func (p *TSC_Periph) G6_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G6_IO1)}}
}

func (p *TSC_Periph) G6_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G6_IO2)}}
}

func (p *TSC_Periph) G6_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G6_IO3)}}
}

func (p *TSC_Periph) G6_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G6_IO4)}}
}

func (p *TSC_Periph) G7_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G7_IO1)}}
}

func (p *TSC_Periph) G7_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G7_IO2)}}
}

func (p *TSC_Periph) G7_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G7_IO3)}}
}

func (p *TSC_Periph) G7_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G7_IO4)}}
}

func (p *TSC_Periph) G8_IO1() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G8_IO1)}}
}

func (p *TSC_Periph) G8_IO2() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G8_IO2)}}
}

func (p *TSC_Periph) G8_IO3() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G8_IO3)}}
}

func (p *TSC_Periph) G8_IO4() RMIOASCR {
	return RMIOASCR{mmio.UM32{&p.IOASCR.U32, uint32(G8_IO4)}}
}

type IOSCR uint32

func (b IOSCR) Field(mask IOSCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IOSCR) J(v int) IOSCR {
	return IOSCR(bits.MakeField32(v, uint32(mask)))
}

type RIOSCR struct{ mmio.U32 }

func (r *RIOSCR) Bits(mask IOSCR) IOSCR   { return IOSCR(r.U32.Bits(uint32(mask))) }
func (r *RIOSCR) StoreBits(mask, b IOSCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOSCR) SetBits(mask IOSCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIOSCR) ClearBits(mask IOSCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIOSCR) Load() IOSCR             { return IOSCR(r.U32.Load()) }
func (r *RIOSCR) Store(b IOSCR)           { r.U32.Store(uint32(b)) }

func (r *RIOSCR) AtomicStoreBits(mask, b IOSCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIOSCR) AtomicSetBits(mask IOSCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIOSCR) AtomicClearBits(mask IOSCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIOSCR struct{ mmio.UM32 }

func (rm RMIOSCR) Load() IOSCR   { return IOSCR(rm.UM32.Load()) }
func (rm RMIOSCR) Store(b IOSCR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) G1_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G1_IO1)}}
}

func (p *TSC_Periph) G1_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G1_IO2)}}
}

func (p *TSC_Periph) G1_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G1_IO3)}}
}

func (p *TSC_Periph) G1_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G1_IO4)}}
}

func (p *TSC_Periph) G2_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G2_IO1)}}
}

func (p *TSC_Periph) G2_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G2_IO2)}}
}

func (p *TSC_Periph) G2_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G2_IO3)}}
}

func (p *TSC_Periph) G2_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G2_IO4)}}
}

func (p *TSC_Periph) G3_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G3_IO1)}}
}

func (p *TSC_Periph) G3_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G3_IO2)}}
}

func (p *TSC_Periph) G3_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G3_IO3)}}
}

func (p *TSC_Periph) G3_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G3_IO4)}}
}

func (p *TSC_Periph) G4_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G4_IO1)}}
}

func (p *TSC_Periph) G4_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G4_IO2)}}
}

func (p *TSC_Periph) G4_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G4_IO3)}}
}

func (p *TSC_Periph) G4_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G4_IO4)}}
}

func (p *TSC_Periph) G5_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G5_IO1)}}
}

func (p *TSC_Periph) G5_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G5_IO2)}}
}

func (p *TSC_Periph) G5_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G5_IO3)}}
}

func (p *TSC_Periph) G5_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G5_IO4)}}
}

func (p *TSC_Periph) G6_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G6_IO1)}}
}

func (p *TSC_Periph) G6_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G6_IO2)}}
}

func (p *TSC_Periph) G6_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G6_IO3)}}
}

func (p *TSC_Periph) G6_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G6_IO4)}}
}

func (p *TSC_Periph) G7_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G7_IO1)}}
}

func (p *TSC_Periph) G7_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G7_IO2)}}
}

func (p *TSC_Periph) G7_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G7_IO3)}}
}

func (p *TSC_Periph) G7_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G7_IO4)}}
}

func (p *TSC_Periph) G8_IO1() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G8_IO1)}}
}

func (p *TSC_Periph) G8_IO2() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G8_IO2)}}
}

func (p *TSC_Periph) G8_IO3() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G8_IO3)}}
}

func (p *TSC_Periph) G8_IO4() RMIOSCR {
	return RMIOSCR{mmio.UM32{&p.IOSCR.U32, uint32(G8_IO4)}}
}

type IOCCR uint32

func (b IOCCR) Field(mask IOCCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IOCCR) J(v int) IOCCR {
	return IOCCR(bits.MakeField32(v, uint32(mask)))
}

type RIOCCR struct{ mmio.U32 }

func (r *RIOCCR) Bits(mask IOCCR) IOCCR   { return IOCCR(r.U32.Bits(uint32(mask))) }
func (r *RIOCCR) StoreBits(mask, b IOCCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOCCR) SetBits(mask IOCCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIOCCR) ClearBits(mask IOCCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIOCCR) Load() IOCCR             { return IOCCR(r.U32.Load()) }
func (r *RIOCCR) Store(b IOCCR)           { r.U32.Store(uint32(b)) }

func (r *RIOCCR) AtomicStoreBits(mask, b IOCCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIOCCR) AtomicSetBits(mask IOCCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIOCCR) AtomicClearBits(mask IOCCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIOCCR struct{ mmio.UM32 }

func (rm RMIOCCR) Load() IOCCR   { return IOCCR(rm.UM32.Load()) }
func (rm RMIOCCR) Store(b IOCCR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) G1_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G1_IO1)}}
}

func (p *TSC_Periph) G1_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G1_IO2)}}
}

func (p *TSC_Periph) G1_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G1_IO3)}}
}

func (p *TSC_Periph) G1_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G1_IO4)}}
}

func (p *TSC_Periph) G2_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G2_IO1)}}
}

func (p *TSC_Periph) G2_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G2_IO2)}}
}

func (p *TSC_Periph) G2_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G2_IO3)}}
}

func (p *TSC_Periph) G2_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G2_IO4)}}
}

func (p *TSC_Periph) G3_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G3_IO1)}}
}

func (p *TSC_Periph) G3_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G3_IO2)}}
}

func (p *TSC_Periph) G3_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G3_IO3)}}
}

func (p *TSC_Periph) G3_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G3_IO4)}}
}

func (p *TSC_Periph) G4_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G4_IO1)}}
}

func (p *TSC_Periph) G4_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G4_IO2)}}
}

func (p *TSC_Periph) G4_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G4_IO3)}}
}

func (p *TSC_Periph) G4_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G4_IO4)}}
}

func (p *TSC_Periph) G5_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G5_IO1)}}
}

func (p *TSC_Periph) G5_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G5_IO2)}}
}

func (p *TSC_Periph) G5_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G5_IO3)}}
}

func (p *TSC_Periph) G5_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G5_IO4)}}
}

func (p *TSC_Periph) G6_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G6_IO1)}}
}

func (p *TSC_Periph) G6_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G6_IO2)}}
}

func (p *TSC_Periph) G6_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G6_IO3)}}
}

func (p *TSC_Periph) G6_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G6_IO4)}}
}

func (p *TSC_Periph) G7_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G7_IO1)}}
}

func (p *TSC_Periph) G7_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G7_IO2)}}
}

func (p *TSC_Periph) G7_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G7_IO3)}}
}

func (p *TSC_Periph) G7_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G7_IO4)}}
}

func (p *TSC_Periph) G8_IO1() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G8_IO1)}}
}

func (p *TSC_Periph) G8_IO2() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G8_IO2)}}
}

func (p *TSC_Periph) G8_IO3() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G8_IO3)}}
}

func (p *TSC_Periph) G8_IO4() RMIOCCR {
	return RMIOCCR{mmio.UM32{&p.IOCCR.U32, uint32(G8_IO4)}}
}

type IOGCSR uint32

func (b IOGCSR) Field(mask IOGCSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IOGCSR) J(v int) IOGCSR {
	return IOGCSR(bits.MakeField32(v, uint32(mask)))
}

type RIOGCSR struct{ mmio.U32 }

func (r *RIOGCSR) Bits(mask IOGCSR) IOGCSR  { return IOGCSR(r.U32.Bits(uint32(mask))) }
func (r *RIOGCSR) StoreBits(mask, b IOGCSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOGCSR) SetBits(mask IOGCSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIOGCSR) ClearBits(mask IOGCSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIOGCSR) Load() IOGCSR             { return IOGCSR(r.U32.Load()) }
func (r *RIOGCSR) Store(b IOGCSR)           { r.U32.Store(uint32(b)) }

func (r *RIOGCSR) AtomicStoreBits(mask, b IOGCSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIOGCSR) AtomicSetBits(mask IOGCSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIOGCSR) AtomicClearBits(mask IOGCSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIOGCSR struct{ mmio.UM32 }

func (rm RMIOGCSR) Load() IOGCSR   { return IOGCSR(rm.UM32.Load()) }
func (rm RMIOGCSR) Store(b IOGCSR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) G1E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G1E)}}
}

func (p *TSC_Periph) G2E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G2E)}}
}

func (p *TSC_Periph) G3E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G3E)}}
}

func (p *TSC_Periph) G4E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G4E)}}
}

func (p *TSC_Periph) G5E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G5E)}}
}

func (p *TSC_Periph) G6E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G6E)}}
}

func (p *TSC_Periph) G7E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G7E)}}
}

func (p *TSC_Periph) G8E() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G8E)}}
}

func (p *TSC_Periph) G1S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G1S)}}
}

func (p *TSC_Periph) G2S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G2S)}}
}

func (p *TSC_Periph) G3S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G3S)}}
}

func (p *TSC_Periph) G4S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G4S)}}
}

func (p *TSC_Periph) G5S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G5S)}}
}

func (p *TSC_Periph) G6S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G6S)}}
}

func (p *TSC_Periph) G7S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G7S)}}
}

func (p *TSC_Periph) G8S() RMIOGCSR {
	return RMIOGCSR{mmio.UM32{&p.IOGCSR.U32, uint32(G8S)}}
}

type IOGXCR uint32

func (b IOGXCR) Field(mask IOGXCR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask IOGXCR) J(v int) IOGXCR {
	return IOGXCR(bits.MakeField32(v, uint32(mask)))
}

type RIOGXCR struct{ mmio.U32 }

func (r *RIOGXCR) Bits(mask IOGXCR) IOGXCR  { return IOGXCR(r.U32.Bits(uint32(mask))) }
func (r *RIOGXCR) StoreBits(mask, b IOGXCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RIOGXCR) SetBits(mask IOGXCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RIOGXCR) ClearBits(mask IOGXCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RIOGXCR) Load() IOGXCR             { return IOGXCR(r.U32.Load()) }
func (r *RIOGXCR) Store(b IOGXCR)           { r.U32.Store(uint32(b)) }

func (r *RIOGXCR) AtomicStoreBits(mask, b IOGXCR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RIOGXCR) AtomicSetBits(mask IOGXCR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RIOGXCR) AtomicClearBits(mask IOGXCR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMIOGXCR struct{ mmio.UM32 }

func (rm RMIOGXCR) Load() IOGXCR   { return IOGXCR(rm.UM32.Load()) }
func (rm RMIOGXCR) Store(b IOGXCR) { rm.UM32.Store(uint32(b)) }

func (p *TSC_Periph) CNT(n int) RMIOGXCR {
	return RMIOGXCR{mmio.UM32{&p.IOGXCR[n].U32, uint32(CNT)}}
}
