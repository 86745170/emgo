// +build f303xe

package hrtim

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/f303xe/mmap"
)

type HRTIM_Master_Periph struct {
	MCR    MCR
	MISR   MISR
	MICR   MICR
	MDIER  MDIER
	MCNTR  MCNTR
	MPER   MPER
	MREP   MREP
	MCMP1R MCMP1R
	_      uint32
	MCMP2R MCMP2R
	MCMP3R MCMP3R
	MCMP4R MCMP4R
}

func (p *HRTIM_Master_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type MCR_Bits uint32

func (b MCR_Bits) Field(mask MCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MCR_Bits) J(v int) MCR_Bits {
	return MCR_Bits(bits.Make32(v, uint32(mask)))
}

type MCR struct{ mmio.U32 }

func (r *MCR) Bits(mask MCR_Bits) MCR_Bits { return MCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *MCR) StoreBits(mask, b MCR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MCR) SetBits(mask MCR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *MCR) ClearBits(mask MCR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *MCR) Load() MCR_Bits              { return MCR_Bits(r.U32.Load()) }
func (r *MCR) Store(b MCR_Bits)            { r.U32.Store(uint32(b)) }

func (r *MCR) AtomicSetBits(mask MCR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MCR) AtomicClearBits(mask MCR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MCR_Mask struct{ mmio.UM32 }

func (rm MCR_Mask) Load() MCR_Bits   { return MCR_Bits(rm.UM32.Load()) }
func (rm MCR_Mask) Store(b MCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Master_Periph) CK_PSC() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(CK_PSC)}}
}

func (p *HRTIM_Master_Periph) CONT() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(CONT)}}
}

func (p *HRTIM_Master_Periph) RETRIG() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(RETRIG)}}
}

func (p *HRTIM_Master_Periph) HALF() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(HALF)}}
}

func (p *HRTIM_Master_Periph) SYNC_IN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(SYNC_IN)}}
}

func (p *HRTIM_Master_Periph) SYNCRSTM() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(SYNCRSTM)}}
}

func (p *HRTIM_Master_Periph) SYNCSTRTM() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(SYNCSTRTM)}}
}

func (p *HRTIM_Master_Periph) SYNC_OUT() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(SYNC_OUT)}}
}

func (p *HRTIM_Master_Periph) SYNC_SRC() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(SYNC_SRC)}}
}

func (p *HRTIM_Master_Periph) MCEN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(MCEN)}}
}

func (p *HRTIM_Master_Periph) TACEN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(TACEN)}}
}

func (p *HRTIM_Master_Periph) TBCEN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(TBCEN)}}
}

func (p *HRTIM_Master_Periph) TCCEN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(TCCEN)}}
}

func (p *HRTIM_Master_Periph) TDCEN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(TDCEN)}}
}

func (p *HRTIM_Master_Periph) TECEN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(TECEN)}}
}

func (p *HRTIM_Master_Periph) DACSYNC() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(DACSYNC)}}
}

func (p *HRTIM_Master_Periph) PREEN() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(PREEN)}}
}

func (p *HRTIM_Master_Periph) MREPU() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(MREPU)}}
}

func (p *HRTIM_Master_Periph) BRSTDMA() MCR_Mask {
	return MCR_Mask{mmio.UM32{&p.MCR.U32, uint32(BRSTDMA)}}
}

type MISR_Bits uint32

func (b MISR_Bits) Field(mask MISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MISR_Bits) J(v int) MISR_Bits {
	return MISR_Bits(bits.Make32(v, uint32(mask)))
}

type MISR struct{ mmio.U32 }

func (r *MISR) Bits(mask MISR_Bits) MISR_Bits { return MISR_Bits(r.U32.Bits(uint32(mask))) }
func (r *MISR) StoreBits(mask, b MISR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MISR) SetBits(mask MISR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *MISR) ClearBits(mask MISR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *MISR) Load() MISR_Bits               { return MISR_Bits(r.U32.Load()) }
func (r *MISR) Store(b MISR_Bits)             { r.U32.Store(uint32(b)) }

func (r *MISR) AtomicSetBits(mask MISR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MISR) AtomicClearBits(mask MISR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MISR_Mask struct{ mmio.UM32 }

func (rm MISR_Mask) Load() MISR_Bits   { return MISR_Bits(rm.UM32.Load()) }
func (rm MISR_Mask) Store(b MISR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Master_Periph) MCMP1() MISR_Mask {
	return MISR_Mask{mmio.UM32{&p.MISR.U32, uint32(MCMP1)}}
}

func (p *HRTIM_Master_Periph) MCMP2() MISR_Mask {
	return MISR_Mask{mmio.UM32{&p.MISR.U32, uint32(MCMP2)}}
}

func (p *HRTIM_Master_Periph) MCMP3() MISR_Mask {
	return MISR_Mask{mmio.UM32{&p.MISR.U32, uint32(MCMP3)}}
}

func (p *HRTIM_Master_Periph) MCMP4() MISR_Mask {
	return MISR_Mask{mmio.UM32{&p.MISR.U32, uint32(MCMP4)}}
}

func (p *HRTIM_Master_Periph) MREP() MISR_Mask {
	return MISR_Mask{mmio.UM32{&p.MISR.U32, uint32(MREP)}}
}

func (p *HRTIM_Master_Periph) SYNC() MISR_Mask {
	return MISR_Mask{mmio.UM32{&p.MISR.U32, uint32(SYNC)}}
}

func (p *HRTIM_Master_Periph) MUPD() MISR_Mask {
	return MISR_Mask{mmio.UM32{&p.MISR.U32, uint32(MUPD)}}
}

type MICR_Bits uint32

func (b MICR_Bits) Field(mask MICR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MICR_Bits) J(v int) MICR_Bits {
	return MICR_Bits(bits.Make32(v, uint32(mask)))
}

type MICR struct{ mmio.U32 }

func (r *MICR) Bits(mask MICR_Bits) MICR_Bits { return MICR_Bits(r.U32.Bits(uint32(mask))) }
func (r *MICR) StoreBits(mask, b MICR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MICR) SetBits(mask MICR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *MICR) ClearBits(mask MICR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *MICR) Load() MICR_Bits               { return MICR_Bits(r.U32.Load()) }
func (r *MICR) Store(b MICR_Bits)             { r.U32.Store(uint32(b)) }

func (r *MICR) AtomicSetBits(mask MICR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MICR) AtomicClearBits(mask MICR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MICR_Mask struct{ mmio.UM32 }

func (rm MICR_Mask) Load() MICR_Bits   { return MICR_Bits(rm.UM32.Load()) }
func (rm MICR_Mask) Store(b MICR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Master_Periph) MCMP1() MICR_Mask {
	return MICR_Mask{mmio.UM32{&p.MICR.U32, uint32(MCMP1)}}
}

func (p *HRTIM_Master_Periph) MCMP2() MICR_Mask {
	return MICR_Mask{mmio.UM32{&p.MICR.U32, uint32(MCMP2)}}
}

func (p *HRTIM_Master_Periph) MCMP3() MICR_Mask {
	return MICR_Mask{mmio.UM32{&p.MICR.U32, uint32(MCMP3)}}
}

func (p *HRTIM_Master_Periph) MCMP4() MICR_Mask {
	return MICR_Mask{mmio.UM32{&p.MICR.U32, uint32(MCMP4)}}
}

func (p *HRTIM_Master_Periph) MREP() MICR_Mask {
	return MICR_Mask{mmio.UM32{&p.MICR.U32, uint32(MREP)}}
}

func (p *HRTIM_Master_Periph) SYNC() MICR_Mask {
	return MICR_Mask{mmio.UM32{&p.MICR.U32, uint32(SYNC)}}
}

func (p *HRTIM_Master_Periph) MUPD() MICR_Mask {
	return MICR_Mask{mmio.UM32{&p.MICR.U32, uint32(MUPD)}}
}

type MDIER_Bits uint32

func (b MDIER_Bits) Field(mask MDIER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MDIER_Bits) J(v int) MDIER_Bits {
	return MDIER_Bits(bits.Make32(v, uint32(mask)))
}

type MDIER struct{ mmio.U32 }

func (r *MDIER) Bits(mask MDIER_Bits) MDIER_Bits { return MDIER_Bits(r.U32.Bits(uint32(mask))) }
func (r *MDIER) StoreBits(mask, b MDIER_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MDIER) SetBits(mask MDIER_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *MDIER) ClearBits(mask MDIER_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *MDIER) Load() MDIER_Bits                { return MDIER_Bits(r.U32.Load()) }
func (r *MDIER) Store(b MDIER_Bits)              { r.U32.Store(uint32(b)) }

func (r *MDIER) AtomicSetBits(mask MDIER_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MDIER) AtomicClearBits(mask MDIER_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MDIER_Mask struct{ mmio.UM32 }

func (rm MDIER_Mask) Load() MDIER_Bits   { return MDIER_Bits(rm.UM32.Load()) }
func (rm MDIER_Mask) Store(b MDIER_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Master_Periph) MCMP1IE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP1IE)}}
}

func (p *HRTIM_Master_Periph) MCMP2IE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP2IE)}}
}

func (p *HRTIM_Master_Periph) MCMP3IE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP3IE)}}
}

func (p *HRTIM_Master_Periph) MCMP4IE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP4IE)}}
}

func (p *HRTIM_Master_Periph) MREPIE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MREPIE)}}
}

func (p *HRTIM_Master_Periph) SYNCIE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(SYNCIE)}}
}

func (p *HRTIM_Master_Periph) MUPDIE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MUPDIE)}}
}

func (p *HRTIM_Master_Periph) MCMP1DE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP1DE)}}
}

func (p *HRTIM_Master_Periph) MCMP2DE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP2DE)}}
}

func (p *HRTIM_Master_Periph) MCMP3DE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP3DE)}}
}

func (p *HRTIM_Master_Periph) MCMP4DE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MCMP4DE)}}
}

func (p *HRTIM_Master_Periph) MREPDE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MREPDE)}}
}

func (p *HRTIM_Master_Periph) SYNCDE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(SYNCDE)}}
}

func (p *HRTIM_Master_Periph) MUPDDE() MDIER_Mask {
	return MDIER_Mask{mmio.UM32{&p.MDIER.U32, uint32(MUPDDE)}}
}

type MCNTR_Bits uint32

func (b MCNTR_Bits) Field(mask MCNTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MCNTR_Bits) J(v int) MCNTR_Bits {
	return MCNTR_Bits(bits.Make32(v, uint32(mask)))
}

type MCNTR struct{ mmio.U32 }

func (r *MCNTR) Bits(mask MCNTR_Bits) MCNTR_Bits { return MCNTR_Bits(r.U32.Bits(uint32(mask))) }
func (r *MCNTR) StoreBits(mask, b MCNTR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MCNTR) SetBits(mask MCNTR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *MCNTR) ClearBits(mask MCNTR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *MCNTR) Load() MCNTR_Bits                { return MCNTR_Bits(r.U32.Load()) }
func (r *MCNTR) Store(b MCNTR_Bits)              { r.U32.Store(uint32(b)) }

func (r *MCNTR) AtomicSetBits(mask MCNTR_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MCNTR) AtomicClearBits(mask MCNTR_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MCNTR_Mask struct{ mmio.UM32 }

func (rm MCNTR_Mask) Load() MCNTR_Bits   { return MCNTR_Bits(rm.UM32.Load()) }
func (rm MCNTR_Mask) Store(b MCNTR_Bits) { rm.UM32.Store(uint32(b)) }

type MPER_Bits uint32

func (b MPER_Bits) Field(mask MPER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MPER_Bits) J(v int) MPER_Bits {
	return MPER_Bits(bits.Make32(v, uint32(mask)))
}

type MPER struct{ mmio.U32 }

func (r *MPER) Bits(mask MPER_Bits) MPER_Bits { return MPER_Bits(r.U32.Bits(uint32(mask))) }
func (r *MPER) StoreBits(mask, b MPER_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MPER) SetBits(mask MPER_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *MPER) ClearBits(mask MPER_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *MPER) Load() MPER_Bits               { return MPER_Bits(r.U32.Load()) }
func (r *MPER) Store(b MPER_Bits)             { r.U32.Store(uint32(b)) }

func (r *MPER) AtomicSetBits(mask MPER_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MPER) AtomicClearBits(mask MPER_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MPER_Mask struct{ mmio.UM32 }

func (rm MPER_Mask) Load() MPER_Bits   { return MPER_Bits(rm.UM32.Load()) }
func (rm MPER_Mask) Store(b MPER_Bits) { rm.UM32.Store(uint32(b)) }

type MREP_Bits uint32

func (b MREP_Bits) Field(mask MREP_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MREP_Bits) J(v int) MREP_Bits {
	return MREP_Bits(bits.Make32(v, uint32(mask)))
}

type MREP struct{ mmio.U32 }

func (r *MREP) Bits(mask MREP_Bits) MREP_Bits { return MREP_Bits(r.U32.Bits(uint32(mask))) }
func (r *MREP) StoreBits(mask, b MREP_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MREP) SetBits(mask MREP_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *MREP) ClearBits(mask MREP_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *MREP) Load() MREP_Bits               { return MREP_Bits(r.U32.Load()) }
func (r *MREP) Store(b MREP_Bits)             { r.U32.Store(uint32(b)) }

func (r *MREP) AtomicSetBits(mask MREP_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MREP) AtomicClearBits(mask MREP_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MREP_Mask struct{ mmio.UM32 }

func (rm MREP_Mask) Load() MREP_Bits   { return MREP_Bits(rm.UM32.Load()) }
func (rm MREP_Mask) Store(b MREP_Bits) { rm.UM32.Store(uint32(b)) }

type MCMP1R_Bits uint32

func (b MCMP1R_Bits) Field(mask MCMP1R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MCMP1R_Bits) J(v int) MCMP1R_Bits {
	return MCMP1R_Bits(bits.Make32(v, uint32(mask)))
}

type MCMP1R struct{ mmio.U32 }

func (r *MCMP1R) Bits(mask MCMP1R_Bits) MCMP1R_Bits { return MCMP1R_Bits(r.U32.Bits(uint32(mask))) }
func (r *MCMP1R) StoreBits(mask, b MCMP1R_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MCMP1R) SetBits(mask MCMP1R_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *MCMP1R) ClearBits(mask MCMP1R_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *MCMP1R) Load() MCMP1R_Bits                 { return MCMP1R_Bits(r.U32.Load()) }
func (r *MCMP1R) Store(b MCMP1R_Bits)               { r.U32.Store(uint32(b)) }

func (r *MCMP1R) AtomicSetBits(mask MCMP1R_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MCMP1R) AtomicClearBits(mask MCMP1R_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MCMP1R_Mask struct{ mmio.UM32 }

func (rm MCMP1R_Mask) Load() MCMP1R_Bits   { return MCMP1R_Bits(rm.UM32.Load()) }
func (rm MCMP1R_Mask) Store(b MCMP1R_Bits) { rm.UM32.Store(uint32(b)) }

func (p *HRTIM_Master_Periph) MCMP1R() MCMP1R_Mask {
	return MCMP1R_Mask{mmio.UM32{&p.MCMP1R.U32, uint32(MCMP1R)}}
}

type MCMP2R_Bits uint32

func (b MCMP2R_Bits) Field(mask MCMP2R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MCMP2R_Bits) J(v int) MCMP2R_Bits {
	return MCMP2R_Bits(bits.Make32(v, uint32(mask)))
}

type MCMP2R struct{ mmio.U32 }

func (r *MCMP2R) Bits(mask MCMP2R_Bits) MCMP2R_Bits { return MCMP2R_Bits(r.U32.Bits(uint32(mask))) }
func (r *MCMP2R) StoreBits(mask, b MCMP2R_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MCMP2R) SetBits(mask MCMP2R_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *MCMP2R) ClearBits(mask MCMP2R_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *MCMP2R) Load() MCMP2R_Bits                 { return MCMP2R_Bits(r.U32.Load()) }
func (r *MCMP2R) Store(b MCMP2R_Bits)               { r.U32.Store(uint32(b)) }

func (r *MCMP2R) AtomicSetBits(mask MCMP2R_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MCMP2R) AtomicClearBits(mask MCMP2R_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MCMP2R_Mask struct{ mmio.UM32 }

func (rm MCMP2R_Mask) Load() MCMP2R_Bits   { return MCMP2R_Bits(rm.UM32.Load()) }
func (rm MCMP2R_Mask) Store(b MCMP2R_Bits) { rm.UM32.Store(uint32(b)) }

type MCMP3R_Bits uint32

func (b MCMP3R_Bits) Field(mask MCMP3R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MCMP3R_Bits) J(v int) MCMP3R_Bits {
	return MCMP3R_Bits(bits.Make32(v, uint32(mask)))
}

type MCMP3R struct{ mmio.U32 }

func (r *MCMP3R) Bits(mask MCMP3R_Bits) MCMP3R_Bits { return MCMP3R_Bits(r.U32.Bits(uint32(mask))) }
func (r *MCMP3R) StoreBits(mask, b MCMP3R_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MCMP3R) SetBits(mask MCMP3R_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *MCMP3R) ClearBits(mask MCMP3R_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *MCMP3R) Load() MCMP3R_Bits                 { return MCMP3R_Bits(r.U32.Load()) }
func (r *MCMP3R) Store(b MCMP3R_Bits)               { r.U32.Store(uint32(b)) }

func (r *MCMP3R) AtomicSetBits(mask MCMP3R_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MCMP3R) AtomicClearBits(mask MCMP3R_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MCMP3R_Mask struct{ mmio.UM32 }

func (rm MCMP3R_Mask) Load() MCMP3R_Bits   { return MCMP3R_Bits(rm.UM32.Load()) }
func (rm MCMP3R_Mask) Store(b MCMP3R_Bits) { rm.UM32.Store(uint32(b)) }

type MCMP4R_Bits uint32

func (b MCMP4R_Bits) Field(mask MCMP4R_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MCMP4R_Bits) J(v int) MCMP4R_Bits {
	return MCMP4R_Bits(bits.Make32(v, uint32(mask)))
}

type MCMP4R struct{ mmio.U32 }

func (r *MCMP4R) Bits(mask MCMP4R_Bits) MCMP4R_Bits { return MCMP4R_Bits(r.U32.Bits(uint32(mask))) }
func (r *MCMP4R) StoreBits(mask, b MCMP4R_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MCMP4R) SetBits(mask MCMP4R_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *MCMP4R) ClearBits(mask MCMP4R_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *MCMP4R) Load() MCMP4R_Bits                 { return MCMP4R_Bits(r.U32.Load()) }
func (r *MCMP4R) Store(b MCMP4R_Bits)               { r.U32.Store(uint32(b)) }

func (r *MCMP4R) AtomicSetBits(mask MCMP4R_Bits)   { r.U32.AtomicSetBits(uint32(mask)) }
func (r *MCMP4R) AtomicClearBits(mask MCMP4R_Bits) { r.U32.AtomicClearBits(uint32(mask)) }

type MCMP4R_Mask struct{ mmio.UM32 }

func (rm MCMP4R_Mask) Load() MCMP4R_Bits   { return MCMP4R_Bits(rm.UM32.Load()) }
func (rm MCMP4R_Mask) Store(b MCMP4R_Bits) { rm.UM32.Store(uint32(b)) }
