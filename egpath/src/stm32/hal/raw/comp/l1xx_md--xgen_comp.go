// +build l1xx_md

package comp

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"

	"stm32/o/l1xx_md/mmap"
)

type COMP_Periph struct {
	CSR RCSR
}

func (p *COMP_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var COMP = (*COMP_Periph)(unsafe.Pointer(uintptr(mmap.COMP_BASE)))

type CSR uint32

func (b CSR) Field(mask CSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR) J(v int) CSR {
	return CSR(bits.MakeField32(v, uint32(mask)))
}

type RCSR struct{ mmio.U32 }

func (r *RCSR) Bits(mask CSR) CSR     { return CSR(r.U32.Bits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

func (r *RCSR) AtomicStoreBits(mask, b CSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) AtomicSetBits(mask CSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR) AtomicClearBits(mask CSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *COMP_Periph) V10KPU() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(V10KPU)}}
}

func (p *COMP_Periph) V400KPU() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(V400KPU)}}
}

func (p *COMP_Periph) V10KPD() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(V10KPD)}}
}

func (p *COMP_Periph) V400KPD() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(V400KPD)}}
}

func (p *COMP_Periph) CMP1EN() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CMP1EN)}}
}

func (p *COMP_Periph) SW1() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(SW1)}}
}

func (p *COMP_Periph) CMP1OUT() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CMP1OUT)}}
}

func (p *COMP_Periph) SPEED() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(SPEED)}}
}

func (p *COMP_Periph) CMP2OUT() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CMP2OUT)}}
}

func (p *COMP_Periph) VREFOUTEN() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(VREFOUTEN)}}
}

func (p *COMP_Periph) WNDWE() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(WNDWE)}}
}

func (p *COMP_Periph) INSEL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(INSEL)}}
}

func (p *COMP_Periph) OUTSEL() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(OUTSEL)}}
}

func (p *COMP_Periph) FCH3() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(FCH3)}}
}

func (p *COMP_Periph) FCH8() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(FCH8)}}
}

func (p *COMP_Periph) RCH13() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(RCH13)}}
}

func (p *COMP_Periph) CAIE() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CAIE)}}
}

func (p *COMP_Periph) CAIF() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CAIF)}}
}

func (p *COMP_Periph) TSUSP() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TSUSP)}}
}
