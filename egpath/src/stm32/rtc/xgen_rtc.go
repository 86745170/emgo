package rtc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type Clock struct {
	TR       TR
	DR       DR
	CR       CR
	ISR      ISR
	PRER     PRER
	WUTR     WUTR
	CALIBR   CALIBR
	ALRMAR   ALRMAR
	ALRMBR   ALRMBR
	WPR      WPR
	SSR      SSR
	SHIFTR   SHIFTR
	TSTR     TSTR
	TSDR     TSDR
	TSSSR    TSSSR
	CALR     CALR
	TAFCR    TAFCR
	ALRMASSR ALRMASSR
	ALRMBSSR ALRMBSSR
}

var RTC = (*Clock)(unsafe.Pointer(uintptr(0x40002800)))

type TR_Bits uint32

func (b TR_Bits) Field(mask TR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TR_Bits) J(v int) TR_Bits {
	return TR_Bits(bits.Make32(v, uint32(mask)))
}

type TR struct{ r mmio.U32 }

func (r *TR) Bits(mask TR_Bits) TR_Bits { return TR_Bits(r.r.Bits(uint32(mask))) }
func (r *TR) StoreBits(mask, b TR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *TR) SetBits(mask TR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *TR) ClearBits(mask TR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *TR) Load() TR_Bits             { return TR_Bits(r.r.Load()) }
func (r *TR) Store(b TR_Bits)           { r.r.Store(uint32(b)) }

func (p *Clock) SU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(SU),
	}
}
func (p *Clock) ST() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(ST),
	}
}
func (p *Clock) MNU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(MNU),
	}
}
func (p *Clock) MNT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(MNT),
	}
}
func (p *Clock) HU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(HU),
	}
}
func (p *Clock) HT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(HT),
	}
}
func (p *Clock) PM() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(PM),
	}
}

type DR_Bits uint32

func (b DR_Bits) Field(mask DR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DR_Bits) J(v int) DR_Bits {
	return DR_Bits(bits.Make32(v, uint32(mask)))
}

type DR struct{ r mmio.U32 }

func (r *DR) Bits(mask DR_Bits) DR_Bits { return DR_Bits(r.r.Bits(uint32(mask))) }
func (r *DR) StoreBits(mask, b DR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *DR) SetBits(mask DR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *DR) ClearBits(mask DR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *DR) Load() DR_Bits             { return DR_Bits(r.r.Load()) }
func (r *DR) Store(b DR_Bits)           { r.r.Store(uint32(b)) }

func (p *Clock) DU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(DU),
	}
}
func (p *Clock) DT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(DT),
	}
}
func (p *Clock) MU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(MU),
	}
}
func (p *Clock) MT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(MT),
	}
}
func (p *Clock) WDU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(WDU),
	}
}
func (p *Clock) YU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(YU),
	}
}
func (p *Clock) YT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(YT),
	}
}

type CR_Bits uint32

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR_Bits) J(v int) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}

type CR struct{ r mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.r.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.r.Load()) }
func (r *CR) Store(b CR_Bits)           { r.r.Store(uint32(b)) }

func (p *Clock) WUCKSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(WUCKSEL),
	}
}
func (p *Clock) TSEDGE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(TSEDGE),
	}
}
func (p *Clock) REFCKON() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(REFCKON),
	}
}
func (p *Clock) BYPSHAD() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(BYPSHAD),
	}
}
func (p *Clock) FMT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(FMT),
	}
}
func (p *Clock) DCE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(DCE),
	}
}
func (p *Clock) ALRAE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(ALRAE),
	}
}
func (p *Clock) ALRBE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(ALRBE),
	}
}
func (p *Clock) WUTE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(WUTE),
	}
}
func (p *Clock) TSE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(TSE),
	}
}
func (p *Clock) ALRAIE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(ALRAIE),
	}
}
func (p *Clock) ALRBIE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(ALRBIE),
	}
}
func (p *Clock) WUTIE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(WUTIE),
	}
}
func (p *Clock) TSIE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(TSIE),
	}
}
func (p *Clock) ADD1H() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(ADD1H),
	}
}
func (p *Clock) SUB1H() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(SUB1H),
	}
}
func (p *Clock) BKP() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(BKP),
	}
}
func (p *Clock) COSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(COSEL),
	}
}
func (p *Clock) POL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(POL),
	}
}
func (p *Clock) OSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(OSEL),
	}
}
func (p *Clock) COE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(COE),
	}
}

type ISR_Bits uint32

func (b ISR_Bits) Field(mask ISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ISR_Bits) J(v int) ISR_Bits {
	return ISR_Bits(bits.Make32(v, uint32(mask)))
}

type ISR struct{ r mmio.U32 }

func (r *ISR) Bits(mask ISR_Bits) ISR_Bits { return ISR_Bits(r.r.Bits(uint32(mask))) }
func (r *ISR) StoreBits(mask, b ISR_Bits)  { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *ISR) SetBits(mask ISR_Bits)       { r.r.SetBits(uint32(mask)) }
func (r *ISR) ClearBits(mask ISR_Bits)     { r.r.ClearBits(uint32(mask)) }
func (r *ISR) Load() ISR_Bits              { return ISR_Bits(r.r.Load()) }
func (r *ISR) Store(b ISR_Bits)            { r.r.Store(uint32(b)) }

func (p *Clock) ALRAWF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(ALRAWF),
	}
}
func (p *Clock) ALRBWF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(ALRBWF),
	}
}
func (p *Clock) WUTWF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(WUTWF),
	}
}
func (p *Clock) SHPF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(SHPF),
	}
}
func (p *Clock) INITS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(INITS),
	}
}
func (p *Clock) RSF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(RSF),
	}
}
func (p *Clock) INITF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(INITF),
	}
}
func (p *Clock) INIT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(INIT),
	}
}
func (p *Clock) ALRAF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(ALRAF),
	}
}
func (p *Clock) ALRBF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(ALRBF),
	}
}
func (p *Clock) WUTF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(WUTF),
	}
}
func (p *Clock) TSF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(TSF),
	}
}
func (p *Clock) TSOVF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(TSOVF),
	}
}
func (p *Clock) TAMP1F() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(TAMP1F),
	}
}
func (p *Clock) TAMP2F() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(TAMP2F),
	}
}
func (p *Clock) RECALPF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(RECALPF),
	}
}

type PRER_Bits uint32

func (b PRER_Bits) Field(mask PRER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PRER_Bits) J(v int) PRER_Bits {
	return PRER_Bits(bits.Make32(v, uint32(mask)))
}

type PRER struct{ r mmio.U32 }

func (r *PRER) Bits(mask PRER_Bits) PRER_Bits { return PRER_Bits(r.r.Bits(uint32(mask))) }
func (r *PRER) StoreBits(mask, b PRER_Bits)   { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *PRER) SetBits(mask PRER_Bits)        { r.r.SetBits(uint32(mask)) }
func (r *PRER) ClearBits(mask PRER_Bits)      { r.r.ClearBits(uint32(mask)) }
func (r *PRER) Load() PRER_Bits               { return PRER_Bits(r.r.Load()) }
func (r *PRER) Store(b PRER_Bits)             { r.r.Store(uint32(b)) }

func (p *Clock) PREDIV_S() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 16)), uint32(PREDIV_S),
	}
}
func (p *Clock) PREDIV_A() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 16)), uint32(PREDIV_A),
	}
}

type WUTR_Bits uint32

func (b WUTR_Bits) Field(mask WUTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WUTR_Bits) J(v int) WUTR_Bits {
	return WUTR_Bits(bits.Make32(v, uint32(mask)))
}

type WUTR struct{ r mmio.U32 }

func (r *WUTR) Bits(mask WUTR_Bits) WUTR_Bits { return WUTR_Bits(r.r.Bits(uint32(mask))) }
func (r *WUTR) StoreBits(mask, b WUTR_Bits)   { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *WUTR) SetBits(mask WUTR_Bits)        { r.r.SetBits(uint32(mask)) }
func (r *WUTR) ClearBits(mask WUTR_Bits)      { r.r.ClearBits(uint32(mask)) }
func (r *WUTR) Load() WUTR_Bits               { return WUTR_Bits(r.r.Load()) }
func (r *WUTR) Store(b WUTR_Bits)             { r.r.Store(uint32(b)) }

type CALIBR_Bits uint32

func (b CALIBR_Bits) Field(mask CALIBR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CALIBR_Bits) J(v int) CALIBR_Bits {
	return CALIBR_Bits(bits.Make32(v, uint32(mask)))
}

type CALIBR struct{ r mmio.U32 }

func (r *CALIBR) Bits(mask CALIBR_Bits) CALIBR_Bits { return CALIBR_Bits(r.r.Bits(uint32(mask))) }
func (r *CALIBR) StoreBits(mask, b CALIBR_Bits)     { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CALIBR) SetBits(mask CALIBR_Bits)          { r.r.SetBits(uint32(mask)) }
func (r *CALIBR) ClearBits(mask CALIBR_Bits)        { r.r.ClearBits(uint32(mask)) }
func (r *CALIBR) Load() CALIBR_Bits                 { return CALIBR_Bits(r.r.Load()) }
func (r *CALIBR) Store(b CALIBR_Bits)               { r.r.Store(uint32(b)) }

func (p *Clock) DC() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 24)), uint32(DC),
	}
}
func (p *Clock) DCS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 24)), uint32(DCS),
	}
}

type ALRMAR_Bits uint32

func (b ALRMAR_Bits) Field(mask ALRMAR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ALRMAR_Bits) J(v int) ALRMAR_Bits {
	return ALRMAR_Bits(bits.Make32(v, uint32(mask)))
}

type ALRMAR struct{ r mmio.U32 }

func (r *ALRMAR) Bits(mask ALRMAR_Bits) ALRMAR_Bits { return ALRMAR_Bits(r.r.Bits(uint32(mask))) }
func (r *ALRMAR) StoreBits(mask, b ALRMAR_Bits)     { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *ALRMAR) SetBits(mask ALRMAR_Bits)          { r.r.SetBits(uint32(mask)) }
func (r *ALRMAR) ClearBits(mask ALRMAR_Bits)        { r.r.ClearBits(uint32(mask)) }
func (r *ALRMAR) Load() ALRMAR_Bits                 { return ALRMAR_Bits(r.r.Load()) }
func (r *ALRMAR) Store(b ALRMAR_Bits)               { r.r.Store(uint32(b)) }

func (p *Clock) ASU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(ASU),
	}
}
func (p *Clock) AST() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AST),
	}
}
func (p *Clock) AMSK1() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AMSK1),
	}
}
func (p *Clock) AMNU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AMNU),
	}
}
func (p *Clock) AMNT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AMNT),
	}
}
func (p *Clock) AMSK2() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AMSK2),
	}
}
func (p *Clock) AHU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AHU),
	}
}
func (p *Clock) AHT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AHT),
	}
}
func (p *Clock) APM() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(APM),
	}
}
func (p *Clock) AMSK3() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AMSK3),
	}
}
func (p *Clock) ADU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(ADU),
	}
}
func (p *Clock) ADT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(ADT),
	}
}
func (p *Clock) AWDSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AWDSEL),
	}
}
func (p *Clock) AMSK4() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(AMSK4),
	}
}

type ALRMBR_Bits uint32

func (b ALRMBR_Bits) Field(mask ALRMBR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ALRMBR_Bits) J(v int) ALRMBR_Bits {
	return ALRMBR_Bits(bits.Make32(v, uint32(mask)))
}

type ALRMBR struct{ r mmio.U32 }

func (r *ALRMBR) Bits(mask ALRMBR_Bits) ALRMBR_Bits { return ALRMBR_Bits(r.r.Bits(uint32(mask))) }
func (r *ALRMBR) StoreBits(mask, b ALRMBR_Bits)     { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *ALRMBR) SetBits(mask ALRMBR_Bits)          { r.r.SetBits(uint32(mask)) }
func (r *ALRMBR) ClearBits(mask ALRMBR_Bits)        { r.r.ClearBits(uint32(mask)) }
func (r *ALRMBR) Load() ALRMBR_Bits                 { return ALRMBR_Bits(r.r.Load()) }
func (r *ALRMBR) Store(b ALRMBR_Bits)               { r.r.Store(uint32(b)) }

func (p *Clock) BSU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BSU),
	}
}
func (p *Clock) BST() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BST),
	}
}
func (p *Clock) BMSK1() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BMSK1),
	}
}
func (p *Clock) BMNU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BMNU),
	}
}
func (p *Clock) BMNT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BMNT),
	}
}
func (p *Clock) BMSK2() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BMSK2),
	}
}
func (p *Clock) BHU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BHU),
	}
}
func (p *Clock) BHT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BHT),
	}
}
func (p *Clock) BPM() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BPM),
	}
}
func (p *Clock) BMSK3() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BMSK3),
	}
}
func (p *Clock) BDU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BDU),
	}
}
func (p *Clock) BDT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BDT),
	}
}
func (p *Clock) BWDSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BWDSEL),
	}
}
func (p *Clock) BMSK4() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(BMSK4),
	}
}

type WPR_Bits uint32

func (b WPR_Bits) Field(mask WPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask WPR_Bits) J(v int) WPR_Bits {
	return WPR_Bits(bits.Make32(v, uint32(mask)))
}

type WPR struct{ r mmio.U32 }

func (r *WPR) Bits(mask WPR_Bits) WPR_Bits { return WPR_Bits(r.r.Bits(uint32(mask))) }
func (r *WPR) StoreBits(mask, b WPR_Bits)  { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *WPR) SetBits(mask WPR_Bits)       { r.r.SetBits(uint32(mask)) }
func (r *WPR) ClearBits(mask WPR_Bits)     { r.r.ClearBits(uint32(mask)) }
func (r *WPR) Load() WPR_Bits              { return WPR_Bits(r.r.Load()) }
func (r *WPR) Store(b WPR_Bits)            { r.r.Store(uint32(b)) }

type SSR_Bits uint32

func (b SSR_Bits) Field(mask SSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SSR_Bits) J(v int) SSR_Bits {
	return SSR_Bits(bits.Make32(v, uint32(mask)))
}

type SSR struct{ r mmio.U32 }

func (r *SSR) Bits(mask SSR_Bits) SSR_Bits { return SSR_Bits(r.r.Bits(uint32(mask))) }
func (r *SSR) StoreBits(mask, b SSR_Bits)  { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *SSR) SetBits(mask SSR_Bits)       { r.r.SetBits(uint32(mask)) }
func (r *SSR) ClearBits(mask SSR_Bits)     { r.r.ClearBits(uint32(mask)) }
func (r *SSR) Load() SSR_Bits              { return SSR_Bits(r.r.Load()) }
func (r *SSR) Store(b SSR_Bits)            { r.r.Store(uint32(b)) }

type SHIFTR_Bits uint32

func (b SHIFTR_Bits) Field(mask SHIFTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SHIFTR_Bits) J(v int) SHIFTR_Bits {
	return SHIFTR_Bits(bits.Make32(v, uint32(mask)))
}

type SHIFTR struct{ r mmio.U32 }

func (r *SHIFTR) Bits(mask SHIFTR_Bits) SHIFTR_Bits { return SHIFTR_Bits(r.r.Bits(uint32(mask))) }
func (r *SHIFTR) StoreBits(mask, b SHIFTR_Bits)     { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *SHIFTR) SetBits(mask SHIFTR_Bits)          { r.r.SetBits(uint32(mask)) }
func (r *SHIFTR) ClearBits(mask SHIFTR_Bits)        { r.r.ClearBits(uint32(mask)) }
func (r *SHIFTR) Load() SHIFTR_Bits                 { return SHIFTR_Bits(r.r.Load()) }
func (r *SHIFTR) Store(b SHIFTR_Bits)               { r.r.Store(uint32(b)) }

func (p *Clock) SUBFS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 44)), uint32(SUBFS),
	}
}
func (p *Clock) ADD1S() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 44)), uint32(ADD1S),
	}
}

type TSTR_Bits uint32

func (b TSTR_Bits) Field(mask TSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TSTR_Bits) J(v int) TSTR_Bits {
	return TSTR_Bits(bits.Make32(v, uint32(mask)))
}

type TSTR struct{ r mmio.U32 }

func (r *TSTR) Bits(mask TSTR_Bits) TSTR_Bits { return TSTR_Bits(r.r.Bits(uint32(mask))) }
func (r *TSTR) StoreBits(mask, b TSTR_Bits)   { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *TSTR) SetBits(mask TSTR_Bits)        { r.r.SetBits(uint32(mask)) }
func (r *TSTR) ClearBits(mask TSTR_Bits)      { r.r.ClearBits(uint32(mask)) }
func (r *TSTR) Load() TSTR_Bits               { return TSTR_Bits(r.r.Load()) }
func (r *TSTR) Store(b TSTR_Bits)             { r.r.Store(uint32(b)) }

func (p *Clock) TSU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 48)), uint32(TSU),
	}
}
func (p *Clock) TST() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 48)), uint32(TST),
	}
}
func (p *Clock) TMNU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 48)), uint32(TMNU),
	}
}
func (p *Clock) TMNT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 48)), uint32(TMNT),
	}
}
func (p *Clock) THU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 48)), uint32(THU),
	}
}
func (p *Clock) THT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 48)), uint32(THT),
	}
}
func (p *Clock) TPM() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 48)), uint32(TPM),
	}
}

type TSDR_Bits uint32

func (b TSDR_Bits) Field(mask TSDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TSDR_Bits) J(v int) TSDR_Bits {
	return TSDR_Bits(bits.Make32(v, uint32(mask)))
}

type TSDR struct{ r mmio.U32 }

func (r *TSDR) Bits(mask TSDR_Bits) TSDR_Bits { return TSDR_Bits(r.r.Bits(uint32(mask))) }
func (r *TSDR) StoreBits(mask, b TSDR_Bits)   { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *TSDR) SetBits(mask TSDR_Bits)        { r.r.SetBits(uint32(mask)) }
func (r *TSDR) ClearBits(mask TSDR_Bits)      { r.r.ClearBits(uint32(mask)) }
func (r *TSDR) Load() TSDR_Bits               { return TSDR_Bits(r.r.Load()) }
func (r *TSDR) Store(b TSDR_Bits)             { r.r.Store(uint32(b)) }

func (p *Clock) TDU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 52)), uint32(TDU),
	}
}
func (p *Clock) TDT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 52)), uint32(TDT),
	}
}
func (p *Clock) TMU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 52)), uint32(TMU),
	}
}
func (p *Clock) TMT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 52)), uint32(TMT),
	}
}
func (p *Clock) TWDU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 52)), uint32(TWDU),
	}
}

type TSSSR_Bits uint32

func (b TSSSR_Bits) Field(mask TSSSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TSSSR_Bits) J(v int) TSSSR_Bits {
	return TSSSR_Bits(bits.Make32(v, uint32(mask)))
}

type TSSSR struct{ r mmio.U32 }

func (r *TSSSR) Bits(mask TSSSR_Bits) TSSSR_Bits { return TSSSR_Bits(r.r.Bits(uint32(mask))) }
func (r *TSSSR) StoreBits(mask, b TSSSR_Bits)    { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *TSSSR) SetBits(mask TSSSR_Bits)         { r.r.SetBits(uint32(mask)) }
func (r *TSSSR) ClearBits(mask TSSSR_Bits)       { r.r.ClearBits(uint32(mask)) }
func (r *TSSSR) Load() TSSSR_Bits                { return TSSSR_Bits(r.r.Load()) }
func (r *TSSSR) Store(b TSSSR_Bits)              { r.r.Store(uint32(b)) }

type CALR_Bits uint32

func (b CALR_Bits) Field(mask CALR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CALR_Bits) J(v int) CALR_Bits {
	return CALR_Bits(bits.Make32(v, uint32(mask)))
}

type CALR struct{ r mmio.U32 }

func (r *CALR) Bits(mask CALR_Bits) CALR_Bits { return CALR_Bits(r.r.Bits(uint32(mask))) }
func (r *CALR) StoreBits(mask, b CALR_Bits)   { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CALR) SetBits(mask CALR_Bits)        { r.r.SetBits(uint32(mask)) }
func (r *CALR) ClearBits(mask CALR_Bits)      { r.r.ClearBits(uint32(mask)) }
func (r *CALR) Load() CALR_Bits               { return CALR_Bits(r.r.Load()) }
func (r *CALR) Store(b CALR_Bits)             { r.r.Store(uint32(b)) }

func (p *Clock) CALM() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 60)), uint32(CALM),
	}
}
func (p *Clock) CALW16() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 60)), uint32(CALW16),
	}
}
func (p *Clock) CALW8() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 60)), uint32(CALW8),
	}
}
func (p *Clock) CALP() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 60)), uint32(CALP),
	}
}

type TAFCR_Bits uint32

func (b TAFCR_Bits) Field(mask TAFCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask TAFCR_Bits) J(v int) TAFCR_Bits {
	return TAFCR_Bits(bits.Make32(v, uint32(mask)))
}

type TAFCR struct{ r mmio.U32 }

func (r *TAFCR) Bits(mask TAFCR_Bits) TAFCR_Bits { return TAFCR_Bits(r.r.Bits(uint32(mask))) }
func (r *TAFCR) StoreBits(mask, b TAFCR_Bits)    { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *TAFCR) SetBits(mask TAFCR_Bits)         { r.r.SetBits(uint32(mask)) }
func (r *TAFCR) ClearBits(mask TAFCR_Bits)       { r.r.ClearBits(uint32(mask)) }
func (r *TAFCR) Load() TAFCR_Bits                { return TAFCR_Bits(r.r.Load()) }
func (r *TAFCR) Store(b TAFCR_Bits)              { r.r.Store(uint32(b)) }

func (p *Clock) TAMP1E() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMP1E),
	}
}
func (p *Clock) TAMP1TRG() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMP1TRG),
	}
}
func (p *Clock) TAMPIE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMPIE),
	}
}
func (p *Clock) TAMP2E() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMP2E),
	}
}
func (p *Clock) TAMP2TRG() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMP2TRG),
	}
}
func (p *Clock) TAMPTS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMPTS),
	}
}
func (p *Clock) TAMPFREQ() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMPFREQ),
	}
}
func (p *Clock) TAMPFLT() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMPFLT),
	}
}
func (p *Clock) TAMPPRCH() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMPPRCH),
	}
}
func (p *Clock) TAMPPUDIS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMPPUDIS),
	}
}
func (p *Clock) TAMP1INSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TAMP1INSEL),
	}
}
func (p *Clock) TSINSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(TSINSEL),
	}
}
func (p *Clock) ALARMOUTTYPE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 64)), uint32(ALARMOUTTYPE),
	}
}

type ALRMASSR_Bits uint32

func (b ALRMASSR_Bits) Field(mask ALRMASSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ALRMASSR_Bits) J(v int) ALRMASSR_Bits {
	return ALRMASSR_Bits(bits.Make32(v, uint32(mask)))
}

type ALRMASSR struct{ r mmio.U32 }

func (r *ALRMASSR) Bits(mask ALRMASSR_Bits) ALRMASSR_Bits {
	return ALRMASSR_Bits(r.r.Bits(uint32(mask)))
}
func (r *ALRMASSR) StoreBits(mask, b ALRMASSR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *ALRMASSR) SetBits(mask ALRMASSR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *ALRMASSR) ClearBits(mask ALRMASSR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *ALRMASSR) Load() ALRMASSR_Bits             { return ALRMASSR_Bits(r.r.Load()) }
func (r *ALRMASSR) Store(b ALRMASSR_Bits)           { r.r.Store(uint32(b)) }

func (p *Clock) ASS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 68)), uint32(ASS),
	}
}
func (p *Clock) AMASKSS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 68)), uint32(AMASKSS),
	}
}

type ALRMBSSR_Bits uint32

func (b ALRMBSSR_Bits) Field(mask ALRMBSSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ALRMBSSR_Bits) J(v int) ALRMBSSR_Bits {
	return ALRMBSSR_Bits(bits.Make32(v, uint32(mask)))
}

type ALRMBSSR struct{ r mmio.U32 }

func (r *ALRMBSSR) Bits(mask ALRMBSSR_Bits) ALRMBSSR_Bits {
	return ALRMBSSR_Bits(r.r.Bits(uint32(mask)))
}
func (r *ALRMBSSR) StoreBits(mask, b ALRMBSSR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *ALRMBSSR) SetBits(mask ALRMBSSR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *ALRMBSSR) ClearBits(mask ALRMBSSR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *ALRMBSSR) Load() ALRMBSSR_Bits             { return ALRMBSSR_Bits(r.r.Load()) }
func (r *ALRMBSSR) Store(b ALRMBSSR_Bits)           { r.r.Store(uint32(b)) }

func (p *Clock) BSS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 72)), uint32(BSS),
	}
}
func (p *Clock) BMASKSS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 72)), uint32(BMASKSS),
	}
}
