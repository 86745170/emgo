package rtc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)


func rtc(n uint) *mmio.U32 {
	return &(*[19]mmio.U32)(unsafe.Pointer(uintptr(0x40002800)))[n]
}


type TR_Bits uint32

func (m TR_Bits) Set()           { rtc(0).SetBits(uint32(m)) }
func (m TR_Bits) Clear()         { rtc(0).ClearBits(uint32(m)) }
func (m TR_Bits) Load() uint32   { return rtc(0).Bits(uint32(m)) }
func (m TR_Bits) Store(b uint32) { rtc(0).StoreBits(uint32(m), b) }
func (m TR_Bits) LoadVal() int   { return rtc(0).Field(uint32(m)) }
func (m TR_Bits) StoreVal(v int) { rtc(0).SetField(uint32(m), v) }

func TR_Load() TR_Bits   { return TR_Bits(rtc(0).Load()) }
func TR_Store(b TR_Bits) { rtc(0).Store(uint32(b)) }

func (b TR_Bits) Field(mask TR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_TR(v int, mask TR_Bits) TR_Bits {
	return TR_Bits(bits.Make32(v, uint32(mask)))
}


type DR_Bits uint32

func (m DR_Bits) Set()           { rtc(1).SetBits(uint32(m)) }
func (m DR_Bits) Clear()         { rtc(1).ClearBits(uint32(m)) }
func (m DR_Bits) Load() uint32   { return rtc(1).Bits(uint32(m)) }
func (m DR_Bits) Store(b uint32) { rtc(1).StoreBits(uint32(m), b) }
func (m DR_Bits) LoadVal() int   { return rtc(1).Field(uint32(m)) }
func (m DR_Bits) StoreVal(v int) { rtc(1).SetField(uint32(m), v) }

func DR_Load() DR_Bits   { return DR_Bits(rtc(1).Load()) }
func DR_Store(b DR_Bits) { rtc(1).Store(uint32(b)) }

func (b DR_Bits) Field(mask DR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_DR(v int, mask DR_Bits) DR_Bits {
	return DR_Bits(bits.Make32(v, uint32(mask)))
}


type CR_Bits uint32

func (m CR_Bits) Set()           { rtc(2).SetBits(uint32(m)) }
func (m CR_Bits) Clear()         { rtc(2).ClearBits(uint32(m)) }
func (m CR_Bits) Load() uint32   { return rtc(2).Bits(uint32(m)) }
func (m CR_Bits) Store(b uint32) { rtc(2).StoreBits(uint32(m), b) }
func (m CR_Bits) LoadVal() int   { return rtc(2).Field(uint32(m)) }
func (m CR_Bits) StoreVal(v int) { rtc(2).SetField(uint32(m), v) }

func CR_Load() CR_Bits   { return CR_Bits(rtc(2).Load()) }
func CR_Store(b CR_Bits) { rtc(2).Store(uint32(b)) }

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CR(v int, mask CR_Bits) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}


type ISR_Bits uint32

func (m ISR_Bits) Set()           { rtc(3).SetBits(uint32(m)) }
func (m ISR_Bits) Clear()         { rtc(3).ClearBits(uint32(m)) }
func (m ISR_Bits) Load() uint32   { return rtc(3).Bits(uint32(m)) }
func (m ISR_Bits) Store(b uint32) { rtc(3).StoreBits(uint32(m), b) }
func (m ISR_Bits) LoadVal() int   { return rtc(3).Field(uint32(m)) }
func (m ISR_Bits) StoreVal(v int) { rtc(3).SetField(uint32(m), v) }

func ISR_Load() ISR_Bits   { return ISR_Bits(rtc(3).Load()) }
func ISR_Store(b ISR_Bits) { rtc(3).Store(uint32(b)) }

func (b ISR_Bits) Field(mask ISR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_ISR(v int, mask ISR_Bits) ISR_Bits {
	return ISR_Bits(bits.Make32(v, uint32(mask)))
}


type PRER_Bits uint32

func (m PRER_Bits) Set()           { rtc(4).SetBits(uint32(m)) }
func (m PRER_Bits) Clear()         { rtc(4).ClearBits(uint32(m)) }
func (m PRER_Bits) Load() uint32   { return rtc(4).Bits(uint32(m)) }
func (m PRER_Bits) Store(b uint32) { rtc(4).StoreBits(uint32(m), b) }
func (m PRER_Bits) LoadVal() int   { return rtc(4).Field(uint32(m)) }
func (m PRER_Bits) StoreVal(v int) { rtc(4).SetField(uint32(m), v) }

func PRER_Load() PRER_Bits   { return PRER_Bits(rtc(4).Load()) }
func PRER_Store(b PRER_Bits) { rtc(4).Store(uint32(b)) }

func (b PRER_Bits) Field(mask PRER_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_PRER(v int, mask PRER_Bits) PRER_Bits {
	return PRER_Bits(bits.Make32(v, uint32(mask)))
}


type WUTR_Bits uint32

func (m WUTR_Bits) Set()           { rtc(5).SetBits(uint32(m)) }
func (m WUTR_Bits) Clear()         { rtc(5).ClearBits(uint32(m)) }
func (m WUTR_Bits) Load() uint32   { return rtc(5).Bits(uint32(m)) }
func (m WUTR_Bits) Store(b uint32) { rtc(5).StoreBits(uint32(m), b) }
func (m WUTR_Bits) LoadVal() int   { return rtc(5).Field(uint32(m)) }
func (m WUTR_Bits) StoreVal(v int) { rtc(5).SetField(uint32(m), v) }

func WUTR_Load() WUTR_Bits   { return WUTR_Bits(rtc(5).Load()) }
func WUTR_Store(b WUTR_Bits) { rtc(5).Store(uint32(b)) }

func (b WUTR_Bits) Field(mask WUTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_WUTR(v int, mask WUTR_Bits) WUTR_Bits {
	return WUTR_Bits(bits.Make32(v, uint32(mask)))
}


type CALIBR_Bits uint32

func (m CALIBR_Bits) Set()           { rtc(6).SetBits(uint32(m)) }
func (m CALIBR_Bits) Clear()         { rtc(6).ClearBits(uint32(m)) }
func (m CALIBR_Bits) Load() uint32   { return rtc(6).Bits(uint32(m)) }
func (m CALIBR_Bits) Store(b uint32) { rtc(6).StoreBits(uint32(m), b) }
func (m CALIBR_Bits) LoadVal() int   { return rtc(6).Field(uint32(m)) }
func (m CALIBR_Bits) StoreVal(v int) { rtc(6).SetField(uint32(m), v) }

func CALIBR_Load() CALIBR_Bits   { return CALIBR_Bits(rtc(6).Load()) }
func CALIBR_Store(b CALIBR_Bits) { rtc(6).Store(uint32(b)) }

func (b CALIBR_Bits) Field(mask CALIBR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CALIBR(v int, mask CALIBR_Bits) CALIBR_Bits {
	return CALIBR_Bits(bits.Make32(v, uint32(mask)))
}


type ALRMAR_Bits uint32

func (m ALRMAR_Bits) Set()           { rtc(7).SetBits(uint32(m)) }
func (m ALRMAR_Bits) Clear()         { rtc(7).ClearBits(uint32(m)) }
func (m ALRMAR_Bits) Load() uint32   { return rtc(7).Bits(uint32(m)) }
func (m ALRMAR_Bits) Store(b uint32) { rtc(7).StoreBits(uint32(m), b) }
func (m ALRMAR_Bits) LoadVal() int   { return rtc(7).Field(uint32(m)) }
func (m ALRMAR_Bits) StoreVal(v int) { rtc(7).SetField(uint32(m), v) }

func ALRMAR_Load() ALRMAR_Bits   { return ALRMAR_Bits(rtc(7).Load()) }
func ALRMAR_Store(b ALRMAR_Bits) { rtc(7).Store(uint32(b)) }

func (b ALRMAR_Bits) Field(mask ALRMAR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_ALRMAR(v int, mask ALRMAR_Bits) ALRMAR_Bits {
	return ALRMAR_Bits(bits.Make32(v, uint32(mask)))
}


type ALRMBR_Bits uint32

func (m ALRMBR_Bits) Set()           { rtc(8).SetBits(uint32(m)) }
func (m ALRMBR_Bits) Clear()         { rtc(8).ClearBits(uint32(m)) }
func (m ALRMBR_Bits) Load() uint32   { return rtc(8).Bits(uint32(m)) }
func (m ALRMBR_Bits) Store(b uint32) { rtc(8).StoreBits(uint32(m), b) }
func (m ALRMBR_Bits) LoadVal() int   { return rtc(8).Field(uint32(m)) }
func (m ALRMBR_Bits) StoreVal(v int) { rtc(8).SetField(uint32(m), v) }

func ALRMBR_Load() ALRMBR_Bits   { return ALRMBR_Bits(rtc(8).Load()) }
func ALRMBR_Store(b ALRMBR_Bits) { rtc(8).Store(uint32(b)) }

func (b ALRMBR_Bits) Field(mask ALRMBR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_ALRMBR(v int, mask ALRMBR_Bits) ALRMBR_Bits {
	return ALRMBR_Bits(bits.Make32(v, uint32(mask)))
}


type WPR_Bits uint32

func (m WPR_Bits) Set()           { rtc(9).SetBits(uint32(m)) }
func (m WPR_Bits) Clear()         { rtc(9).ClearBits(uint32(m)) }
func (m WPR_Bits) Load() uint32   { return rtc(9).Bits(uint32(m)) }
func (m WPR_Bits) Store(b uint32) { rtc(9).StoreBits(uint32(m), b) }
func (m WPR_Bits) LoadVal() int   { return rtc(9).Field(uint32(m)) }
func (m WPR_Bits) StoreVal(v int) { rtc(9).SetField(uint32(m), v) }

func WPR_Load() WPR_Bits   { return WPR_Bits(rtc(9).Load()) }
func WPR_Store(b WPR_Bits) { rtc(9).Store(uint32(b)) }

func (b WPR_Bits) Field(mask WPR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_WPR(v int, mask WPR_Bits) WPR_Bits {
	return WPR_Bits(bits.Make32(v, uint32(mask)))
}


type SSR_Bits uint32

func (m SSR_Bits) Set()           { rtc(10).SetBits(uint32(m)) }
func (m SSR_Bits) Clear()         { rtc(10).ClearBits(uint32(m)) }
func (m SSR_Bits) Load() uint32   { return rtc(10).Bits(uint32(m)) }
func (m SSR_Bits) Store(b uint32) { rtc(10).StoreBits(uint32(m), b) }
func (m SSR_Bits) LoadVal() int   { return rtc(10).Field(uint32(m)) }
func (m SSR_Bits) StoreVal(v int) { rtc(10).SetField(uint32(m), v) }

func SSR_Load() SSR_Bits   { return SSR_Bits(rtc(10).Load()) }
func SSR_Store(b SSR_Bits) { rtc(10).Store(uint32(b)) }

func (b SSR_Bits) Field(mask SSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SSR(v int, mask SSR_Bits) SSR_Bits {
	return SSR_Bits(bits.Make32(v, uint32(mask)))
}


type SHIFTR_Bits uint32

func (m SHIFTR_Bits) Set()           { rtc(11).SetBits(uint32(m)) }
func (m SHIFTR_Bits) Clear()         { rtc(11).ClearBits(uint32(m)) }
func (m SHIFTR_Bits) Load() uint32   { return rtc(11).Bits(uint32(m)) }
func (m SHIFTR_Bits) Store(b uint32) { rtc(11).StoreBits(uint32(m), b) }
func (m SHIFTR_Bits) LoadVal() int   { return rtc(11).Field(uint32(m)) }
func (m SHIFTR_Bits) StoreVal(v int) { rtc(11).SetField(uint32(m), v) }

func SHIFTR_Load() SHIFTR_Bits   { return SHIFTR_Bits(rtc(11).Load()) }
func SHIFTR_Store(b SHIFTR_Bits) { rtc(11).Store(uint32(b)) }

func (b SHIFTR_Bits) Field(mask SHIFTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SHIFTR(v int, mask SHIFTR_Bits) SHIFTR_Bits {
	return SHIFTR_Bits(bits.Make32(v, uint32(mask)))
}


type TSTR_Bits uint32

func (m TSTR_Bits) Set()           { rtc(12).SetBits(uint32(m)) }
func (m TSTR_Bits) Clear()         { rtc(12).ClearBits(uint32(m)) }
func (m TSTR_Bits) Load() uint32   { return rtc(12).Bits(uint32(m)) }
func (m TSTR_Bits) Store(b uint32) { rtc(12).StoreBits(uint32(m), b) }
func (m TSTR_Bits) LoadVal() int   { return rtc(12).Field(uint32(m)) }
func (m TSTR_Bits) StoreVal(v int) { rtc(12).SetField(uint32(m), v) }

func TSTR_Load() TSTR_Bits   { return TSTR_Bits(rtc(12).Load()) }
func TSTR_Store(b TSTR_Bits) { rtc(12).Store(uint32(b)) }

func (b TSTR_Bits) Field(mask TSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_TSTR(v int, mask TSTR_Bits) TSTR_Bits {
	return TSTR_Bits(bits.Make32(v, uint32(mask)))
}


type TSDR_Bits uint32

func (m TSDR_Bits) Set()           { rtc(13).SetBits(uint32(m)) }
func (m TSDR_Bits) Clear()         { rtc(13).ClearBits(uint32(m)) }
func (m TSDR_Bits) Load() uint32   { return rtc(13).Bits(uint32(m)) }
func (m TSDR_Bits) Store(b uint32) { rtc(13).StoreBits(uint32(m), b) }
func (m TSDR_Bits) LoadVal() int   { return rtc(13).Field(uint32(m)) }
func (m TSDR_Bits) StoreVal(v int) { rtc(13).SetField(uint32(m), v) }

func TSDR_Load() TSDR_Bits   { return TSDR_Bits(rtc(13).Load()) }
func TSDR_Store(b TSDR_Bits) { rtc(13).Store(uint32(b)) }

func (b TSDR_Bits) Field(mask TSDR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_TSDR(v int, mask TSDR_Bits) TSDR_Bits {
	return TSDR_Bits(bits.Make32(v, uint32(mask)))
}


type TSSSR_Bits uint32

func (m TSSSR_Bits) Set()           { rtc(14).SetBits(uint32(m)) }
func (m TSSSR_Bits) Clear()         { rtc(14).ClearBits(uint32(m)) }
func (m TSSSR_Bits) Load() uint32   { return rtc(14).Bits(uint32(m)) }
func (m TSSSR_Bits) Store(b uint32) { rtc(14).StoreBits(uint32(m), b) }
func (m TSSSR_Bits) LoadVal() int   { return rtc(14).Field(uint32(m)) }
func (m TSSSR_Bits) StoreVal(v int) { rtc(14).SetField(uint32(m), v) }

func TSSSR_Load() TSSSR_Bits   { return TSSSR_Bits(rtc(14).Load()) }
func TSSSR_Store(b TSSSR_Bits) { rtc(14).Store(uint32(b)) }

func (b TSSSR_Bits) Field(mask TSSSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_TSSSR(v int, mask TSSSR_Bits) TSSSR_Bits {
	return TSSSR_Bits(bits.Make32(v, uint32(mask)))
}


type CALR_Bits uint32

func (m CALR_Bits) Set()           { rtc(15).SetBits(uint32(m)) }
func (m CALR_Bits) Clear()         { rtc(15).ClearBits(uint32(m)) }
func (m CALR_Bits) Load() uint32   { return rtc(15).Bits(uint32(m)) }
func (m CALR_Bits) Store(b uint32) { rtc(15).StoreBits(uint32(m), b) }
func (m CALR_Bits) LoadVal() int   { return rtc(15).Field(uint32(m)) }
func (m CALR_Bits) StoreVal(v int) { rtc(15).SetField(uint32(m), v) }

func CALR_Load() CALR_Bits   { return CALR_Bits(rtc(15).Load()) }
func CALR_Store(b CALR_Bits) { rtc(15).Store(uint32(b)) }

func (b CALR_Bits) Field(mask CALR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CALR(v int, mask CALR_Bits) CALR_Bits {
	return CALR_Bits(bits.Make32(v, uint32(mask)))
}


type TAFCR_Bits uint32

func (m TAFCR_Bits) Set()           { rtc(16).SetBits(uint32(m)) }
func (m TAFCR_Bits) Clear()         { rtc(16).ClearBits(uint32(m)) }
func (m TAFCR_Bits) Load() uint32   { return rtc(16).Bits(uint32(m)) }
func (m TAFCR_Bits) Store(b uint32) { rtc(16).StoreBits(uint32(m), b) }
func (m TAFCR_Bits) LoadVal() int   { return rtc(16).Field(uint32(m)) }
func (m TAFCR_Bits) StoreVal(v int) { rtc(16).SetField(uint32(m), v) }

func TAFCR_Load() TAFCR_Bits   { return TAFCR_Bits(rtc(16).Load()) }
func TAFCR_Store(b TAFCR_Bits) { rtc(16).Store(uint32(b)) }

func (b TAFCR_Bits) Field(mask TAFCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_TAFCR(v int, mask TAFCR_Bits) TAFCR_Bits {
	return TAFCR_Bits(bits.Make32(v, uint32(mask)))
}


type ALRMASSR_Bits uint32

func (m ALRMASSR_Bits) Set()           { rtc(17).SetBits(uint32(m)) }
func (m ALRMASSR_Bits) Clear()         { rtc(17).ClearBits(uint32(m)) }
func (m ALRMASSR_Bits) Load() uint32   { return rtc(17).Bits(uint32(m)) }
func (m ALRMASSR_Bits) Store(b uint32) { rtc(17).StoreBits(uint32(m), b) }
func (m ALRMASSR_Bits) LoadVal() int   { return rtc(17).Field(uint32(m)) }
func (m ALRMASSR_Bits) StoreVal(v int) { rtc(17).SetField(uint32(m), v) }

func ALRMASSR_Load() ALRMASSR_Bits   { return ALRMASSR_Bits(rtc(17).Load()) }
func ALRMASSR_Store(b ALRMASSR_Bits) { rtc(17).Store(uint32(b)) }

func (b ALRMASSR_Bits) Field(mask ALRMASSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_ALRMASSR(v int, mask ALRMASSR_Bits) ALRMASSR_Bits {
	return ALRMASSR_Bits(bits.Make32(v, uint32(mask)))
}


type ALRMBSSR_Bits uint32

func (m ALRMBSSR_Bits) Set()           { rtc(18).SetBits(uint32(m)) }
func (m ALRMBSSR_Bits) Clear()         { rtc(18).ClearBits(uint32(m)) }
func (m ALRMBSSR_Bits) Load() uint32   { return rtc(18).Bits(uint32(m)) }
func (m ALRMBSSR_Bits) Store(b uint32) { rtc(18).StoreBits(uint32(m), b) }
func (m ALRMBSSR_Bits) LoadVal() int   { return rtc(18).Field(uint32(m)) }
func (m ALRMBSSR_Bits) StoreVal(v int) { rtc(18).SetField(uint32(m), v) }

func ALRMBSSR_Load() ALRMBSSR_Bits   { return ALRMBSSR_Bits(rtc(18).Load()) }
func ALRMBSSR_Store(b ALRMBSSR_Bits) { rtc(18).Store(uint32(b)) }

func (b ALRMBSSR_Bits) Field(mask ALRMBSSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_ALRMBSSR(v int, mask ALRMBSSR_Bits) ALRMBSSR_Bits {
	return ALRMBSSR_Bits(bits.Make32(v, uint32(mask)))
}

