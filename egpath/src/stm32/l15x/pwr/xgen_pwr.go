package pwr

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type Ctrl struct {
	CR  CR
	CSR CSR
}

var PWR = (*Ctrl)(unsafe.Pointer(uintptr(0x40007000)))

type CR_Bits uint32

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR_Bits) J(v int) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}

type CR struct{ r mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.r.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.r.Load()) }
func (r *CR) Store(b CR_Bits)           { r.r.Store(uint32(b)) }

func (p *Ctrl) LPSDSR() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(LPSDSR),
	}
}
func (p *Ctrl) PDDS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(PDDS),
	}
}
func (p *Ctrl) CWUF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(CWUF),
	}
}
func (p *Ctrl) CSBF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(CSBF),
	}
}
func (p *Ctrl) PVDE() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(PVDE),
	}
}
func (p *Ctrl) PLS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(PLS),
	}
}
func (p *Ctrl) DBP() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(DBP),
	}
}
func (p *Ctrl) ULP() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(ULP),
	}
}
func (p *Ctrl) FWU() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(FWU),
	}
}
func (p *Ctrl) VOS() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(VOS),
	}
}
func (p *Ctrl) LPRUN() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(LPRUN),
	}
}

type CSR_Bits uint32

func (b CSR_Bits) Field(mask CSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR_Bits) J(v int) CSR_Bits {
	return CSR_Bits(bits.Make32(v, uint32(mask)))
}

type CSR struct{ r mmio.U32 }

func (r *CSR) Bits(mask CSR_Bits) CSR_Bits { return CSR_Bits(r.r.Bits(uint32(mask))) }
func (r *CSR) StoreBits(mask, b CSR_Bits)  { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CSR) SetBits(mask CSR_Bits)       { r.r.SetBits(uint32(mask)) }
func (r *CSR) ClearBits(mask CSR_Bits)     { r.r.ClearBits(uint32(mask)) }
func (r *CSR) Load() CSR_Bits              { return CSR_Bits(r.r.Load()) }
func (r *CSR) Store(b CSR_Bits)            { r.r.Store(uint32(b)) }

func (p *Ctrl) WUF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(WUF),
	}
}
func (p *Ctrl) SBF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(SBF),
	}
}
func (p *Ctrl) PVDO() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(PVDO),
	}
}
func (p *Ctrl) VREFINTRDYF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(VREFINTRDYF),
	}
}
func (p *Ctrl) VOSF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(VOSF),
	}
}
func (p *Ctrl) REGLPF() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(REGLPF),
	}
}
func (p *Ctrl) EWUP1() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(EWUP1),
	}
}
func (p *Ctrl) EWUP2() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(EWUP2),
	}
}
func (p *Ctrl) EWUP3() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(EWUP3),
	}
}
