package rcc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type Ctrl struct {
	CR          CR
	PLLCFGR     PLLCFGR
	CFGR        CFGR
	CIR         CIR
	AHB1RSTR    AHB1RSTR
	AHB2RSTR    AHB2RSTR
	_           uint32
	_           uint32
	APB1RSTR    APB1RSTR
	APB2RSTR    APB2RSTR
	_           uint32
	_           uint32
	AHB1ENR     AHB1ENR
	AHB2ENR     AHB2ENR
	_           uint32
	_           uint32
	APB1ENR     APB1ENR
	APB2ENR     APB2ENR
	_           uint32
	_           uint32
	AHB1LPENR   AHB1LPENR
	AHB2LPENR   AHB2LPENR
	_           uint32
	_           uint32
	APB1LPENR   APB1LPENR
	APB2LPENR   APB2LPENR
	_           uint32
	_           uint32
	BDCR        BDCR
	CSR         CSR
	_           uint32
	_           uint32
	SSCGR       SSCGR
	PLLI2SCFGR  PLLI2SCFGR
	_           uint32
	RCC_DCKCFGR RCC_DCKCFGR
}

var RCC = (*Ctrl)(unsafe.Pointer(uintptr(0x40023800)))

type CR_Bits uint32

func (b CR_Bits) Field(mask CR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CR_Bits) J(v int) CR_Bits {
	return CR_Bits(bits.Make32(v, uint32(mask)))
}

type CR struct{ r mmio.U32 }

func (r *CR) Bits(mask CR_Bits) CR_Bits { return CR_Bits(r.r.Bits(uint32(mask))) }
func (r *CR) StoreBits(mask, b CR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CR) SetBits(mask CR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *CR) ClearBits(mask CR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *CR) Load() CR_Bits             { return CR_Bits(r.r.Load()) }
func (r *CR) Store(b CR_Bits)           { r.r.Store(uint32(b)) }

type PLLCFGR_Bits uint32

func (b PLLCFGR_Bits) Field(mask PLLCFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLCFGR_Bits) J(v int) PLLCFGR_Bits {
	return PLLCFGR_Bits(bits.Make32(v, uint32(mask)))
}

type PLLCFGR struct{ r mmio.U32 }

func (r *PLLCFGR) Bits(mask PLLCFGR_Bits) PLLCFGR_Bits { return PLLCFGR_Bits(r.r.Bits(uint32(mask))) }
func (r *PLLCFGR) StoreBits(mask, b PLLCFGR_Bits)      { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *PLLCFGR) SetBits(mask PLLCFGR_Bits)           { r.r.SetBits(uint32(mask)) }
func (r *PLLCFGR) ClearBits(mask PLLCFGR_Bits)         { r.r.ClearBits(uint32(mask)) }
func (r *PLLCFGR) Load() PLLCFGR_Bits                  { return PLLCFGR_Bits(r.r.Load()) }
func (r *PLLCFGR) Store(b PLLCFGR_Bits)                { r.r.Store(uint32(b)) }

type CFGR_Bits uint32

func (b CFGR_Bits) Field(mask CFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFGR_Bits) J(v int) CFGR_Bits {
	return CFGR_Bits(bits.Make32(v, uint32(mask)))
}

type CFGR struct{ r mmio.U32 }

func (r *CFGR) Bits(mask CFGR_Bits) CFGR_Bits { return CFGR_Bits(r.r.Bits(uint32(mask))) }
func (r *CFGR) StoreBits(mask, b CFGR_Bits)   { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CFGR) SetBits(mask CFGR_Bits)        { r.r.SetBits(uint32(mask)) }
func (r *CFGR) ClearBits(mask CFGR_Bits)      { r.r.ClearBits(uint32(mask)) }
func (r *CFGR) Load() CFGR_Bits               { return CFGR_Bits(r.r.Load()) }
func (r *CFGR) Store(b CFGR_Bits)             { r.r.Store(uint32(b)) }

type CIR_Bits uint32

func (b CIR_Bits) Field(mask CIR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CIR_Bits) J(v int) CIR_Bits {
	return CIR_Bits(bits.Make32(v, uint32(mask)))
}

type CIR struct{ r mmio.U32 }

func (r *CIR) Bits(mask CIR_Bits) CIR_Bits { return CIR_Bits(r.r.Bits(uint32(mask))) }
func (r *CIR) StoreBits(mask, b CIR_Bits)  { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CIR) SetBits(mask CIR_Bits)       { r.r.SetBits(uint32(mask)) }
func (r *CIR) ClearBits(mask CIR_Bits)     { r.r.ClearBits(uint32(mask)) }
func (r *CIR) Load() CIR_Bits              { return CIR_Bits(r.r.Load()) }
func (r *CIR) Store(b CIR_Bits)            { r.r.Store(uint32(b)) }

type AHB1RSTR_Bits uint32

func (b AHB1RSTR_Bits) Field(mask AHB1RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1RSTR_Bits) J(v int) AHB1RSTR_Bits {
	return AHB1RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB1RSTR struct{ r mmio.U32 }

func (r *AHB1RSTR) Bits(mask AHB1RSTR_Bits) AHB1RSTR_Bits {
	return AHB1RSTR_Bits(r.r.Bits(uint32(mask)))
}
func (r *AHB1RSTR) StoreBits(mask, b AHB1RSTR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB1RSTR) SetBits(mask AHB1RSTR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *AHB1RSTR) ClearBits(mask AHB1RSTR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *AHB1RSTR) Load() AHB1RSTR_Bits             { return AHB1RSTR_Bits(r.r.Load()) }
func (r *AHB1RSTR) Store(b AHB1RSTR_Bits)           { r.r.Store(uint32(b)) }

type AHB2RSTR_Bits uint32

func (b AHB2RSTR_Bits) Field(mask AHB2RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2RSTR_Bits) J(v int) AHB2RSTR_Bits {
	return AHB2RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB2RSTR struct{ r mmio.U32 }

func (r *AHB2RSTR) Bits(mask AHB2RSTR_Bits) AHB2RSTR_Bits {
	return AHB2RSTR_Bits(r.r.Bits(uint32(mask)))
}
func (r *AHB2RSTR) StoreBits(mask, b AHB2RSTR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB2RSTR) SetBits(mask AHB2RSTR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *AHB2RSTR) ClearBits(mask AHB2RSTR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *AHB2RSTR) Load() AHB2RSTR_Bits             { return AHB2RSTR_Bits(r.r.Load()) }
func (r *AHB2RSTR) Store(b AHB2RSTR_Bits)           { r.r.Store(uint32(b)) }

type APB1RSTR_Bits uint32

func (b APB1RSTR_Bits) Field(mask APB1RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1RSTR_Bits) J(v int) APB1RSTR_Bits {
	return APB1RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type APB1RSTR struct{ r mmio.U32 }

func (r *APB1RSTR) Bits(mask APB1RSTR_Bits) APB1RSTR_Bits {
	return APB1RSTR_Bits(r.r.Bits(uint32(mask)))
}
func (r *APB1RSTR) StoreBits(mask, b APB1RSTR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1RSTR) SetBits(mask APB1RSTR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *APB1RSTR) ClearBits(mask APB1RSTR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *APB1RSTR) Load() APB1RSTR_Bits             { return APB1RSTR_Bits(r.r.Load()) }
func (r *APB1RSTR) Store(b APB1RSTR_Bits)           { r.r.Store(uint32(b)) }

type APB2RSTR_Bits uint32

func (b APB2RSTR_Bits) Field(mask APB2RSTR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2RSTR_Bits) J(v int) APB2RSTR_Bits {
	return APB2RSTR_Bits(bits.Make32(v, uint32(mask)))
}

type APB2RSTR struct{ r mmio.U32 }

func (r *APB2RSTR) Bits(mask APB2RSTR_Bits) APB2RSTR_Bits {
	return APB2RSTR_Bits(r.r.Bits(uint32(mask)))
}
func (r *APB2RSTR) StoreBits(mask, b APB2RSTR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *APB2RSTR) SetBits(mask APB2RSTR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *APB2RSTR) ClearBits(mask APB2RSTR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *APB2RSTR) Load() APB2RSTR_Bits             { return APB2RSTR_Bits(r.r.Load()) }
func (r *APB2RSTR) Store(b APB2RSTR_Bits)           { r.r.Store(uint32(b)) }

type AHB1ENR_Bits uint32

func (b AHB1ENR_Bits) Field(mask AHB1ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1ENR_Bits) J(v int) AHB1ENR_Bits {
	return AHB1ENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB1ENR struct{ r mmio.U32 }

func (r *AHB1ENR) Bits(mask AHB1ENR_Bits) AHB1ENR_Bits { return AHB1ENR_Bits(r.r.Bits(uint32(mask))) }
func (r *AHB1ENR) StoreBits(mask, b AHB1ENR_Bits)      { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB1ENR) SetBits(mask AHB1ENR_Bits)           { r.r.SetBits(uint32(mask)) }
func (r *AHB1ENR) ClearBits(mask AHB1ENR_Bits)         { r.r.ClearBits(uint32(mask)) }
func (r *AHB1ENR) Load() AHB1ENR_Bits                  { return AHB1ENR_Bits(r.r.Load()) }
func (r *AHB1ENR) Store(b AHB1ENR_Bits)                { r.r.Store(uint32(b)) }

type AHB2ENR_Bits uint32

func (b AHB2ENR_Bits) Field(mask AHB2ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2ENR_Bits) J(v int) AHB2ENR_Bits {
	return AHB2ENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB2ENR struct{ r mmio.U32 }

func (r *AHB2ENR) Bits(mask AHB2ENR_Bits) AHB2ENR_Bits { return AHB2ENR_Bits(r.r.Bits(uint32(mask))) }
func (r *AHB2ENR) StoreBits(mask, b AHB2ENR_Bits)      { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB2ENR) SetBits(mask AHB2ENR_Bits)           { r.r.SetBits(uint32(mask)) }
func (r *AHB2ENR) ClearBits(mask AHB2ENR_Bits)         { r.r.ClearBits(uint32(mask)) }
func (r *AHB2ENR) Load() AHB2ENR_Bits                  { return AHB2ENR_Bits(r.r.Load()) }
func (r *AHB2ENR) Store(b AHB2ENR_Bits)                { r.r.Store(uint32(b)) }

type APB1ENR_Bits uint32

func (b APB1ENR_Bits) Field(mask APB1ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1ENR_Bits) J(v int) APB1ENR_Bits {
	return APB1ENR_Bits(bits.Make32(v, uint32(mask)))
}

type APB1ENR struct{ r mmio.U32 }

func (r *APB1ENR) Bits(mask APB1ENR_Bits) APB1ENR_Bits { return APB1ENR_Bits(r.r.Bits(uint32(mask))) }
func (r *APB1ENR) StoreBits(mask, b APB1ENR_Bits)      { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1ENR) SetBits(mask APB1ENR_Bits)           { r.r.SetBits(uint32(mask)) }
func (r *APB1ENR) ClearBits(mask APB1ENR_Bits)         { r.r.ClearBits(uint32(mask)) }
func (r *APB1ENR) Load() APB1ENR_Bits                  { return APB1ENR_Bits(r.r.Load()) }
func (r *APB1ENR) Store(b APB1ENR_Bits)                { r.r.Store(uint32(b)) }

type APB2ENR_Bits uint32

func (b APB2ENR_Bits) Field(mask APB2ENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2ENR_Bits) J(v int) APB2ENR_Bits {
	return APB2ENR_Bits(bits.Make32(v, uint32(mask)))
}

type APB2ENR struct{ r mmio.U32 }

func (r *APB2ENR) Bits(mask APB2ENR_Bits) APB2ENR_Bits { return APB2ENR_Bits(r.r.Bits(uint32(mask))) }
func (r *APB2ENR) StoreBits(mask, b APB2ENR_Bits)      { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *APB2ENR) SetBits(mask APB2ENR_Bits)           { r.r.SetBits(uint32(mask)) }
func (r *APB2ENR) ClearBits(mask APB2ENR_Bits)         { r.r.ClearBits(uint32(mask)) }
func (r *APB2ENR) Load() APB2ENR_Bits                  { return APB2ENR_Bits(r.r.Load()) }
func (r *APB2ENR) Store(b APB2ENR_Bits)                { r.r.Store(uint32(b)) }

type AHB1LPENR_Bits uint32

func (b AHB1LPENR_Bits) Field(mask AHB1LPENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB1LPENR_Bits) J(v int) AHB1LPENR_Bits {
	return AHB1LPENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB1LPENR struct{ r mmio.U32 }

func (r *AHB1LPENR) Bits(mask AHB1LPENR_Bits) AHB1LPENR_Bits {
	return AHB1LPENR_Bits(r.r.Bits(uint32(mask)))
}
func (r *AHB1LPENR) StoreBits(mask, b AHB1LPENR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB1LPENR) SetBits(mask AHB1LPENR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *AHB1LPENR) ClearBits(mask AHB1LPENR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *AHB1LPENR) Load() AHB1LPENR_Bits             { return AHB1LPENR_Bits(r.r.Load()) }
func (r *AHB1LPENR) Store(b AHB1LPENR_Bits)           { r.r.Store(uint32(b)) }

type AHB2LPENR_Bits uint32

func (b AHB2LPENR_Bits) Field(mask AHB2LPENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHB2LPENR_Bits) J(v int) AHB2LPENR_Bits {
	return AHB2LPENR_Bits(bits.Make32(v, uint32(mask)))
}

type AHB2LPENR struct{ r mmio.U32 }

func (r *AHB2LPENR) Bits(mask AHB2LPENR_Bits) AHB2LPENR_Bits {
	return AHB2LPENR_Bits(r.r.Bits(uint32(mask)))
}
func (r *AHB2LPENR) StoreBits(mask, b AHB2LPENR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *AHB2LPENR) SetBits(mask AHB2LPENR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *AHB2LPENR) ClearBits(mask AHB2LPENR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *AHB2LPENR) Load() AHB2LPENR_Bits             { return AHB2LPENR_Bits(r.r.Load()) }
func (r *AHB2LPENR) Store(b AHB2LPENR_Bits)           { r.r.Store(uint32(b)) }

type APB1LPENR_Bits uint32

func (b APB1LPENR_Bits) Field(mask APB1LPENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB1LPENR_Bits) J(v int) APB1LPENR_Bits {
	return APB1LPENR_Bits(bits.Make32(v, uint32(mask)))
}

type APB1LPENR struct{ r mmio.U32 }

func (r *APB1LPENR) Bits(mask APB1LPENR_Bits) APB1LPENR_Bits {
	return APB1LPENR_Bits(r.r.Bits(uint32(mask)))
}
func (r *APB1LPENR) StoreBits(mask, b APB1LPENR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *APB1LPENR) SetBits(mask APB1LPENR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *APB1LPENR) ClearBits(mask APB1LPENR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *APB1LPENR) Load() APB1LPENR_Bits             { return APB1LPENR_Bits(r.r.Load()) }
func (r *APB1LPENR) Store(b APB1LPENR_Bits)           { r.r.Store(uint32(b)) }

type APB2LPENR_Bits uint32

func (b APB2LPENR_Bits) Field(mask APB2LPENR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask APB2LPENR_Bits) J(v int) APB2LPENR_Bits {
	return APB2LPENR_Bits(bits.Make32(v, uint32(mask)))
}

type APB2LPENR struct{ r mmio.U32 }

func (r *APB2LPENR) Bits(mask APB2LPENR_Bits) APB2LPENR_Bits {
	return APB2LPENR_Bits(r.r.Bits(uint32(mask)))
}
func (r *APB2LPENR) StoreBits(mask, b APB2LPENR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *APB2LPENR) SetBits(mask APB2LPENR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *APB2LPENR) ClearBits(mask APB2LPENR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *APB2LPENR) Load() APB2LPENR_Bits             { return APB2LPENR_Bits(r.r.Load()) }
func (r *APB2LPENR) Store(b APB2LPENR_Bits)           { r.r.Store(uint32(b)) }

type BDCR_Bits uint32

func (b BDCR_Bits) Field(mask BDCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BDCR_Bits) J(v int) BDCR_Bits {
	return BDCR_Bits(bits.Make32(v, uint32(mask)))
}

type BDCR struct{ r mmio.U32 }

func (r *BDCR) Bits(mask BDCR_Bits) BDCR_Bits { return BDCR_Bits(r.r.Bits(uint32(mask))) }
func (r *BDCR) StoreBits(mask, b BDCR_Bits)   { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *BDCR) SetBits(mask BDCR_Bits)        { r.r.SetBits(uint32(mask)) }
func (r *BDCR) ClearBits(mask BDCR_Bits)      { r.r.ClearBits(uint32(mask)) }
func (r *BDCR) Load() BDCR_Bits               { return BDCR_Bits(r.r.Load()) }
func (r *BDCR) Store(b BDCR_Bits)             { r.r.Store(uint32(b)) }

func (p *Ctrl) LSEON() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 112)), uint32(LSEON),
	}
}
func (p *Ctrl) LSERDY() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 112)), uint32(LSERDY),
	}
}
func (p *Ctrl) LSEBYP() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 112)), uint32(LSEBYP),
	}
}
func (p *Ctrl) LSEMOD() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 112)), uint32(LSEMOD),
	}
}
func (p *Ctrl) RTCSEL() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 112)), uint32(RTCSEL),
	}
}
func (p *Ctrl) RTCEN() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 112)), uint32(RTCEN),
	}
}
func (p *Ctrl) BDRST() mmio.Bits32 {
	return mmio.Bits32{
		(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 112)), uint32(BDRST),
	}
}

type CSR_Bits uint32

func (b CSR_Bits) Field(mask CSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR_Bits) J(v int) CSR_Bits {
	return CSR_Bits(bits.Make32(v, uint32(mask)))
}

type CSR struct{ r mmio.U32 }

func (r *CSR) Bits(mask CSR_Bits) CSR_Bits { return CSR_Bits(r.r.Bits(uint32(mask))) }
func (r *CSR) StoreBits(mask, b CSR_Bits)  { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *CSR) SetBits(mask CSR_Bits)       { r.r.SetBits(uint32(mask)) }
func (r *CSR) ClearBits(mask CSR_Bits)     { r.r.ClearBits(uint32(mask)) }
func (r *CSR) Load() CSR_Bits              { return CSR_Bits(r.r.Load()) }
func (r *CSR) Store(b CSR_Bits)            { r.r.Store(uint32(b)) }

type SSCGR_Bits uint32

func (b SSCGR_Bits) Field(mask SSCGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SSCGR_Bits) J(v int) SSCGR_Bits {
	return SSCGR_Bits(bits.Make32(v, uint32(mask)))
}

type SSCGR struct{ r mmio.U32 }

func (r *SSCGR) Bits(mask SSCGR_Bits) SSCGR_Bits { return SSCGR_Bits(r.r.Bits(uint32(mask))) }
func (r *SSCGR) StoreBits(mask, b SSCGR_Bits)    { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *SSCGR) SetBits(mask SSCGR_Bits)         { r.r.SetBits(uint32(mask)) }
func (r *SSCGR) ClearBits(mask SSCGR_Bits)       { r.r.ClearBits(uint32(mask)) }
func (r *SSCGR) Load() SSCGR_Bits                { return SSCGR_Bits(r.r.Load()) }
func (r *SSCGR) Store(b SSCGR_Bits)              { r.r.Store(uint32(b)) }

type PLLI2SCFGR_Bits uint32

func (b PLLI2SCFGR_Bits) Field(mask PLLI2SCFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask PLLI2SCFGR_Bits) J(v int) PLLI2SCFGR_Bits {
	return PLLI2SCFGR_Bits(bits.Make32(v, uint32(mask)))
}

type PLLI2SCFGR struct{ r mmio.U32 }

func (r *PLLI2SCFGR) Bits(mask PLLI2SCFGR_Bits) PLLI2SCFGR_Bits {
	return PLLI2SCFGR_Bits(r.r.Bits(uint32(mask)))
}
func (r *PLLI2SCFGR) StoreBits(mask, b PLLI2SCFGR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *PLLI2SCFGR) SetBits(mask PLLI2SCFGR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *PLLI2SCFGR) ClearBits(mask PLLI2SCFGR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *PLLI2SCFGR) Load() PLLI2SCFGR_Bits             { return PLLI2SCFGR_Bits(r.r.Load()) }
func (r *PLLI2SCFGR) Store(b PLLI2SCFGR_Bits)           { r.r.Store(uint32(b)) }

type RCC_DCKCFGR_Bits uint32

func (b RCC_DCKCFGR_Bits) Field(mask RCC_DCKCFGR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RCC_DCKCFGR_Bits) J(v int) RCC_DCKCFGR_Bits {
	return RCC_DCKCFGR_Bits(bits.Make32(v, uint32(mask)))
}

type RCC_DCKCFGR struct{ r mmio.U32 }

func (r *RCC_DCKCFGR) Bits(mask RCC_DCKCFGR_Bits) RCC_DCKCFGR_Bits {
	return RCC_DCKCFGR_Bits(r.r.Bits(uint32(mask)))
}
func (r *RCC_DCKCFGR) StoreBits(mask, b RCC_DCKCFGR_Bits) { r.r.StoreBits(uint32(mask), uint32(b)) }
func (r *RCC_DCKCFGR) SetBits(mask RCC_DCKCFGR_Bits)      { r.r.SetBits(uint32(mask)) }
func (r *RCC_DCKCFGR) ClearBits(mask RCC_DCKCFGR_Bits)    { r.r.ClearBits(uint32(mask)) }
func (r *RCC_DCKCFGR) Load() RCC_DCKCFGR_Bits             { return RCC_DCKCFGR_Bits(r.r.Load()) }
func (r *RCC_DCKCFGR) Store(b RCC_DCKCFGR_Bits)           { r.r.Store(uint32(b)) }
