SECTIONS {
	.text : {
		__exidx_start = .;
		
		/* Vector table. */
		VectorsStart = .;
		
		LONG(StacksEnd)
		KEEP(*(.Reset))
		KEEP(*(.NMI))
		KEEP(*(.HardFault))
		KEEP(*(.MemManage))
		KEEP(*(.BusFault))
		KEEP(*(.UsageFault))
		KEEP(*(.Reserved7))
		KEEP(*(.Reserved8))
		KEEP(*(.Reserved9))
		KEEP(*(.Reserved10))
		KEEP(*(.SVCall))		
		KEEP(*(.DebugMon))		
		KEEP(*(.Reserved13))		
		KEEP(*(.PendSV))		
		KEEP(*(.SysTick))
				
		ASSERT(. - VectorsStart <= 16*4, "Too many system exception vectors");
		. = VectorsStart + 16*4;
		
		KEEP(*(.ISRs))
		
		ASSERT(. - VectorsStart <= 256*4, "To many external interrupt vectors");			
		/* Special boot code. */
		. = DEFINED(bootOffset) ? bootOffset : .;
		*(.text.bootcode)

		/* Code. */ 
		*(.text .text.*)       
	} >loadTo
	
	.rodata : {
		. = ALIGN(4);
		*(
			SORT_BY_ALIGNMENT(.rodata)
			SORT_BY_ALIGNMENT(.rodata.*)
		)
		
		. = ALIGN(4);
		__exidx_end = .;
	} >loadTo
	
	.stacks : {} >RAM
	
	StacksBegin = ADDR(.stacks);
	ISRStack = ALIGN(StacksBegin + ISRStack, 32) - StacksBegin;
	MainStack = ALIGN(MainStack, 32);
	TaskStack = ALIGN(TaskStack, 32);
	StacksEnd = StacksBegin + ISRStack +
		(MaxTasks < 1 ? 0 : MainStack + TaskStack * (MaxTasks - 1));
       
	.data StacksEnd : {
		. = ALIGN(4);
		*(
			SORT_BY_ALIGNMENT(.data)
			SORT_BY_ALIGNMENT(.data.*)
		)
		. = ALIGN(4);
	} >RAM AT>loadTo
	
	DataRAM = ADDR(.data);
	DataLoad = LOADADDR(.data);
	DataSize = SIZEOF(.data);
	
	.bss : {
		. = ALIGN(4);
		*(
			SORT_BY_ALIGNMENT(.bss)
			SORT_BY_ALIGNMENT(.bss.*)
		)
		*(SORT_BY_ALIGNMENT(COMMON))
		. = ALIGN(4);
	} >RAM
	
	BSSRAM = ADDR(.bss);
	BSSSize = SIZEOF(.bss);

	HeapBegin = BSSRAM + BSSSize;
	HeapEnd = ORIGIN(RAM) + LENGTH(RAM);
	
	.dummy 0 (DSECT) : {
		*(.dummy .dummy.*)
	}
}

ENTRY(runtime$noos$reset)