SECTIONS {
	.text : {
		__exidx_start = .;
		
		/* Vector table. */
		LONG(StackEnd)
		KEEP(*(.SystemVectors))
		KEEP(*(.InterruptVectors))
		
		/* Code */ 
		*(.text .text.*)       
	} >loadTo
	
	.rodata : {
		. = ALIGN(4);
		*(
			SORT_BY_ALIGNMENT(.rodata)
			SORT_BY_ALIGNMENT(.rodata.*)
		)
		
		. = ALIGN(4);
		__exidx_end = .;
	} >loadTo
    
    .stack : {
    	. = ALIGN((1 << StackLog2) / 8);
    	. = . + (1 << StackLog2) * StackFrac / 8 * (MaxTasks + 1);
    } >RAM
    
    StackEnd = ADDR(.stack) + SIZEOF(.stack);
    
	.data : {
		. = ALIGN(4);
		*(
			SORT_BY_ALIGNMENT(.data)
			SORT_BY_ALIGNMENT(.data.*)
		)
		. = ALIGN(4);
	} >RAM AT>loadTo
	
	DataRAM = ADDR(.data);
	DataLoad = LOADADDR(.data);
	DataSize = SIZEOF(.data);
	
	.bss : {
		. = ALIGN(4);
		*(
			SORT_BY_ALIGNMENT(.bss)
			SORT_BY_ALIGNMENT(.bss.*)
		)
		. = ALIGN(4);
	} >RAM
	
	BSSRAM = ADDR(.bss);
	BSSSize = SIZEOF(.bss);

	HeapBegin = BSSRAM + BSSSize;
	HeapEnd = ORIGIN(RAM) + LENGTH(RAM);
	
	.noload HeapEnd : {
		. = ALIGN(4);
		*(.noload .noload.*)
		. = ALIGN(4);
	}
}

ENTRY(runtime$noos$Reset)
