package cache

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type CACHE_Periph struct {
	ICIALLU  ICIALLU
	_        uint32
	ICIMVAU  ICIMVAU
	DCIMVAC  DCIMVAC
	DCISW    DCISW
	DCCMVAU  DCCMVAU
	DCCMVAC  DCCMVAC
	DCCSW    DCCSW
	DCCIMVAC DCCIMVAC
	DCCISW   DCCISW
}

func (p *CACHE_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var CACHE = (*CACHE_Periph)(unsafe.Pointer(uintptr(0xE000EF50)))

type ICIALLU_Bits uint32

func (b ICIALLU_Bits) Field(mask ICIALLU_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICIALLU_Bits) J(v int) ICIALLU_Bits {
	return ICIALLU_Bits(bits.Make32(v, uint32(mask)))
}

type ICIALLU struct{ mmio.U32 }

func (r *ICIALLU) Bits(mask ICIALLU_Bits) ICIALLU_Bits { return ICIALLU_Bits(r.U32.Bits(uint32(mask))) }
func (r *ICIALLU) StoreBits(mask, b ICIALLU_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ICIALLU) SetBits(mask ICIALLU_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *ICIALLU) ClearBits(mask ICIALLU_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *ICIALLU) Load() ICIALLU_Bits                  { return ICIALLU_Bits(r.U32.Load()) }
func (r *ICIALLU) Store(b ICIALLU_Bits)                { r.U32.Store(uint32(b)) }

type ICIALLU_Mask struct{ mmio.UM32 }

func (rm ICIALLU_Mask) Load() ICIALLU_Bits   { return ICIALLU_Bits(rm.UM32.Load()) }
func (rm ICIALLU_Mask) Store(b ICIALLU_Bits) { rm.UM32.Store(uint32(b)) }

type ICIMVAU_Bits uint32

func (b ICIMVAU_Bits) Field(mask ICIMVAU_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICIMVAU_Bits) J(v int) ICIMVAU_Bits {
	return ICIMVAU_Bits(bits.Make32(v, uint32(mask)))
}

type ICIMVAU struct{ mmio.U32 }

func (r *ICIMVAU) Bits(mask ICIMVAU_Bits) ICIMVAU_Bits { return ICIMVAU_Bits(r.U32.Bits(uint32(mask))) }
func (r *ICIMVAU) StoreBits(mask, b ICIMVAU_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ICIMVAU) SetBits(mask ICIMVAU_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *ICIMVAU) ClearBits(mask ICIMVAU_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *ICIMVAU) Load() ICIMVAU_Bits                  { return ICIMVAU_Bits(r.U32.Load()) }
func (r *ICIMVAU) Store(b ICIMVAU_Bits)                { r.U32.Store(uint32(b)) }

type ICIMVAU_Mask struct{ mmio.UM32 }

func (rm ICIMVAU_Mask) Load() ICIMVAU_Bits   { return ICIMVAU_Bits(rm.UM32.Load()) }
func (rm ICIMVAU_Mask) Store(b ICIMVAU_Bits) { rm.UM32.Store(uint32(b)) }

type DCIMVAC_Bits uint32

func (b DCIMVAC_Bits) Field(mask DCIMVAC_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCIMVAC_Bits) J(v int) DCIMVAC_Bits {
	return DCIMVAC_Bits(bits.Make32(v, uint32(mask)))
}

type DCIMVAC struct{ mmio.U32 }

func (r *DCIMVAC) Bits(mask DCIMVAC_Bits) DCIMVAC_Bits { return DCIMVAC_Bits(r.U32.Bits(uint32(mask))) }
func (r *DCIMVAC) StoreBits(mask, b DCIMVAC_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DCIMVAC) SetBits(mask DCIMVAC_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *DCIMVAC) ClearBits(mask DCIMVAC_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *DCIMVAC) Load() DCIMVAC_Bits                  { return DCIMVAC_Bits(r.U32.Load()) }
func (r *DCIMVAC) Store(b DCIMVAC_Bits)                { r.U32.Store(uint32(b)) }

type DCIMVAC_Mask struct{ mmio.UM32 }

func (rm DCIMVAC_Mask) Load() DCIMVAC_Bits   { return DCIMVAC_Bits(rm.UM32.Load()) }
func (rm DCIMVAC_Mask) Store(b DCIMVAC_Bits) { rm.UM32.Store(uint32(b)) }

type DCISW_Bits uint32

func (b DCISW_Bits) Field(mask DCISW_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCISW_Bits) J(v int) DCISW_Bits {
	return DCISW_Bits(bits.Make32(v, uint32(mask)))
}

type DCISW struct{ mmio.U32 }

func (r *DCISW) Bits(mask DCISW_Bits) DCISW_Bits { return DCISW_Bits(r.U32.Bits(uint32(mask))) }
func (r *DCISW) StoreBits(mask, b DCISW_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DCISW) SetBits(mask DCISW_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *DCISW) ClearBits(mask DCISW_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *DCISW) Load() DCISW_Bits                { return DCISW_Bits(r.U32.Load()) }
func (r *DCISW) Store(b DCISW_Bits)              { r.U32.Store(uint32(b)) }

type DCISW_Mask struct{ mmio.UM32 }

func (rm DCISW_Mask) Load() DCISW_Bits   { return DCISW_Bits(rm.UM32.Load()) }
func (rm DCISW_Mask) Store(b DCISW_Bits) { rm.UM32.Store(uint32(b)) }

type DCCMVAU_Bits uint32

func (b DCCMVAU_Bits) Field(mask DCCMVAU_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCCMVAU_Bits) J(v int) DCCMVAU_Bits {
	return DCCMVAU_Bits(bits.Make32(v, uint32(mask)))
}

type DCCMVAU struct{ mmio.U32 }

func (r *DCCMVAU) Bits(mask DCCMVAU_Bits) DCCMVAU_Bits { return DCCMVAU_Bits(r.U32.Bits(uint32(mask))) }
func (r *DCCMVAU) StoreBits(mask, b DCCMVAU_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DCCMVAU) SetBits(mask DCCMVAU_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *DCCMVAU) ClearBits(mask DCCMVAU_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *DCCMVAU) Load() DCCMVAU_Bits                  { return DCCMVAU_Bits(r.U32.Load()) }
func (r *DCCMVAU) Store(b DCCMVAU_Bits)                { r.U32.Store(uint32(b)) }

type DCCMVAU_Mask struct{ mmio.UM32 }

func (rm DCCMVAU_Mask) Load() DCCMVAU_Bits   { return DCCMVAU_Bits(rm.UM32.Load()) }
func (rm DCCMVAU_Mask) Store(b DCCMVAU_Bits) { rm.UM32.Store(uint32(b)) }

type DCCMVAC_Bits uint32

func (b DCCMVAC_Bits) Field(mask DCCMVAC_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCCMVAC_Bits) J(v int) DCCMVAC_Bits {
	return DCCMVAC_Bits(bits.Make32(v, uint32(mask)))
}

type DCCMVAC struct{ mmio.U32 }

func (r *DCCMVAC) Bits(mask DCCMVAC_Bits) DCCMVAC_Bits { return DCCMVAC_Bits(r.U32.Bits(uint32(mask))) }
func (r *DCCMVAC) StoreBits(mask, b DCCMVAC_Bits)      { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DCCMVAC) SetBits(mask DCCMVAC_Bits)           { r.U32.SetBits(uint32(mask)) }
func (r *DCCMVAC) ClearBits(mask DCCMVAC_Bits)         { r.U32.ClearBits(uint32(mask)) }
func (r *DCCMVAC) Load() DCCMVAC_Bits                  { return DCCMVAC_Bits(r.U32.Load()) }
func (r *DCCMVAC) Store(b DCCMVAC_Bits)                { r.U32.Store(uint32(b)) }

type DCCMVAC_Mask struct{ mmio.UM32 }

func (rm DCCMVAC_Mask) Load() DCCMVAC_Bits   { return DCCMVAC_Bits(rm.UM32.Load()) }
func (rm DCCMVAC_Mask) Store(b DCCMVAC_Bits) { rm.UM32.Store(uint32(b)) }

type DCCSW_Bits uint32

func (b DCCSW_Bits) Field(mask DCCSW_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCCSW_Bits) J(v int) DCCSW_Bits {
	return DCCSW_Bits(bits.Make32(v, uint32(mask)))
}

type DCCSW struct{ mmio.U32 }

func (r *DCCSW) Bits(mask DCCSW_Bits) DCCSW_Bits { return DCCSW_Bits(r.U32.Bits(uint32(mask))) }
func (r *DCCSW) StoreBits(mask, b DCCSW_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DCCSW) SetBits(mask DCCSW_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *DCCSW) ClearBits(mask DCCSW_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *DCCSW) Load() DCCSW_Bits                { return DCCSW_Bits(r.U32.Load()) }
func (r *DCCSW) Store(b DCCSW_Bits)              { r.U32.Store(uint32(b)) }

type DCCSW_Mask struct{ mmio.UM32 }

func (rm DCCSW_Mask) Load() DCCSW_Bits   { return DCCSW_Bits(rm.UM32.Load()) }
func (rm DCCSW_Mask) Store(b DCCSW_Bits) { rm.UM32.Store(uint32(b)) }

type DCCIMVAC_Bits uint32

func (b DCCIMVAC_Bits) Field(mask DCCIMVAC_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCCIMVAC_Bits) J(v int) DCCIMVAC_Bits {
	return DCCIMVAC_Bits(bits.Make32(v, uint32(mask)))
}

type DCCIMVAC struct{ mmio.U32 }

func (r *DCCIMVAC) Bits(mask DCCIMVAC_Bits) DCCIMVAC_Bits {
	return DCCIMVAC_Bits(r.U32.Bits(uint32(mask)))
}
func (r *DCCIMVAC) StoreBits(mask, b DCCIMVAC_Bits) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DCCIMVAC) SetBits(mask DCCIMVAC_Bits)      { r.U32.SetBits(uint32(mask)) }
func (r *DCCIMVAC) ClearBits(mask DCCIMVAC_Bits)    { r.U32.ClearBits(uint32(mask)) }
func (r *DCCIMVAC) Load() DCCIMVAC_Bits             { return DCCIMVAC_Bits(r.U32.Load()) }
func (r *DCCIMVAC) Store(b DCCIMVAC_Bits)           { r.U32.Store(uint32(b)) }

type DCCIMVAC_Mask struct{ mmio.UM32 }

func (rm DCCIMVAC_Mask) Load() DCCIMVAC_Bits   { return DCCIMVAC_Bits(rm.UM32.Load()) }
func (rm DCCIMVAC_Mask) Store(b DCCIMVAC_Bits) { rm.UM32.Store(uint32(b)) }

type DCCISW_Bits uint32

func (b DCCISW_Bits) Field(mask DCCISW_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DCCISW_Bits) J(v int) DCCISW_Bits {
	return DCCISW_Bits(bits.Make32(v, uint32(mask)))
}

type DCCISW struct{ mmio.U32 }

func (r *DCCISW) Bits(mask DCCISW_Bits) DCCISW_Bits { return DCCISW_Bits(r.U32.Bits(uint32(mask))) }
func (r *DCCISW) StoreBits(mask, b DCCISW_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DCCISW) SetBits(mask DCCISW_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *DCCISW) ClearBits(mask DCCISW_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *DCCISW) Load() DCCISW_Bits                 { return DCCISW_Bits(r.U32.Load()) }
func (r *DCCISW) Store(b DCCISW_Bits)               { r.U32.Store(uint32(b)) }

type DCCISW_Mask struct{ mmio.UM32 }

func (rm DCCISW_Mask) Load() DCCISW_Bits   { return DCCISW_Bits(rm.UM32.Load()) }
func (rm DCCISW_Mask) Store(b DCCISW_Bits) { rm.UM32.Store(uint32(b)) }
