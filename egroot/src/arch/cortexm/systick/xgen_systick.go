package systick

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type SYSTICK_Periph struct {
	CSR   RCSR
	RVR   RRVR
	CVR   RCVR
	CALIB RCALIB
}

func (p *SYSTICK_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var SYSTICK = (*SYSTICK_Periph)(unsafe.Pointer(uintptr(0xE000E010)))

type CSR uint32

func (b CSR) Field(mask CSR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CSR) J(v int) CSR {
	return CSR(bits.MakeField32(v, uint32(mask)))
}

type RCSR struct{ mmio.U32 }

func (r *RCSR) Bits(mask CSR) CSR     { return CSR(r.U32.Bits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

func (r *RCSR) AtomicStoreBits(mask, b CSR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) AtomicSetBits(mask CSR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCSR) AtomicClearBits(mask CSR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *SYSTICK_Periph) ENABLE() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(ENABLE)}}
}

func (p *SYSTICK_Periph) TICKINT() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TICKINT)}}
}

func (p *SYSTICK_Periph) CLKSOURCE() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CLKSOURCE)}}
}

func (p *SYSTICK_Periph) COUNTFLAG() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(COUNTFLAG)}}
}

type RVR uint32

func (b RVR) Field(mask RVR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask RVR) J(v int) RVR {
	return RVR(bits.MakeField32(v, uint32(mask)))
}

type RRVR struct{ mmio.U32 }

func (r *RRVR) Bits(mask RVR) RVR     { return RVR(r.U32.Bits(uint32(mask))) }
func (r *RRVR) StoreBits(mask, b RVR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRVR) SetBits(mask RVR)      { r.U32.SetBits(uint32(mask)) }
func (r *RRVR) ClearBits(mask RVR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRVR) Load() RVR             { return RVR(r.U32.Load()) }
func (r *RRVR) Store(b RVR)           { r.U32.Store(uint32(b)) }

func (r *RRVR) AtomicStoreBits(mask, b RVR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RRVR) AtomicSetBits(mask RVR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RRVR) AtomicClearBits(mask RVR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMRVR struct{ mmio.UM32 }

func (rm RMRVR) Load() RVR   { return RVR(rm.UM32.Load()) }
func (rm RMRVR) Store(b RVR) { rm.UM32.Store(uint32(b)) }

func (p *SYSTICK_Periph) RELOAD() RMRVR {
	return RMRVR{mmio.UM32{&p.RVR.U32, uint32(RELOAD)}}
}

type CVR uint32

func (b CVR) Field(mask CVR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CVR) J(v int) CVR {
	return CVR(bits.MakeField32(v, uint32(mask)))
}

type RCVR struct{ mmio.U32 }

func (r *RCVR) Bits(mask CVR) CVR     { return CVR(r.U32.Bits(uint32(mask))) }
func (r *RCVR) StoreBits(mask, b CVR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCVR) SetBits(mask CVR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCVR) ClearBits(mask CVR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCVR) Load() CVR             { return CVR(r.U32.Load()) }
func (r *RCVR) Store(b CVR)           { r.U32.Store(uint32(b)) }

func (r *RCVR) AtomicStoreBits(mask, b CVR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCVR) AtomicSetBits(mask CVR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCVR) AtomicClearBits(mask CVR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCVR struct{ mmio.UM32 }

func (rm RMCVR) Load() CVR   { return CVR(rm.UM32.Load()) }
func (rm RMCVR) Store(b CVR) { rm.UM32.Store(uint32(b)) }

func (p *SYSTICK_Periph) CURRENT() RMCVR {
	return RMCVR{mmio.UM32{&p.CVR.U32, uint32(CURRENT)}}
}

type CALIB uint32

func (b CALIB) Field(mask CALIB) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CALIB) J(v int) CALIB {
	return CALIB(bits.MakeField32(v, uint32(mask)))
}

type RCALIB struct{ mmio.U32 }

func (r *RCALIB) Bits(mask CALIB) CALIB   { return CALIB(r.U32.Bits(uint32(mask))) }
func (r *RCALIB) StoreBits(mask, b CALIB) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCALIB) SetBits(mask CALIB)      { r.U32.SetBits(uint32(mask)) }
func (r *RCALIB) ClearBits(mask CALIB)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCALIB) Load() CALIB             { return CALIB(r.U32.Load()) }
func (r *RCALIB) Store(b CALIB)           { r.U32.Store(uint32(b)) }

func (r *RCALIB) AtomicStoreBits(mask, b CALIB) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RCALIB) AtomicSetBits(mask CALIB)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RCALIB) AtomicClearBits(mask CALIB)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMCALIB struct{ mmio.UM32 }

func (rm RMCALIB) Load() CALIB   { return CALIB(rm.UM32.Load()) }
func (rm RMCALIB) Store(b CALIB) { rm.UM32.Store(uint32(b)) }

func (p *SYSTICK_Periph) TENMS() RMCALIB {
	return RMCALIB{mmio.UM32{&p.CALIB.U32, uint32(TENMS)}}
}

func (p *SYSTICK_Periph) SKEW() RMCALIB {
	return RMCALIB{mmio.UM32{&p.CALIB.U32, uint32(SKEW)}}
}

func (p *SYSTICK_Periph) NOREF() RMCALIB {
	return RMCALIB{mmio.UM32{&p.CALIB.U32, uint32(NOREF)}}
}
