package acc

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type ACC_Periph struct {
	ITCMCR ITCMCR
	DTCMCR DTCMCR
	AHBPCR AHBPCR
	CACR   CACR
	AHBSCR AHBSCR
	_      uint32
	ABFSR  ABFSR
}

func (p *ACC_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var ACC = (*ACC_Periph)(unsafe.Pointer(uintptr(0xE000EF90)))

type ITCMCR_Bits uint32

func (b ITCMCR_Bits) Field(mask ITCMCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ITCMCR_Bits) J(v int) ITCMCR_Bits {
	return ITCMCR_Bits(bits.Make32(v, uint32(mask)))
}

type ITCMCR struct{ mmio.U32 }

func (r *ITCMCR) Bits(mask ITCMCR_Bits) ITCMCR_Bits { return ITCMCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ITCMCR) StoreBits(mask, b ITCMCR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ITCMCR) SetBits(mask ITCMCR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *ITCMCR) ClearBits(mask ITCMCR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *ITCMCR) Load() ITCMCR_Bits                 { return ITCMCR_Bits(r.U32.Load()) }
func (r *ITCMCR) Store(b ITCMCR_Bits)               { r.U32.Store(uint32(b)) }

type ITCMCR_Mask struct{ mmio.UM32 }

func (rm ITCMCR_Mask) Load() ITCMCR_Bits   { return ITCMCR_Bits(rm.UM32.Load()) }
func (rm ITCMCR_Mask) Store(b ITCMCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *ACC_Periph) ITCMEN() ITCMCR_Mask {
	return ITCMCR_Mask{mmio.UM32{&p.ITCMCR.U32, uint32(ITCMEN)}}
}

func (p *ACC_Periph) ITCMRMW() ITCMCR_Mask {
	return ITCMCR_Mask{mmio.UM32{&p.ITCMCR.U32, uint32(ITCMRMW)}}
}

func (p *ACC_Periph) ITCMRETEN() ITCMCR_Mask {
	return ITCMCR_Mask{mmio.UM32{&p.ITCMCR.U32, uint32(ITCMRETEN)}}
}

func (p *ACC_Periph) ITCMSZ() ITCMCR_Mask {
	return ITCMCR_Mask{mmio.UM32{&p.ITCMCR.U32, uint32(ITCMSZ)}}
}

type DTCMCR_Bits uint32

func (b DTCMCR_Bits) Field(mask DTCMCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask DTCMCR_Bits) J(v int) DTCMCR_Bits {
	return DTCMCR_Bits(bits.Make32(v, uint32(mask)))
}

type DTCMCR struct{ mmio.U32 }

func (r *DTCMCR) Bits(mask DTCMCR_Bits) DTCMCR_Bits { return DTCMCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *DTCMCR) StoreBits(mask, b DTCMCR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *DTCMCR) SetBits(mask DTCMCR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *DTCMCR) ClearBits(mask DTCMCR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *DTCMCR) Load() DTCMCR_Bits                 { return DTCMCR_Bits(r.U32.Load()) }
func (r *DTCMCR) Store(b DTCMCR_Bits)               { r.U32.Store(uint32(b)) }

type DTCMCR_Mask struct{ mmio.UM32 }

func (rm DTCMCR_Mask) Load() DTCMCR_Bits   { return DTCMCR_Bits(rm.UM32.Load()) }
func (rm DTCMCR_Mask) Store(b DTCMCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *ACC_Periph) DTCMEN() DTCMCR_Mask {
	return DTCMCR_Mask{mmio.UM32{&p.DTCMCR.U32, uint32(DTCMEN)}}
}

func (p *ACC_Periph) DTCMRMW() DTCMCR_Mask {
	return DTCMCR_Mask{mmio.UM32{&p.DTCMCR.U32, uint32(DTCMRMW)}}
}

func (p *ACC_Periph) DTCMRETEN() DTCMCR_Mask {
	return DTCMCR_Mask{mmio.UM32{&p.DTCMCR.U32, uint32(DTCMRETEN)}}
}

func (p *ACC_Periph) DTCMSZ() DTCMCR_Mask {
	return DTCMCR_Mask{mmio.UM32{&p.DTCMCR.U32, uint32(DTCMSZ)}}
}

type AHBPCR_Bits uint32

func (b AHBPCR_Bits) Field(mask AHBPCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHBPCR_Bits) J(v int) AHBPCR_Bits {
	return AHBPCR_Bits(bits.Make32(v, uint32(mask)))
}

type AHBPCR struct{ mmio.U32 }

func (r *AHBPCR) Bits(mask AHBPCR_Bits) AHBPCR_Bits { return AHBPCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AHBPCR) StoreBits(mask, b AHBPCR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHBPCR) SetBits(mask AHBPCR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *AHBPCR) ClearBits(mask AHBPCR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *AHBPCR) Load() AHBPCR_Bits                 { return AHBPCR_Bits(r.U32.Load()) }
func (r *AHBPCR) Store(b AHBPCR_Bits)               { r.U32.Store(uint32(b)) }

type AHBPCR_Mask struct{ mmio.UM32 }

func (rm AHBPCR_Mask) Load() AHBPCR_Bits   { return AHBPCR_Bits(rm.UM32.Load()) }
func (rm AHBPCR_Mask) Store(b AHBPCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *ACC_Periph) AHBPEN() AHBPCR_Mask {
	return AHBPCR_Mask{mmio.UM32{&p.AHBPCR.U32, uint32(AHBPEN)}}
}

func (p *ACC_Periph) AHBPSZ() AHBPCR_Mask {
	return AHBPCR_Mask{mmio.UM32{&p.AHBPCR.U32, uint32(AHBPSZ)}}
}

type CACR_Bits uint32

func (b CACR_Bits) Field(mask CACR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CACR_Bits) J(v int) CACR_Bits {
	return CACR_Bits(bits.Make32(v, uint32(mask)))
}

type CACR struct{ mmio.U32 }

func (r *CACR) Bits(mask CACR_Bits) CACR_Bits { return CACR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CACR) StoreBits(mask, b CACR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CACR) SetBits(mask CACR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *CACR) ClearBits(mask CACR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *CACR) Load() CACR_Bits               { return CACR_Bits(r.U32.Load()) }
func (r *CACR) Store(b CACR_Bits)             { r.U32.Store(uint32(b)) }

type CACR_Mask struct{ mmio.UM32 }

func (rm CACR_Mask) Load() CACR_Bits   { return CACR_Bits(rm.UM32.Load()) }
func (rm CACR_Mask) Store(b CACR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *ACC_Periph) SIWT() CACR_Mask {
	return CACR_Mask{mmio.UM32{&p.CACR.U32, uint32(SIWT)}}
}

func (p *ACC_Periph) ECCDIS() CACR_Mask {
	return CACR_Mask{mmio.UM32{&p.CACR.U32, uint32(ECCDIS)}}
}

func (p *ACC_Periph) FORCEWT() CACR_Mask {
	return CACR_Mask{mmio.UM32{&p.CACR.U32, uint32(FORCEWT)}}
}

type AHBSCR_Bits uint32

func (b AHBSCR_Bits) Field(mask AHBSCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AHBSCR_Bits) J(v int) AHBSCR_Bits {
	return AHBSCR_Bits(bits.Make32(v, uint32(mask)))
}

type AHBSCR struct{ mmio.U32 }

func (r *AHBSCR) Bits(mask AHBSCR_Bits) AHBSCR_Bits { return AHBSCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AHBSCR) StoreBits(mask, b AHBSCR_Bits)     { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AHBSCR) SetBits(mask AHBSCR_Bits)          { r.U32.SetBits(uint32(mask)) }
func (r *AHBSCR) ClearBits(mask AHBSCR_Bits)        { r.U32.ClearBits(uint32(mask)) }
func (r *AHBSCR) Load() AHBSCR_Bits                 { return AHBSCR_Bits(r.U32.Load()) }
func (r *AHBSCR) Store(b AHBSCR_Bits)               { r.U32.Store(uint32(b)) }

type AHBSCR_Mask struct{ mmio.UM32 }

func (rm AHBSCR_Mask) Load() AHBSCR_Bits   { return AHBSCR_Bits(rm.UM32.Load()) }
func (rm AHBSCR_Mask) Store(b AHBSCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *ACC_Periph) CTL() AHBSCR_Mask {
	return AHBSCR_Mask{mmio.UM32{&p.AHBSCR.U32, uint32(CTL)}}
}

func (p *ACC_Periph) TPRI() AHBSCR_Mask {
	return AHBSCR_Mask{mmio.UM32{&p.AHBSCR.U32, uint32(TPRI)}}
}

func (p *ACC_Periph) INITCOUNT() AHBSCR_Mask {
	return AHBSCR_Mask{mmio.UM32{&p.AHBSCR.U32, uint32(INITCOUNT)}}
}

type ABFSR_Bits uint32

func (b ABFSR_Bits) Field(mask ABFSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ABFSR_Bits) J(v int) ABFSR_Bits {
	return ABFSR_Bits(bits.Make32(v, uint32(mask)))
}

type ABFSR struct{ mmio.U32 }

func (r *ABFSR) Bits(mask ABFSR_Bits) ABFSR_Bits { return ABFSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ABFSR) StoreBits(mask, b ABFSR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ABFSR) SetBits(mask ABFSR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *ABFSR) ClearBits(mask ABFSR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *ABFSR) Load() ABFSR_Bits                { return ABFSR_Bits(r.U32.Load()) }
func (r *ABFSR) Store(b ABFSR_Bits)              { r.U32.Store(uint32(b)) }

type ABFSR_Mask struct{ mmio.UM32 }

func (rm ABFSR_Mask) Load() ABFSR_Bits   { return ABFSR_Bits(rm.UM32.Load()) }
func (rm ABFSR_Mask) Store(b ABFSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *ACC_Periph) ITCM() ABFSR_Mask {
	return ABFSR_Mask{mmio.UM32{&p.ABFSR.U32, uint32(ITCM)}}
}

func (p *ACC_Periph) DTCM() ABFSR_Mask {
	return ABFSR_Mask{mmio.UM32{&p.ABFSR.U32, uint32(DTCM)}}
}

func (p *ACC_Periph) AHBP() ABFSR_Mask {
	return ABFSR_Mask{mmio.UM32{&p.ABFSR.U32, uint32(AHBP)}}
}

func (p *ACC_Periph) AXIM() ABFSR_Mask {
	return ABFSR_Mask{mmio.UM32{&p.ABFSR.U32, uint32(AXIM)}}
}

func (p *ACC_Periph) EPPB() ABFSR_Mask {
	return ABFSR_Mask{mmio.UM32{&p.ABFSR.U32, uint32(EPPB)}}
}

func (p *ACC_Periph) AXIMTYPE() ABFSR_Mask {
	return ABFSR_Mask{mmio.UM32{&p.ABFSR.U32, uint32(AXIMTYPE)}}
}
