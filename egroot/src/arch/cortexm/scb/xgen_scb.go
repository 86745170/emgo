package scb

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type SCB_Periph struct {
	CPUID CPUID
	ICSR  ICSR
	VTOR  VTOR
	AIRCR AIRCR
	SCR   SCR
	CCR   CCR
	SHPR1 SHPR1
	SHPR2 SHPR2
	SHPR3 SHPR3
	SHCSR SHCSR
	CFSR  CFSR
	HFSR  HFSR
	_     uint32
	MMFR  MMFR
	BFAR  BFAR
	AFSR  AFSR
}

func (p *SCB_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

var SCB = (*SCB_Periph)(unsafe.Pointer(uintptr(0xE000ED00)))

type CPUID_Bits uint32

func (b CPUID_Bits) Field(mask CPUID_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CPUID_Bits) J(v int) CPUID_Bits {
	return CPUID_Bits(bits.Make32(v, uint32(mask)))
}

type CPUID struct{ mmio.U32 }

func (r *CPUID) Bits(mask CPUID_Bits) CPUID_Bits { return CPUID_Bits(r.U32.Bits(uint32(mask))) }
func (r *CPUID) StoreBits(mask, b CPUID_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CPUID) SetBits(mask CPUID_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *CPUID) ClearBits(mask CPUID_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *CPUID) Load() CPUID_Bits                { return CPUID_Bits(r.U32.Load()) }
func (r *CPUID) Store(b CPUID_Bits)              { r.U32.Store(uint32(b)) }

type CPUID_Mask struct{ mmio.UM32 }

func (rm CPUID_Mask) Load() CPUID_Bits   { return CPUID_Bits(rm.UM32.Load()) }
func (rm CPUID_Mask) Store(b CPUID_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) Revision() CPUID_Mask {
	return CPUID_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(Revision)}}
}

func (p *SCB_Periph) PartNo() CPUID_Mask {
	return CPUID_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(PartNo)}}
}

func (p *SCB_Periph) Constant() CPUID_Mask {
	return CPUID_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(Constant)}}
}

func (p *SCB_Periph) Variant() CPUID_Mask {
	return CPUID_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(Variant)}}
}

func (p *SCB_Periph) Implementer() CPUID_Mask {
	return CPUID_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 0)), uint32(Implementer)}}
}

type ICSR_Bits uint32

func (b ICSR_Bits) Field(mask ICSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ICSR_Bits) J(v int) ICSR_Bits {
	return ICSR_Bits(bits.Make32(v, uint32(mask)))
}

type ICSR struct{ mmio.U32 }

func (r *ICSR) Bits(mask ICSR_Bits) ICSR_Bits { return ICSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *ICSR) StoreBits(mask, b ICSR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *ICSR) SetBits(mask ICSR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *ICSR) ClearBits(mask ICSR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *ICSR) Load() ICSR_Bits               { return ICSR_Bits(r.U32.Load()) }
func (r *ICSR) Store(b ICSR_Bits)             { r.U32.Store(uint32(b)) }

type ICSR_Mask struct{ mmio.UM32 }

func (rm ICSR_Mask) Load() ICSR_Bits   { return ICSR_Bits(rm.UM32.Load()) }
func (rm ICSR_Mask) Store(b ICSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) VECTACTIVE() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(VECTACTIVE)}}
}

func (p *SCB_Periph) RETTOBASE() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(RETTOBASE)}}
}

func (p *SCB_Periph) VECTPENDING() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(VECTPENDING)}}
}

func (p *SCB_Periph) ISRPENDING() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(ISRPENDING)}}
}

func (p *SCB_Periph) PENDSTCLR() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(PENDSTCLR)}}
}

func (p *SCB_Periph) PENDSTSET() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(PENDSTSET)}}
}

func (p *SCB_Periph) PENDSVCLR() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(PENDSVCLR)}}
}

func (p *SCB_Periph) PENDSVSET() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(PENDSVSET)}}
}

func (p *SCB_Periph) NMIPENDSET() ICSR_Mask {
	return ICSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 4)), uint32(NMIPENDSET)}}
}

type VTOR_Bits uint32

func (b VTOR_Bits) Field(mask VTOR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask VTOR_Bits) J(v int) VTOR_Bits {
	return VTOR_Bits(bits.Make32(v, uint32(mask)))
}

type VTOR struct{ mmio.U32 }

func (r *VTOR) Bits(mask VTOR_Bits) VTOR_Bits { return VTOR_Bits(r.U32.Bits(uint32(mask))) }
func (r *VTOR) StoreBits(mask, b VTOR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *VTOR) SetBits(mask VTOR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *VTOR) ClearBits(mask VTOR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *VTOR) Load() VTOR_Bits               { return VTOR_Bits(r.U32.Load()) }
func (r *VTOR) Store(b VTOR_Bits)             { r.U32.Store(uint32(b)) }

type VTOR_Mask struct{ mmio.UM32 }

func (rm VTOR_Mask) Load() VTOR_Bits   { return VTOR_Bits(rm.UM32.Load()) }
func (rm VTOR_Mask) Store(b VTOR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) TBLOFF() VTOR_Mask {
	return VTOR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 8)), uint32(TBLOFF)}}
}

type AIRCR_Bits uint32

func (b AIRCR_Bits) Field(mask AIRCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AIRCR_Bits) J(v int) AIRCR_Bits {
	return AIRCR_Bits(bits.Make32(v, uint32(mask)))
}

type AIRCR struct{ mmio.U32 }

func (r *AIRCR) Bits(mask AIRCR_Bits) AIRCR_Bits { return AIRCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AIRCR) StoreBits(mask, b AIRCR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AIRCR) SetBits(mask AIRCR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *AIRCR) ClearBits(mask AIRCR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *AIRCR) Load() AIRCR_Bits                { return AIRCR_Bits(r.U32.Load()) }
func (r *AIRCR) Store(b AIRCR_Bits)              { r.U32.Store(uint32(b)) }

type AIRCR_Mask struct{ mmio.UM32 }

func (rm AIRCR_Mask) Load() AIRCR_Bits   { return AIRCR_Bits(rm.UM32.Load()) }
func (rm AIRCR_Mask) Store(b AIRCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) VECTRESET() AIRCR_Mask {
	return AIRCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(VECTRESET)}}
}

func (p *SCB_Periph) VECTCLRACTIVE() AIRCR_Mask {
	return AIRCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(VECTCLRACTIVE)}}
}

func (p *SCB_Periph) SYSRESETREQ() AIRCR_Mask {
	return AIRCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(SYSRESETREQ)}}
}

func (p *SCB_Periph) PRIGROUP() AIRCR_Mask {
	return AIRCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(PRIGROUP)}}
}

func (p *SCB_Periph) ENDIANNESS() AIRCR_Mask {
	return AIRCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(ENDIANNESS)}}
}

func (p *SCB_Periph) VECTKEY() AIRCR_Mask {
	return AIRCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 12)), uint32(VECTKEY)}}
}

type SCR_Bits uint32

func (b SCR_Bits) Field(mask SCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SCR_Bits) J(v int) SCR_Bits {
	return SCR_Bits(bits.Make32(v, uint32(mask)))
}

type SCR struct{ mmio.U32 }

func (r *SCR) Bits(mask SCR_Bits) SCR_Bits { return SCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SCR) StoreBits(mask, b SCR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SCR) SetBits(mask SCR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *SCR) ClearBits(mask SCR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *SCR) Load() SCR_Bits              { return SCR_Bits(r.U32.Load()) }
func (r *SCR) Store(b SCR_Bits)            { r.U32.Store(uint32(b)) }

type SCR_Mask struct{ mmio.UM32 }

func (rm SCR_Mask) Load() SCR_Bits   { return SCR_Bits(rm.UM32.Load()) }
func (rm SCR_Mask) Store(b SCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) SLEEPONEXIT() SCR_Mask {
	return SCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 16)), uint32(SLEEPONEXIT)}}
}

func (p *SCB_Periph) SLEEPDEEP() SCR_Mask {
	return SCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 16)), uint32(SLEEPDEEP)}}
}

func (p *SCB_Periph) SEVONPEND() SCR_Mask {
	return SCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 16)), uint32(SEVONPEND)}}
}

type CCR_Bits uint32

func (b CCR_Bits) Field(mask CCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CCR_Bits) J(v int) CCR_Bits {
	return CCR_Bits(bits.Make32(v, uint32(mask)))
}

type CCR struct{ mmio.U32 }

func (r *CCR) Bits(mask CCR_Bits) CCR_Bits { return CCR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CCR) StoreBits(mask, b CCR_Bits)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CCR) SetBits(mask CCR_Bits)       { r.U32.SetBits(uint32(mask)) }
func (r *CCR) ClearBits(mask CCR_Bits)     { r.U32.ClearBits(uint32(mask)) }
func (r *CCR) Load() CCR_Bits              { return CCR_Bits(r.U32.Load()) }
func (r *CCR) Store(b CCR_Bits)            { r.U32.Store(uint32(b)) }

type CCR_Mask struct{ mmio.UM32 }

func (rm CCR_Mask) Load() CCR_Bits   { return CCR_Bits(rm.UM32.Load()) }
func (rm CCR_Mask) Store(b CCR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) NONBASETHRDENA() CCR_Mask {
	return CCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 20)), uint32(NONBASETHRDENA)}}
}

func (p *SCB_Periph) USERSETMPEND() CCR_Mask {
	return CCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 20)), uint32(USERSETMPEND)}}
}

func (p *SCB_Periph) UNALIGN_TRP() CCR_Mask {
	return CCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 20)), uint32(UNALIGN_TRP)}}
}

func (p *SCB_Periph) DIV_0_TRP() CCR_Mask {
	return CCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 20)), uint32(DIV_0_TRP)}}
}

func (p *SCB_Periph) BFHFNMIGN() CCR_Mask {
	return CCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 20)), uint32(BFHFNMIGN)}}
}

func (p *SCB_Periph) STKALIGN() CCR_Mask {
	return CCR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 20)), uint32(STKALIGN)}}
}

type SHPR1_Bits uint32

func (b SHPR1_Bits) Field(mask SHPR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SHPR1_Bits) J(v int) SHPR1_Bits {
	return SHPR1_Bits(bits.Make32(v, uint32(mask)))
}

type SHPR1 struct{ mmio.U32 }

func (r *SHPR1) Bits(mask SHPR1_Bits) SHPR1_Bits { return SHPR1_Bits(r.U32.Bits(uint32(mask))) }
func (r *SHPR1) StoreBits(mask, b SHPR1_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SHPR1) SetBits(mask SHPR1_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *SHPR1) ClearBits(mask SHPR1_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *SHPR1) Load() SHPR1_Bits                { return SHPR1_Bits(r.U32.Load()) }
func (r *SHPR1) Store(b SHPR1_Bits)              { r.U32.Store(uint32(b)) }

type SHPR1_Mask struct{ mmio.UM32 }

func (rm SHPR1_Mask) Load() SHPR1_Bits   { return SHPR1_Bits(rm.UM32.Load()) }
func (rm SHPR1_Mask) Store(b SHPR1_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) PRI_MemManage() SHPR1_Mask {
	return SHPR1_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 24)), uint32(PRI_MemManage)}}
}

func (p *SCB_Periph) PRI_BusFault() SHPR1_Mask {
	return SHPR1_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 24)), uint32(PRI_BusFault)}}
}

func (p *SCB_Periph) PRI_UsageFault() SHPR1_Mask {
	return SHPR1_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 24)), uint32(PRI_UsageFault)}}
}

type SHPR2_Bits uint32

func (b SHPR2_Bits) Field(mask SHPR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SHPR2_Bits) J(v int) SHPR2_Bits {
	return SHPR2_Bits(bits.Make32(v, uint32(mask)))
}

type SHPR2 struct{ mmio.U32 }

func (r *SHPR2) Bits(mask SHPR2_Bits) SHPR2_Bits { return SHPR2_Bits(r.U32.Bits(uint32(mask))) }
func (r *SHPR2) StoreBits(mask, b SHPR2_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SHPR2) SetBits(mask SHPR2_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *SHPR2) ClearBits(mask SHPR2_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *SHPR2) Load() SHPR2_Bits                { return SHPR2_Bits(r.U32.Load()) }
func (r *SHPR2) Store(b SHPR2_Bits)              { r.U32.Store(uint32(b)) }

type SHPR2_Mask struct{ mmio.UM32 }

func (rm SHPR2_Mask) Load() SHPR2_Bits   { return SHPR2_Bits(rm.UM32.Load()) }
func (rm SHPR2_Mask) Store(b SHPR2_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) PRI_SVCall() SHPR2_Mask {
	return SHPR2_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 28)), uint32(PRI_SVCall)}}
}

type SHPR3_Bits uint32

func (b SHPR3_Bits) Field(mask SHPR3_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SHPR3_Bits) J(v int) SHPR3_Bits {
	return SHPR3_Bits(bits.Make32(v, uint32(mask)))
}

type SHPR3 struct{ mmio.U32 }

func (r *SHPR3) Bits(mask SHPR3_Bits) SHPR3_Bits { return SHPR3_Bits(r.U32.Bits(uint32(mask))) }
func (r *SHPR3) StoreBits(mask, b SHPR3_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SHPR3) SetBits(mask SHPR3_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *SHPR3) ClearBits(mask SHPR3_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *SHPR3) Load() SHPR3_Bits                { return SHPR3_Bits(r.U32.Load()) }
func (r *SHPR3) Store(b SHPR3_Bits)              { r.U32.Store(uint32(b)) }

type SHPR3_Mask struct{ mmio.UM32 }

func (rm SHPR3_Mask) Load() SHPR3_Bits   { return SHPR3_Bits(rm.UM32.Load()) }
func (rm SHPR3_Mask) Store(b SHPR3_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) PRI_PendSV() SHPR3_Mask {
	return SHPR3_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(PRI_PendSV)}}
}

func (p *SCB_Periph) PRI_SysTick() SHPR3_Mask {
	return SHPR3_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 32)), uint32(PRI_SysTick)}}
}

type SHCSR_Bits uint32

func (b SHCSR_Bits) Field(mask SHCSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask SHCSR_Bits) J(v int) SHCSR_Bits {
	return SHCSR_Bits(bits.Make32(v, uint32(mask)))
}

type SHCSR struct{ mmio.U32 }

func (r *SHCSR) Bits(mask SHCSR_Bits) SHCSR_Bits { return SHCSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *SHCSR) StoreBits(mask, b SHCSR_Bits)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *SHCSR) SetBits(mask SHCSR_Bits)         { r.U32.SetBits(uint32(mask)) }
func (r *SHCSR) ClearBits(mask SHCSR_Bits)       { r.U32.ClearBits(uint32(mask)) }
func (r *SHCSR) Load() SHCSR_Bits                { return SHCSR_Bits(r.U32.Load()) }
func (r *SHCSR) Store(b SHCSR_Bits)              { r.U32.Store(uint32(b)) }

type SHCSR_Mask struct{ mmio.UM32 }

func (rm SHCSR_Mask) Load() SHCSR_Bits   { return SHCSR_Bits(rm.UM32.Load()) }
func (rm SHCSR_Mask) Store(b SHCSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) MEMFAULTACT() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(MEMFAULTACT)}}
}

func (p *SCB_Periph) BUSFAULTACT() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(BUSFAULTACT)}}
}

func (p *SCB_Periph) USGFAULTACT() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(USGFAULTACT)}}
}

func (p *SCB_Periph) SVCALLACT() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(SVCALLACT)}}
}

func (p *SCB_Periph) MONITORACT() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(MONITORACT)}}
}

func (p *SCB_Periph) PENDSVACT() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(PENDSVACT)}}
}

func (p *SCB_Periph) SYSTICKACT() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(SYSTICKACT)}}
}

func (p *SCB_Periph) USGFAULTPENDED() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(USGFAULTPENDED)}}
}

func (p *SCB_Periph) MEMFAULTPENDED() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(MEMFAULTPENDED)}}
}

func (p *SCB_Periph) BUSFAULTPENDED() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(BUSFAULTPENDED)}}
}

func (p *SCB_Periph) SVCALLPENDED() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(SVCALLPENDED)}}
}

func (p *SCB_Periph) MEMFAULTENA() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(MEMFAULTENA)}}
}

func (p *SCB_Periph) BUSFAULTENA() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(BUSFAULTENA)}}
}

func (p *SCB_Periph) USGFAULTENA() SHCSR_Mask {
	return SHCSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 36)), uint32(USGFAULTENA)}}
}

type CFSR_Bits uint32

func (b CFSR_Bits) Field(mask CFSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask CFSR_Bits) J(v int) CFSR_Bits {
	return CFSR_Bits(bits.Make32(v, uint32(mask)))
}

type CFSR struct{ mmio.U32 }

func (r *CFSR) Bits(mask CFSR_Bits) CFSR_Bits { return CFSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *CFSR) StoreBits(mask, b CFSR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *CFSR) SetBits(mask CFSR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *CFSR) ClearBits(mask CFSR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *CFSR) Load() CFSR_Bits               { return CFSR_Bits(r.U32.Load()) }
func (r *CFSR) Store(b CFSR_Bits)             { r.U32.Store(uint32(b)) }

type CFSR_Mask struct{ mmio.UM32 }

func (rm CFSR_Mask) Load() CFSR_Bits   { return CFSR_Bits(rm.UM32.Load()) }
func (rm CFSR_Mask) Store(b CFSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) IACCVIOL() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(IACCVIOL)}}
}

func (p *SCB_Periph) DACCVIOL() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(DACCVIOL)}}
}

func (p *SCB_Periph) MUNSTKERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(MUNSTKERR)}}
}

func (p *SCB_Periph) MSTKERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(MSTKERR)}}
}

func (p *SCB_Periph) MLSPERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(MLSPERR)}}
}

func (p *SCB_Periph) MMARVALID() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(MMARVALID)}}
}

func (p *SCB_Periph) IBUSERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(IBUSERR)}}
}

func (p *SCB_Periph) PRECISERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(PRECISERR)}}
}

func (p *SCB_Periph) IMPRECISERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(IMPRECISERR)}}
}

func (p *SCB_Periph) UNSTKERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(UNSTKERR)}}
}

func (p *SCB_Periph) STKERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(STKERR)}}
}

func (p *SCB_Periph) LSPERR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(LSPERR)}}
}

func (p *SCB_Periph) BFARVALID() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(BFARVALID)}}
}

func (p *SCB_Periph) UNDEFINSTR() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(UNDEFINSTR)}}
}

func (p *SCB_Periph) INVSTATE() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(INVSTATE)}}
}

func (p *SCB_Periph) INVPC() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(INVPC)}}
}

func (p *SCB_Periph) NOCP() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(NOCP)}}
}

func (p *SCB_Periph) UNALIGNED() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(UNALIGNED)}}
}

func (p *SCB_Periph) DIVBYZERO() CFSR_Mask {
	return CFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 40)), uint32(DIVBYZERO)}}
}

type HFSR_Bits uint32

func (b HFSR_Bits) Field(mask HFSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask HFSR_Bits) J(v int) HFSR_Bits {
	return HFSR_Bits(bits.Make32(v, uint32(mask)))
}

type HFSR struct{ mmio.U32 }

func (r *HFSR) Bits(mask HFSR_Bits) HFSR_Bits { return HFSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *HFSR) StoreBits(mask, b HFSR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *HFSR) SetBits(mask HFSR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *HFSR) ClearBits(mask HFSR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *HFSR) Load() HFSR_Bits               { return HFSR_Bits(r.U32.Load()) }
func (r *HFSR) Store(b HFSR_Bits)             { r.U32.Store(uint32(b)) }

type HFSR_Mask struct{ mmio.UM32 }

func (rm HFSR_Mask) Load() HFSR_Bits   { return HFSR_Bits(rm.UM32.Load()) }
func (rm HFSR_Mask) Store(b HFSR_Bits) { rm.UM32.Store(uint32(b)) }

func (p *SCB_Periph) VECTTBL() HFSR_Mask {
	return HFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 44)), uint32(VECTTBL)}}
}

func (p *SCB_Periph) FORCED() HFSR_Mask {
	return HFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 44)), uint32(FORCED)}}
}

func (p *SCB_Periph) DEBUGEVT() HFSR_Mask {
	return HFSR_Mask{mmio.UM32{(*mmio.U32)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 44)), uint32(DEBUGEVT)}}
}

type MMFR_Bits uint32

func (b MMFR_Bits) Field(mask MMFR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask MMFR_Bits) J(v int) MMFR_Bits {
	return MMFR_Bits(bits.Make32(v, uint32(mask)))
}

type MMFR struct{ mmio.U32 }

func (r *MMFR) Bits(mask MMFR_Bits) MMFR_Bits { return MMFR_Bits(r.U32.Bits(uint32(mask))) }
func (r *MMFR) StoreBits(mask, b MMFR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *MMFR) SetBits(mask MMFR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *MMFR) ClearBits(mask MMFR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *MMFR) Load() MMFR_Bits               { return MMFR_Bits(r.U32.Load()) }
func (r *MMFR) Store(b MMFR_Bits)             { r.U32.Store(uint32(b)) }

type MMFR_Mask struct{ mmio.UM32 }

func (rm MMFR_Mask) Load() MMFR_Bits   { return MMFR_Bits(rm.UM32.Load()) }
func (rm MMFR_Mask) Store(b MMFR_Bits) { rm.UM32.Store(uint32(b)) }

type BFAR_Bits uint32

func (b BFAR_Bits) Field(mask BFAR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask BFAR_Bits) J(v int) BFAR_Bits {
	return BFAR_Bits(bits.Make32(v, uint32(mask)))
}

type BFAR struct{ mmio.U32 }

func (r *BFAR) Bits(mask BFAR_Bits) BFAR_Bits { return BFAR_Bits(r.U32.Bits(uint32(mask))) }
func (r *BFAR) StoreBits(mask, b BFAR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *BFAR) SetBits(mask BFAR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *BFAR) ClearBits(mask BFAR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *BFAR) Load() BFAR_Bits               { return BFAR_Bits(r.U32.Load()) }
func (r *BFAR) Store(b BFAR_Bits)             { r.U32.Store(uint32(b)) }

type BFAR_Mask struct{ mmio.UM32 }

func (rm BFAR_Mask) Load() BFAR_Bits   { return BFAR_Bits(rm.UM32.Load()) }
func (rm BFAR_Mask) Store(b BFAR_Bits) { rm.UM32.Store(uint32(b)) }

type AFSR_Bits uint32

func (b AFSR_Bits) Field(mask AFSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask AFSR_Bits) J(v int) AFSR_Bits {
	return AFSR_Bits(bits.Make32(v, uint32(mask)))
}

type AFSR struct{ mmio.U32 }

func (r *AFSR) Bits(mask AFSR_Bits) AFSR_Bits { return AFSR_Bits(r.U32.Bits(uint32(mask))) }
func (r *AFSR) StoreBits(mask, b AFSR_Bits)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *AFSR) SetBits(mask AFSR_Bits)        { r.U32.SetBits(uint32(mask)) }
func (r *AFSR) ClearBits(mask AFSR_Bits)      { r.U32.ClearBits(uint32(mask)) }
func (r *AFSR) Load() AFSR_Bits               { return AFSR_Bits(r.U32.Load()) }
func (r *AFSR) Store(b AFSR_Bits)             { r.U32.Store(uint32(b)) }

type AFSR_Mask struct{ mmio.UM32 }

func (rm AFSR_Mask) Load() AFSR_Bits   { return AFSR_Bits(rm.UM32.Load()) }
func (rm AFSR_Mask) Store(b AFSR_Bits) { rm.UM32.Store(uint32(b)) }
