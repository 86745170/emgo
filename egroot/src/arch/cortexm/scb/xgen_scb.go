package scb

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)


func scb(n uint) *mmio.U32 {
	return &(*[16]mmio.U32)(unsafe.Pointer(uintptr(0xe000ed00)))[n]
}


type CPUID_Bits uint32

func (m CPUID_Bits) Set()           { scb(0).SetBits(uint32(m)) }
func (m CPUID_Bits) Clear()         { scb(0).ClearBits(uint32(m)) }
func (m CPUID_Bits) Load() uint32   { return scb(0).Bits(uint32(m)) }
func (m CPUID_Bits) Store(b uint32) { scb(0).StoreBits(uint32(m), b) }
func (m CPUID_Bits) LoadVal() int   { return scb(0).Field(uint32(m)) }
func (m CPUID_Bits) StoreVal(v int) { scb(0).SetField(uint32(m), v) }

func CPUID_Load() CPUID_Bits   { return CPUID_Bits(scb(0).Load()) }
func CPUID_Store(b CPUID_Bits) { scb(0).Store(uint32(b)) }

func (b CPUID_Bits) Field(mask CPUID_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CPUID(v int, mask CPUID_Bits) CPUID_Bits {
	return CPUID_Bits(bits.Make32(v, uint32(mask)))
}


type ICSR_Bits uint32

func (m ICSR_Bits) Set()           { scb(1).SetBits(uint32(m)) }
func (m ICSR_Bits) Clear()         { scb(1).ClearBits(uint32(m)) }
func (m ICSR_Bits) Load() uint32   { return scb(1).Bits(uint32(m)) }
func (m ICSR_Bits) Store(b uint32) { scb(1).StoreBits(uint32(m), b) }
func (m ICSR_Bits) LoadVal() int   { return scb(1).Field(uint32(m)) }
func (m ICSR_Bits) StoreVal(v int) { scb(1).SetField(uint32(m), v) }

func ICSR_Load() ICSR_Bits   { return ICSR_Bits(scb(1).Load()) }
func ICSR_Store(b ICSR_Bits) { scb(1).Store(uint32(b)) }

func (b ICSR_Bits) Field(mask ICSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_ICSR(v int, mask ICSR_Bits) ICSR_Bits {
	return ICSR_Bits(bits.Make32(v, uint32(mask)))
}


type VTOR_Bits uint32

func (m VTOR_Bits) Set()           { scb(2).SetBits(uint32(m)) }
func (m VTOR_Bits) Clear()         { scb(2).ClearBits(uint32(m)) }
func (m VTOR_Bits) Load() uint32   { return scb(2).Bits(uint32(m)) }
func (m VTOR_Bits) Store(b uint32) { scb(2).StoreBits(uint32(m), b) }
func (m VTOR_Bits) LoadVal() int   { return scb(2).Field(uint32(m)) }
func (m VTOR_Bits) StoreVal(v int) { scb(2).SetField(uint32(m), v) }

func VTOR_Load() VTOR_Bits   { return VTOR_Bits(scb(2).Load()) }
func VTOR_Store(b VTOR_Bits) { scb(2).Store(uint32(b)) }

func (b VTOR_Bits) Field(mask VTOR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_VTOR(v int, mask VTOR_Bits) VTOR_Bits {
	return VTOR_Bits(bits.Make32(v, uint32(mask)))
}


type AIRCR_Bits uint32

func (m AIRCR_Bits) Set()           { scb(3).SetBits(uint32(m)) }
func (m AIRCR_Bits) Clear()         { scb(3).ClearBits(uint32(m)) }
func (m AIRCR_Bits) Load() uint32   { return scb(3).Bits(uint32(m)) }
func (m AIRCR_Bits) Store(b uint32) { scb(3).StoreBits(uint32(m), b) }
func (m AIRCR_Bits) LoadVal() int   { return scb(3).Field(uint32(m)) }
func (m AIRCR_Bits) StoreVal(v int) { scb(3).SetField(uint32(m), v) }

func AIRCR_Load() AIRCR_Bits   { return AIRCR_Bits(scb(3).Load()) }
func AIRCR_Store(b AIRCR_Bits) { scb(3).Store(uint32(b)) }

func (b AIRCR_Bits) Field(mask AIRCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_AIRCR(v int, mask AIRCR_Bits) AIRCR_Bits {
	return AIRCR_Bits(bits.Make32(v, uint32(mask)))
}


type SCR_Bits uint32

func (m SCR_Bits) Set()           { scb(4).SetBits(uint32(m)) }
func (m SCR_Bits) Clear()         { scb(4).ClearBits(uint32(m)) }
func (m SCR_Bits) Load() uint32   { return scb(4).Bits(uint32(m)) }
func (m SCR_Bits) Store(b uint32) { scb(4).StoreBits(uint32(m), b) }
func (m SCR_Bits) LoadVal() int   { return scb(4).Field(uint32(m)) }
func (m SCR_Bits) StoreVal(v int) { scb(4).SetField(uint32(m), v) }

func SCR_Load() SCR_Bits   { return SCR_Bits(scb(4).Load()) }
func SCR_Store(b SCR_Bits) { scb(4).Store(uint32(b)) }

func (b SCR_Bits) Field(mask SCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SCR(v int, mask SCR_Bits) SCR_Bits {
	return SCR_Bits(bits.Make32(v, uint32(mask)))
}


type CCR_Bits uint32

func (m CCR_Bits) Set()           { scb(5).SetBits(uint32(m)) }
func (m CCR_Bits) Clear()         { scb(5).ClearBits(uint32(m)) }
func (m CCR_Bits) Load() uint32   { return scb(5).Bits(uint32(m)) }
func (m CCR_Bits) Store(b uint32) { scb(5).StoreBits(uint32(m), b) }
func (m CCR_Bits) LoadVal() int   { return scb(5).Field(uint32(m)) }
func (m CCR_Bits) StoreVal(v int) { scb(5).SetField(uint32(m), v) }

func CCR_Load() CCR_Bits   { return CCR_Bits(scb(5).Load()) }
func CCR_Store(b CCR_Bits) { scb(5).Store(uint32(b)) }

func (b CCR_Bits) Field(mask CCR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CCR(v int, mask CCR_Bits) CCR_Bits {
	return CCR_Bits(bits.Make32(v, uint32(mask)))
}


type SHPR1_Bits uint32

func (m SHPR1_Bits) Set()           { scb(6).SetBits(uint32(m)) }
func (m SHPR1_Bits) Clear()         { scb(6).ClearBits(uint32(m)) }
func (m SHPR1_Bits) Load() uint32   { return scb(6).Bits(uint32(m)) }
func (m SHPR1_Bits) Store(b uint32) { scb(6).StoreBits(uint32(m), b) }
func (m SHPR1_Bits) LoadVal() int   { return scb(6).Field(uint32(m)) }
func (m SHPR1_Bits) StoreVal(v int) { scb(6).SetField(uint32(m), v) }

func SHPR1_Load() SHPR1_Bits   { return SHPR1_Bits(scb(6).Load()) }
func SHPR1_Store(b SHPR1_Bits) { scb(6).Store(uint32(b)) }

func (b SHPR1_Bits) Field(mask SHPR1_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SHPR1(v int, mask SHPR1_Bits) SHPR1_Bits {
	return SHPR1_Bits(bits.Make32(v, uint32(mask)))
}


type SHPR2_Bits uint32

func (m SHPR2_Bits) Set()           { scb(7).SetBits(uint32(m)) }
func (m SHPR2_Bits) Clear()         { scb(7).ClearBits(uint32(m)) }
func (m SHPR2_Bits) Load() uint32   { return scb(7).Bits(uint32(m)) }
func (m SHPR2_Bits) Store(b uint32) { scb(7).StoreBits(uint32(m), b) }
func (m SHPR2_Bits) LoadVal() int   { return scb(7).Field(uint32(m)) }
func (m SHPR2_Bits) StoreVal(v int) { scb(7).SetField(uint32(m), v) }

func SHPR2_Load() SHPR2_Bits   { return SHPR2_Bits(scb(7).Load()) }
func SHPR2_Store(b SHPR2_Bits) { scb(7).Store(uint32(b)) }

func (b SHPR2_Bits) Field(mask SHPR2_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SHPR2(v int, mask SHPR2_Bits) SHPR2_Bits {
	return SHPR2_Bits(bits.Make32(v, uint32(mask)))
}


type SHPR3_Bits uint32

func (m SHPR3_Bits) Set()           { scb(8).SetBits(uint32(m)) }
func (m SHPR3_Bits) Clear()         { scb(8).ClearBits(uint32(m)) }
func (m SHPR3_Bits) Load() uint32   { return scb(8).Bits(uint32(m)) }
func (m SHPR3_Bits) Store(b uint32) { scb(8).StoreBits(uint32(m), b) }
func (m SHPR3_Bits) LoadVal() int   { return scb(8).Field(uint32(m)) }
func (m SHPR3_Bits) StoreVal(v int) { scb(8).SetField(uint32(m), v) }

func SHPR3_Load() SHPR3_Bits   { return SHPR3_Bits(scb(8).Load()) }
func SHPR3_Store(b SHPR3_Bits) { scb(8).Store(uint32(b)) }

func (b SHPR3_Bits) Field(mask SHPR3_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SHPR3(v int, mask SHPR3_Bits) SHPR3_Bits {
	return SHPR3_Bits(bits.Make32(v, uint32(mask)))
}


type SHCSR_Bits uint32

func (m SHCSR_Bits) Set()           { scb(9).SetBits(uint32(m)) }
func (m SHCSR_Bits) Clear()         { scb(9).ClearBits(uint32(m)) }
func (m SHCSR_Bits) Load() uint32   { return scb(9).Bits(uint32(m)) }
func (m SHCSR_Bits) Store(b uint32) { scb(9).StoreBits(uint32(m), b) }
func (m SHCSR_Bits) LoadVal() int   { return scb(9).Field(uint32(m)) }
func (m SHCSR_Bits) StoreVal(v int) { scb(9).SetField(uint32(m), v) }

func SHCSR_Load() SHCSR_Bits   { return SHCSR_Bits(scb(9).Load()) }
func SHCSR_Store(b SHCSR_Bits) { scb(9).Store(uint32(b)) }

func (b SHCSR_Bits) Field(mask SHCSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_SHCSR(v int, mask SHCSR_Bits) SHCSR_Bits {
	return SHCSR_Bits(bits.Make32(v, uint32(mask)))
}


type CFSR_Bits uint32

func (m CFSR_Bits) Set()           { scb(10).SetBits(uint32(m)) }
func (m CFSR_Bits) Clear()         { scb(10).ClearBits(uint32(m)) }
func (m CFSR_Bits) Load() uint32   { return scb(10).Bits(uint32(m)) }
func (m CFSR_Bits) Store(b uint32) { scb(10).StoreBits(uint32(m), b) }
func (m CFSR_Bits) LoadVal() int   { return scb(10).Field(uint32(m)) }
func (m CFSR_Bits) StoreVal(v int) { scb(10).SetField(uint32(m), v) }

func CFSR_Load() CFSR_Bits   { return CFSR_Bits(scb(10).Load()) }
func CFSR_Store(b CFSR_Bits) { scb(10).Store(uint32(b)) }

func (b CFSR_Bits) Field(mask CFSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_CFSR(v int, mask CFSR_Bits) CFSR_Bits {
	return CFSR_Bits(bits.Make32(v, uint32(mask)))
}


type HFSR_Bits uint32

func (m HFSR_Bits) Set()           { scb(11).SetBits(uint32(m)) }
func (m HFSR_Bits) Clear()         { scb(11).ClearBits(uint32(m)) }
func (m HFSR_Bits) Load() uint32   { return scb(11).Bits(uint32(m)) }
func (m HFSR_Bits) Store(b uint32) { scb(11).StoreBits(uint32(m), b) }
func (m HFSR_Bits) LoadVal() int   { return scb(11).Field(uint32(m)) }
func (m HFSR_Bits) StoreVal(v int) { scb(11).SetField(uint32(m), v) }

func HFSR_Load() HFSR_Bits   { return HFSR_Bits(scb(11).Load()) }
func HFSR_Store(b HFSR_Bits) { scb(11).Store(uint32(b)) }

func (b HFSR_Bits) Field(mask HFSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_HFSR(v int, mask HFSR_Bits) HFSR_Bits {
	return HFSR_Bits(bits.Make32(v, uint32(mask)))
}


type MMFR_Bits uint32

func (m MMFR_Bits) Set()           { scb(13).SetBits(uint32(m)) }
func (m MMFR_Bits) Clear()         { scb(13).ClearBits(uint32(m)) }
func (m MMFR_Bits) Load() uint32   { return scb(13).Bits(uint32(m)) }
func (m MMFR_Bits) Store(b uint32) { scb(13).StoreBits(uint32(m), b) }
func (m MMFR_Bits) LoadVal() int   { return scb(13).Field(uint32(m)) }
func (m MMFR_Bits) StoreVal(v int) { scb(13).SetField(uint32(m), v) }

func MMFR_Load() MMFR_Bits   { return MMFR_Bits(scb(13).Load()) }
func MMFR_Store(b MMFR_Bits) { scb(13).Store(uint32(b)) }

func (b MMFR_Bits) Field(mask MMFR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_MMFR(v int, mask MMFR_Bits) MMFR_Bits {
	return MMFR_Bits(bits.Make32(v, uint32(mask)))
}


type BFAR_Bits uint32

func (m BFAR_Bits) Set()           { scb(14).SetBits(uint32(m)) }
func (m BFAR_Bits) Clear()         { scb(14).ClearBits(uint32(m)) }
func (m BFAR_Bits) Load() uint32   { return scb(14).Bits(uint32(m)) }
func (m BFAR_Bits) Store(b uint32) { scb(14).StoreBits(uint32(m), b) }
func (m BFAR_Bits) LoadVal() int   { return scb(14).Field(uint32(m)) }
func (m BFAR_Bits) StoreVal(v int) { scb(14).SetField(uint32(m), v) }

func BFAR_Load() BFAR_Bits   { return BFAR_Bits(scb(14).Load()) }
func BFAR_Store(b BFAR_Bits) { scb(14).Store(uint32(b)) }

func (b BFAR_Bits) Field(mask BFAR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_BFAR(v int, mask BFAR_Bits) BFAR_Bits {
	return BFAR_Bits(bits.Make32(v, uint32(mask)))
}


type AFSR_Bits uint32

func (m AFSR_Bits) Set()           { scb(15).SetBits(uint32(m)) }
func (m AFSR_Bits) Clear()         { scb(15).ClearBits(uint32(m)) }
func (m AFSR_Bits) Load() uint32   { return scb(15).Bits(uint32(m)) }
func (m AFSR_Bits) Store(b uint32) { scb(15).StoreBits(uint32(m), b) }
func (m AFSR_Bits) LoadVal() int   { return scb(15).Field(uint32(m)) }
func (m AFSR_Bits) StoreVal(v int) { scb(15).SetField(uint32(m), v) }

func AFSR_Load() AFSR_Bits   { return AFSR_Bits(scb(15).Load()) }
func AFSR_Store(b AFSR_Bits) { scb(15).Store(uint32(b)) }

func (b AFSR_Bits) Field(mask AFSR_Bits) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_AFSR(v int, mask AFSR_Bits) AFSR_Bits {
	return AFSR_Bits(bits.Make32(v, uint32(mask)))
}

