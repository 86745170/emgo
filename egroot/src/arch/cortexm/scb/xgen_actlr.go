package scb

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

type AUX_Periph struct {
	ACTLR RACTLR
}

func (p *AUX_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

//emgo:const
var AUX = (*AUX_Periph)(unsafe.Pointer(uintptr(0xe000e008)))

type ACTLR uint32

func (b ACTLR) Field(mask ACTLR) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask ACTLR) J(v int) ACTLR {
	return ACTLR(bits.Make32(v, uint32(mask)))
}

type RACTLR struct{ mmio.U32 }

func (r *RACTLR) Bits(mask ACTLR) ACTLR   { return ACTLR(r.U32.Bits(uint32(mask))) }
func (r *RACTLR) StoreBits(mask, b ACTLR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RACTLR) SetBits(mask ACTLR)      { r.U32.SetBits(uint32(mask)) }
func (r *RACTLR) ClearBits(mask ACTLR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RACTLR) Load() ACTLR             { return ACTLR(r.U32.Load()) }
func (r *RACTLR) Store(b ACTLR)           { r.U32.Store(uint32(b)) }

func (r *RACTLR) AtomicStoreBits(mask, b ACTLR) { r.U32.AtomicStoreBits(uint32(mask), uint32(b)) }
func (r *RACTLR) AtomicSetBits(mask ACTLR)      { r.U32.AtomicSetBits(uint32(mask)) }
func (r *RACTLR) AtomicClearBits(mask ACTLR)    { r.U32.AtomicClearBits(uint32(mask)) }

type RMACTLR struct{ mmio.UM32 }

func (rm RMACTLR) Load() ACTLR   { return ACTLR(rm.UM32.Load()) }
func (rm RMACTLR) Store(b ACTLR) { rm.UM32.Store(uint32(b)) }

func (p *AUX_Periph) DISMCYCINT() RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISMCYCINT)}}
}

func (p *AUX_Periph) DISDEFWBUF() RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISDEFWBUF)}}
}

func (p *AUX_Periph) DISFOLD() RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISFOLD)}}
}

func (p *AUX_Periph) DISFPCA() RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISFPCA)}}
}

func (p *AUX_Periph) DISOOFP() RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISOOFP)}}
}
