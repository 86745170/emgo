package main

import (
	"path/filepath"
	"strconv"
	"strings"
	"text/template"
)

type oneCtx struct {
	Pkg   string
	Base  string
	Group string
	Regs  []reg
	Len   int
}

func one(pkg, f, txt string) {
	lines := strings.Split(txt, "\n")
	_, base := nameval(lines[0], ':')
	_, err := strconv.ParseUint(base, 0, 64)
	if err != nil {
		fdie(f, "bad BaseAddr address '%s': %v", base, err)
	}
	ctx := &oneCtx{
		Pkg:   pkg,
		Base:  base,
		Group: strings.TrimSuffix(filepath.Base(f), ".go"),
	}
	ctx.Regs, ctx.Len = regs(f, lines[1:])
	save(f, oneTmpl, ctx)
}

const oneText = `package {{.Pkg}}

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)

{{$rf := .Group}}
func {{$rf}}(n uint) *mmio.U32 {
	return &(*[{{.Len}}]mmio.U32)(unsafe.Pointer(uintptr({{.Base}})))[n]
}
{{range .Regs}}
{{$rfn := print $rf "(" .N ")"}}
type {{.Bits}} uint32

func (m {{.Bits}}) Set()           { {{$rfn}}.SetBits(uint32(m)) }
func (m {{.Bits}}) Clear()         { {{$rfn}}.ClearBits(uint32(m)) }
func (m {{.Bits}}) Load() uint32   { return {{$rfn}}.Bits(uint32(m)) }
func (m {{.Bits}}) Store(b uint32) { {{$rfn}}.StoreBits(uint32(m), b) }
func (m {{.Bits}}) LoadVal() int   { return {{$rfn}}.Field(uint32(m)) }
func (m {{.Bits}}) StoreVal(v int) { {{$rfn}}.SetField(uint32(m), v) }

func {{.Reg}}_Load() {{.Bits}}   { return {{.Bits}}({{$rfn}}.Load()) }
func {{.Reg}}_Store(b {{.Bits}}) { {{$rfn}}.Store(uint32(b)) }

func (b {{.Bits}}) Field(mask {{.Bits}}) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func Make_{{.Reg}}(v int, mask {{.Bits}}) {{.Bits}} {
	return {{.Bits}}(bits.Make32(v, uint32(mask)))
}
{{end}}
`

var oneTmpl = template.Must(template.New("one").Parse(oneText))
