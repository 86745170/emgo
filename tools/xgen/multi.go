package main

import (
	"go/ast"
	"go/token"
	"os"
	"strconv"
	"strings"
	"text/template"
)

type dev struct {
	Name string
	Addr string
}

type multiCtx struct {
	Pkg  string
	Dev  string
	Devs []dev
	Regs []reg
	Len  int
}

func multi(pkg, f, txt string, decls []ast.Decl) {
	lines := strings.Split(txt, "\n")
	d := lines[0]
	lines = lines[1:]
	d = strings.TrimSpace(d[len("Instances of ") : len(d)-1])
	var devs []dev
	for len(lines) > 0 {
		line := strings.TrimSpace(lines[0])
		lines = lines[1:]
		if line == "Registers:" {
			break
		}
		name, addr := nameval(line, ':')
		_, err := strconv.ParseUint(addr, 0, 64)
		if err != nil {
			fdie(f, "bad %s address '%s': %v", name, addr, err)
		}
		devs = append(devs, dev{Name: name, Addr: addr})
	}
	ctx := &multiCtx{
		Pkg:  pkg,
		Dev:  d,
		Devs: devs,
	}
	ctx.Regs, ctx.Len = regs(f, lines)
	regmap := make(map[string]*reg)
	for i := range ctx.Regs {
		regmap[ctx.Regs[i].Reg] = &ctx.Regs[i]
	}
	for _, d := range decls {
		g, ok := d.(*ast.GenDecl)
		if !ok || g.Tok != token.CONST {
			continue
		}
		for _, s := range g.Specs {
			v := s.(*ast.ValueSpec)
			t, ok := v.Type.(*ast.Ident)
			if !ok {
				continue
			}
			i := strings.LastIndexByte(t.Name, '_')
			if i < 0 {
				continue
			}
			reg := t.Name[:i]
			typ := t.Name[i+1:]
			var und string
			switch typ {
			case "Bits":
				und = "uint32"
			case "Field":
				und = "uint16"
			default:
				continue
			}
			for _, i := range v.Names {
				if r := regmap[reg]; r != nil {
					r.Decls = append(r.Decls, decl{i.Name, typ, und})
				}
			}
		}
	}
	w, err := os.Create("xgen_" + f)
	checkErr(err)
	checkErr(multiTmpl.Execute(w, ctx))
	checkErr(w.Close())
}

const multiText = `package {{.Pkg}}

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"mmio"
	"unsafe"
)

type {{.Dev}} struct{}

func (p *{{.Dev}}) r(n uint) *mmio.U32 {
	return &(*[{{.Len}}]mmio.U32)(unsafe.Pointer(p))[n]
}
{{$dev := .Dev}}
var ({{range .Devs}}
	{{.Name}} = (*{{$dev}})(unsafe.Pointer(uintptr({{.Addr}}))){{end}}
)
{{range .Regs}}
{{$prn := print "p.r(" .N ")"}}
type {{.Bits}} uint32
type {{.Field}} uint16
{{range .Decls}}
func (p *{{$dev}}) {{.Name}}() mmio.{{.Typ}}32 {return mmio.{{.Typ}}32{{"{"}}{{$prn}}, {{.Und}}({{.Name}})} }{{end}}

func (p *{{$dev}}) {{.Reg}}_Load() {{.Bits}}              { return {{.Bits}}({{$prn}}.Load()) }
func (p *{{$dev}}) {{.Reg}}_Store(b {{.Bits}})            { {{$prn}}.Store(uint32(b)) }
func (p *{{$dev}}) {{.Reg}}_Field(f {{.Field}}) int       { return {{$prn}}.Field(uint16(f)) }
func (p *{{$dev}}) {{.Reg}}_SetField(f {{.Field}}, v int) { {{$prn}}.SetField(uint16(f), v) }{{end}}
`

var multiTmpl = template.Must(template.New("multi").Parse(multiText))
