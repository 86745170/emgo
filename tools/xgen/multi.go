package main

import (
	"go/ast"
	"strconv"
	"strings"
	"text/template"
)

type instance struct {
	Name string
	Addr string
}

type multiCtx struct {
	Pkg       string
	Periph    string
	Instances []instance
	Regs      []*reg
}

func instances(f string, lines []string) ([]instance, []string) {
	var insts []instance
	for len(lines) > 0 {
		line := strings.TrimSpace(lines[0])
		lines = lines[1:]
		if line == "Registers:" {
			break
		}
		name, addr := split(line)
		addr, _ = split(addr)
		_, err := strconv.ParseUint(addr, 0, 64)
		if err != nil {
			fdie(f, "bad %s address '%s': %v", name, addr, err)
		}
		insts = append(insts, instance{Name: name, Addr: addr})
	}
	return insts, lines
}

func multi(pkg, f, txt string, decls []ast.Decl) {
	lines := strings.Split(txt, "\n")
	p := lines[0]
	lines = lines[1:]
	p = strings.TrimSpace(p[len("Peripheral:"):])
	var insts []instance
	for len(lines) > 0 {
		line := strings.TrimSpace(lines[0])
		lines = lines[1:]
		if line == "Instances:" {
			insts, lines = instances(f, lines)
			break
		} else if line == "Registers:" {
			break
		}
	}
	ctx := &multiCtx{
		Pkg:       pkg,
		Periph:    p,
		Instances: insts,
		Regs:      regs(f, lines, decls),
	}
	save(f, multiTmpl, ctx)
}

const multiText = `package {{.Pkg}}

// DO NOT EDIT THIS FILE. GENERATED BY xgen.

import (
	"bits"
	"mmio"
	"unsafe"
)
{{$p := .Periph}}
type {{$p}} struct {
	{{range .Regs}}{{if .Name}} {{.Name}} {{.Name}} {{else}} _ uint{{.Size}} {{end}}
{{end}}}

{{range .Instances}}
var {{.Name}} = (*{{$p}})(unsafe.Pointer(uintptr({{.Addr}})))
{{end}}

{{range .Regs}}{{if .Name}}

{{$uint := print "uint" .Size}}
{{$mu   := print "mmio.U" .Size}}
{{$mb   := print "mmio.Bits" .Size}}
{{$po   := print "unsafe.Pointer(uintptr(unsafe.Pointer(p))+" .Offset ")"}}
{{$bits := print .Name "_Bits" }}

type {{$bits}} {{$uint}}

func (b {{$bits}}) Field(mask {{$bits}}) int {
	return bits.Field32(uint32(b), uint32(mask))
}
func (mask {{$bits}}) J(v int) {{$bits}} {
	return {{$bits}}(bits.Make32(v, uint32(mask)))
}

type {{.Name}} struct { r {{$mu}} }

func (r *{{.Name}}) Bits(mask {{$bits}}) {{$bits}} {return {{$bits}}(r.r.Bits({{$uint}}(mask))) }
func (r *{{.Name}}) StoreBits(mask, b {{$bits}})   {r.r.StoreBits({{$uint}}(mask), {{$uint}}(b)) }
func (r *{{.Name}}) SetBits(mask {{$bits}})        { r.r.SetBits({{$uint}}(mask)) }
func (r *{{.Name}}) ClearBits(mask {{$bits}})      { r.r.ClearBits({{$uint}}(mask)) }
func (r *{{.Name}}) Load() {{$bits}}               { return {{$bits}}(r.r.Load()) }
func (r *{{.Name}}) Store(b {{$bits}})             { r.r.Store({{$uint}}(b)) }

{{range .Bits}}
func (p *{{$p}}) {{.}}() {{$mb}} {
	return {{$mb}}{
		(*{{$mu}})({{$po}}), {{$uint}}({{.}}),
	}
}{{end}}

{{end}}{{end}}
`

var multiTmpl = template.Must(template.New("multi").Parse(multiText))
